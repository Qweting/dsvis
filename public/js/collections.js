(()=>{"use strict";var __webpack_modules__={166:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{eval("\n// NAMESPACE OBJECT: ./node_modules/@svgdotjs/svg.js/src/modules/core/circled.js\nvar circled_namespaceObject = {};\n__webpack_require__.r(circled_namespaceObject);\n__webpack_require__.d(circled_namespaceObject, {\n  cx: () => (cx),\n  cy: () => (cy),\n  height: () => (height),\n  rx: () => (rx),\n  ry: () => (ry),\n  width: () => (width),\n  x: () => (x),\n  y: () => (y)\n});\n\n// NAMESPACE OBJECT: ./node_modules/@svgdotjs/svg.js/src/modules/core/gradiented.js\nvar gradiented_namespaceObject = {};\n__webpack_require__.r(gradiented_namespaceObject);\n__webpack_require__.d(gradiented_namespaceObject, {\n  from: () => (from),\n  to: () => (to)\n});\n\n// NAMESPACE OBJECT: ./node_modules/@svgdotjs/svg.js/src/modules/core/pointed.js\nvar pointed_namespaceObject = {};\n__webpack_require__.r(pointed_namespaceObject);\n__webpack_require__.d(pointed_namespaceObject, {\n  MorphArray: () => (MorphArray),\n  height: () => (pointed_height),\n  width: () => (pointed_width),\n  x: () => (pointed_x),\n  y: () => (pointed_y)\n});\n\n// NAMESPACE OBJECT: ./node_modules/@svgdotjs/svg.js/src/modules/core/poly.js\nvar poly_namespaceObject = {};\n__webpack_require__.r(poly_namespaceObject);\n__webpack_require__.d(poly_namespaceObject, {\n  array: () => (array),\n  clear: () => (clear),\n  move: () => (move),\n  plot: () => (plot),\n  size: () => (size)\n});\n\n// NAMESPACE OBJECT: ./node_modules/@svgdotjs/svg.js/src/modules/core/textable.js\nvar textable_namespaceObject = {};\n__webpack_require__.r(textable_namespaceObject);\n__webpack_require__.d(textable_namespaceObject, {\n  amove: () => (amove),\n  ax: () => (ax),\n  ay: () => (ay),\n  build: () => (build),\n  center: () => (center),\n  cx: () => (textable_cx),\n  cy: () => (textable_cy),\n  length: () => (textable_length),\n  move: () => (textable_move),\n  plain: () => (plain),\n  x: () => (textable_x),\n  y: () => (textable_y)\n});\n\n// NAMESPACE OBJECT: ./node_modules/@svgdotjs/svg.js/src/modules/core/containerGeometry.js\nvar containerGeometry_namespaceObject = {};\n__webpack_require__.r(containerGeometry_namespaceObject);\n__webpack_require__.d(containerGeometry_namespaceObject, {\n  dmove: () => (dmove),\n  dx: () => (dx),\n  dy: () => (dy),\n  height: () => (containerGeometry_height),\n  move: () => (containerGeometry_move),\n  size: () => (containerGeometry_size),\n  width: () => (containerGeometry_width),\n  x: () => (containerGeometry_x),\n  y: () => (containerGeometry_y)\n});\n\n;// ./node_modules/@svgdotjs/svg.js/src/utils/methods.js\nconst methods = {}\nconst names = []\n\nfunction registerMethods(name, m) {\n  if (Array.isArray(name)) {\n    for (const _name of name) {\n      registerMethods(_name, m)\n    }\n    return\n  }\n\n  if (typeof name === 'object') {\n    for (const _name in name) {\n      registerMethods(_name, name[_name])\n    }\n    return\n  }\n\n  addMethodNames(Object.getOwnPropertyNames(m))\n  methods[name] = Object.assign(methods[name] || {}, m)\n}\n\nfunction getMethodsFor(name) {\n  return methods[name] || {}\n}\n\nfunction getMethodNames() {\n  return [...new Set(names)]\n}\n\nfunction addMethodNames(_names) {\n  names.push(..._names)\n}\n\n;// ./node_modules/@svgdotjs/svg.js/src/utils/utils.js\n// Map function\nfunction map(array, block) {\n  let i\n  const il = array.length\n  const result = []\n\n  for (i = 0; i < il; i++) {\n    result.push(block(array[i]))\n  }\n\n  return result\n}\n\n// Filter function\nfunction filter(array, block) {\n  let i\n  const il = array.length\n  const result = []\n\n  for (i = 0; i < il; i++) {\n    if (block(array[i])) {\n      result.push(array[i])\n    }\n  }\n\n  return result\n}\n\n// Degrees to radians\nfunction radians(d) {\n  return ((d % 360) * Math.PI) / 180\n}\n\n// Radians to degrees\nfunction degrees(r) {\n  return ((r * 180) / Math.PI) % 360\n}\n\n// Convert camel cased string to dash separated\nfunction unCamelCase(s) {\n  return s.replace(/([A-Z])/g, function (m, g) {\n    return '-' + g.toLowerCase()\n  })\n}\n\n// Capitalize first letter of a string\nfunction capitalize(s) {\n  return s.charAt(0).toUpperCase() + s.slice(1)\n}\n\n// Calculate proportional width and height values when necessary\nfunction proportionalSize(element, width, height, box) {\n  if (width == null || height == null) {\n    box = box || element.bbox()\n\n    if (width == null) {\n      width = (box.width / box.height) * height\n    } else if (height == null) {\n      height = (box.height / box.width) * width\n    }\n  }\n\n  return {\n    width: width,\n    height: height\n  }\n}\n\n/**\n * This function adds support for string origins.\n * It searches for an origin in o.origin o.ox and o.originX.\n * This way, origin: {x: 'center', y: 50} can be passed as well as ox: 'center', oy: 50\n **/\nfunction getOrigin(o, element) {\n  const origin = o.origin\n  // First check if origin is in ox or originX\n  let ox = o.ox != null ? o.ox : o.originX != null ? o.originX : 'center'\n  let oy = o.oy != null ? o.oy : o.originY != null ? o.originY : 'center'\n\n  // Then check if origin was used and overwrite in that case\n  if (origin != null) {\n    ;[ox, oy] = Array.isArray(origin)\n      ? origin\n      : typeof origin === 'object'\n        ? [origin.x, origin.y]\n        : [origin, origin]\n  }\n\n  // Make sure to only call bbox when actually needed\n  const condX = typeof ox === 'string'\n  const condY = typeof oy === 'string'\n  if (condX || condY) {\n    const { height, width, x, y } = element.bbox()\n\n    // And only overwrite if string was passed for this specific axis\n    if (condX) {\n      ox = ox.includes('left')\n        ? x\n        : ox.includes('right')\n          ? x + width\n          : x + width / 2\n    }\n\n    if (condY) {\n      oy = oy.includes('top')\n        ? y\n        : oy.includes('bottom')\n          ? y + height\n          : y + height / 2\n    }\n  }\n\n  // Return the origin as it is if it wasn't a string\n  return [ox, oy]\n}\n\nconst descriptiveElements = new Set(['desc', 'metadata', 'title'])\nconst isDescriptive = (element) =>\n  descriptiveElements.has(element.nodeName)\n\nconst writeDataToDom = (element, data, defaults = {}) => {\n  const cloned = { ...data }\n\n  for (const key in cloned) {\n    if (cloned[key].valueOf() === defaults[key]) {\n      delete cloned[key]\n    }\n  }\n\n  if (Object.keys(cloned).length) {\n    element.node.setAttribute('data-svgjs', JSON.stringify(cloned)) // see #428\n  } else {\n    element.node.removeAttribute('data-svgjs')\n    element.node.removeAttribute('svgjs:data')\n  }\n}\n\n;// ./node_modules/@svgdotjs/svg.js/src/modules/core/namespaces.js\n// Default namespaces\nconst svg = 'http://www.w3.org/2000/svg'\nconst html = 'http://www.w3.org/1999/xhtml'\nconst xmlns = 'http://www.w3.org/2000/xmlns/'\nconst xlink = 'http://www.w3.org/1999/xlink'\n\n;// ./node_modules/@svgdotjs/svg.js/src/utils/window.js\nconst globals = {\n  window: typeof window === 'undefined' ? null : window,\n  document: typeof document === 'undefined' ? null : document\n}\n\nfunction registerWindow(win = null, doc = null) {\n  globals.window = win\n  globals.document = doc\n}\n\nconst save = {}\n\nfunction saveWindow() {\n  save.window = globals.window\n  save.document = globals.document\n}\n\nfunction restoreWindow() {\n  globals.window = save.window\n  globals.document = save.document\n}\n\nfunction withWindow(win, fn) {\n  saveWindow()\n  registerWindow(win, win.document)\n  fn(win, win.document)\n  restoreWindow()\n}\n\nfunction getWindow() {\n  return globals.window\n}\n\n;// ./node_modules/@svgdotjs/svg.js/src/types/Base.js\nclass Base {\n  // constructor (node/*, {extensions = []} */) {\n  //   // this.tags = []\n  //   //\n  //   // for (let extension of extensions) {\n  //   //   extension.setup.call(this, node)\n  //   //   this.tags.push(extension.name)\n  //   // }\n  // }\n}\n\n;// ./node_modules/@svgdotjs/svg.js/src/utils/adopter.js\n\n\n\n\n\n\nconst adopter_elements = {}\nconst root = '___SYMBOL___ROOT___'\n\n// Method for element creation\nfunction create(name, ns = svg) {\n  // create element\n  return globals.document.createElementNS(ns, name)\n}\n\nfunction adopter_makeInstance(element, isHTML = false) {\n  if (element instanceof Base) return element\n\n  if (typeof element === 'object') {\n    return adopter(element)\n  }\n\n  if (element == null) {\n    return new adopter_elements[root]()\n  }\n\n  if (typeof element === 'string' && element.charAt(0) !== '<') {\n    return adopter(globals.document.querySelector(element))\n  }\n\n  // Make sure, that HTML elements are created with the correct namespace\n  const wrapper = isHTML ? globals.document.createElement('div') : create('svg')\n  wrapper.innerHTML = element\n\n  // We can use firstChild here because we know,\n  // that the first char is < and thus an element\n  element = adopter(wrapper.firstChild)\n\n  // make sure, that element doesn't have its wrapper attached\n  wrapper.removeChild(wrapper.firstChild)\n  return element\n}\n\nfunction nodeOrNew(name, node) {\n  return node &&\n    (node instanceof globals.window.Node ||\n      (node.ownerDocument &&\n        node instanceof node.ownerDocument.defaultView.Node))\n    ? node\n    : create(name)\n}\n\n// Adopt existing svg elements\nfunction adopt(node) {\n  // check for presence of node\n  if (!node) return null\n\n  // make sure a node isn't already adopted\n  if (node.instance instanceof Base) return node.instance\n\n  if (node.nodeName === '#document-fragment') {\n    return new adopter_elements.Fragment(node)\n  }\n\n  // initialize variables\n  let className = capitalize(node.nodeName || 'Dom')\n\n  // Make sure that gradients are adopted correctly\n  if (className === 'LinearGradient' || className === 'RadialGradient') {\n    className = 'Gradient'\n\n    // Fallback to Dom if element is not known\n  } else if (!adopter_elements[className]) {\n    className = 'Dom'\n  }\n\n  return new adopter_elements[className](node)\n}\n\nlet adopter = adopt\n\nfunction mockAdopt(mock = adopt) {\n  adopter = mock\n}\n\nfunction register(element, name = element.name, asRoot = false) {\n  adopter_elements[name] = element\n  if (asRoot) adopter_elements[root] = element\n\n  addMethodNames(Object.getOwnPropertyNames(element.prototype))\n\n  return element\n}\n\nfunction getClass(name) {\n  return adopter_elements[name]\n}\n\n// Element id sequence\nlet did = 1000\n\n// Get next named element id\nfunction eid(name) {\n  return 'Svgjs' + capitalize(name) + did++\n}\n\n// Deep new id assignment\nfunction assignNewId(node) {\n  // do the same for SVG child nodes as well\n  for (let i = node.children.length - 1; i >= 0; i--) {\n    assignNewId(node.children[i])\n  }\n\n  if (node.id) {\n    node.id = eid(node.nodeName)\n    return node\n  }\n\n  return node\n}\n\n// Method for extending objects\nfunction extend(modules, methods) {\n  let key, i\n\n  modules = Array.isArray(modules) ? modules : [modules]\n\n  for (i = modules.length - 1; i >= 0; i--) {\n    for (key in methods) {\n      modules[i].prototype[key] = methods[key]\n    }\n  }\n}\n\nfunction wrapWithAttrCheck(fn) {\n  return function (...args) {\n    const o = args[args.length - 1]\n\n    if (o && o.constructor === Object && !(o instanceof Array)) {\n      return fn.apply(this, args.slice(0, -1)).attr(o)\n    } else {\n      return fn.apply(this, args)\n    }\n  }\n}\n\n;// ./node_modules/@svgdotjs/svg.js/src/modules/optional/arrange.js\n\n\n\n// Get all siblings, including myself\nfunction siblings() {\n  return this.parent().children()\n}\n\n// Get the current position siblings\nfunction position() {\n  return this.parent().index(this)\n}\n\n// Get the next element (will return null if there is none)\nfunction next() {\n  return this.siblings()[this.position() + 1]\n}\n\n// Get the next element (will return null if there is none)\nfunction prev() {\n  return this.siblings()[this.position() - 1]\n}\n\n// Send given element one step forward\nfunction forward() {\n  const i = this.position()\n  const p = this.parent()\n\n  // move node one step forward\n  p.add(this.remove(), i + 1)\n\n  return this\n}\n\n// Send given element one step backward\nfunction backward() {\n  const i = this.position()\n  const p = this.parent()\n\n  p.add(this.remove(), i ? i - 1 : 0)\n\n  return this\n}\n\n// Send given element all the way to the front\nfunction front() {\n  const p = this.parent()\n\n  // Move node forward\n  p.add(this.remove())\n\n  return this\n}\n\n// Send given element all the way to the back\nfunction back() {\n  const p = this.parent()\n\n  // Move node back\n  p.add(this.remove(), 0)\n\n  return this\n}\n\n// Inserts a given element before the targeted element\nfunction before(element) {\n  element = adopter_makeInstance(element)\n  element.remove()\n\n  const i = this.position()\n\n  this.parent().add(element, i)\n\n  return this\n}\n\n// Inserts a given element after the targeted element\nfunction after(element) {\n  element = adopter_makeInstance(element)\n  element.remove()\n\n  const i = this.position()\n\n  this.parent().add(element, i + 1)\n\n  return this\n}\n\nfunction insertBefore(element) {\n  element = adopter_makeInstance(element)\n  element.before(this)\n  return this\n}\n\nfunction insertAfter(element) {\n  element = adopter_makeInstance(element)\n  element.after(this)\n  return this\n}\n\nregisterMethods('Dom', {\n  siblings,\n  position,\n  next,\n  prev,\n  forward,\n  backward,\n  front,\n  back,\n  before,\n  after,\n  insertBefore,\n  insertAfter\n})\n\n;// ./node_modules/@svgdotjs/svg.js/src/modules/core/regex.js\n// Parse unit value\nconst numberAndUnit =\n  /^([+-]?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?)([a-z%]*)$/i\n\n// Parse hex value\nconst hex = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i\n\n// Parse rgb value\nconst rgb = /rgb\\((\\d+),(\\d+),(\\d+)\\)/\n\n// Parse reference id\nconst reference = /(#[a-z_][a-z0-9\\-_]*)/i\n\n// splits a transformation chain\nconst transforms = /\\)\\s*,?\\s*/\n\n// Whitespace\nconst whitespace = /\\s/g\n\n// Test hex value\nconst isHex = /^#[a-f0-9]{3}$|^#[a-f0-9]{6}$/i\n\n// Test rgb value\nconst isRgb = /^rgb\\(/\n\n// Test for blank string\nconst isBlank = /^(\\s+)?$/\n\n// Test for numeric string\nconst isNumber = /^[+-]?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i\n\n// Test for image url\nconst isImage = /\\.(jpg|jpeg|png|gif|svg)(\\?[^=]+.*)?/i\n\n// split at whitespace and comma\nconst delimiter = /[\\s,]+/\n\n// Test for path letter\nconst isPathLetter = /[MLHVCSQTAZ]/i\n\n;// ./node_modules/@svgdotjs/svg.js/src/modules/optional/class.js\n\n\n\n// Return array of classes on the node\nfunction classes() {\n  const attr = this.attr('class')\n  return attr == null ? [] : attr.trim().split(delimiter)\n}\n\n// Return true if class exists on the node, false otherwise\nfunction hasClass(name) {\n  return this.classes().indexOf(name) !== -1\n}\n\n// Add class to the node\nfunction addClass(name) {\n  if (!this.hasClass(name)) {\n    const array = this.classes()\n    array.push(name)\n    this.attr('class', array.join(' '))\n  }\n\n  return this\n}\n\n// Remove class from the node\nfunction removeClass(name) {\n  if (this.hasClass(name)) {\n    this.attr(\n      'class',\n      this.classes()\n        .filter(function (c) {\n          return c !== name\n        })\n        .join(' ')\n    )\n  }\n\n  return this\n}\n\n// Toggle the presence of a class on the node\nfunction toggleClass(name) {\n  return this.hasClass(name) ? this.removeClass(name) : this.addClass(name)\n}\n\nregisterMethods('Dom', {\n  classes,\n  hasClass,\n  addClass,\n  removeClass,\n  toggleClass\n})\n\n;// ./node_modules/@svgdotjs/svg.js/src/modules/optional/css.js\n\n\n\n// Dynamic style generator\nfunction css(style, val) {\n  const ret = {}\n  if (arguments.length === 0) {\n    // get full style as object\n    this.node.style.cssText\n      .split(/\\s*;\\s*/)\n      .filter(function (el) {\n        return !!el.length\n      })\n      .forEach(function (el) {\n        const t = el.split(/\\s*:\\s*/)\n        ret[t[0]] = t[1]\n      })\n    return ret\n  }\n\n  if (arguments.length < 2) {\n    // get style properties as array\n    if (Array.isArray(style)) {\n      for (const name of style) {\n        const cased = name\n        ret[name] = this.node.style.getPropertyValue(cased)\n      }\n      return ret\n    }\n\n    // get style for property\n    if (typeof style === 'string') {\n      return this.node.style.getPropertyValue(style)\n    }\n\n    // set styles in object\n    if (typeof style === 'object') {\n      for (const name in style) {\n        // set empty string if null/undefined/'' was given\n        this.node.style.setProperty(\n          name,\n          style[name] == null || isBlank.test(style[name]) ? '' : style[name]\n        )\n      }\n    }\n  }\n\n  // set style for property\n  if (arguments.length === 2) {\n    this.node.style.setProperty(\n      style,\n      val == null || isBlank.test(val) ? '' : val\n    )\n  }\n\n  return this\n}\n\n// Show element\nfunction show() {\n  return this.css('display', '')\n}\n\n// Hide element\nfunction hide() {\n  return this.css('display', 'none')\n}\n\n// Is element visible?\nfunction visible() {\n  return this.css('display') !== 'none'\n}\n\nregisterMethods('Dom', {\n  css,\n  show,\n  hide,\n  visible\n})\n\n;// ./node_modules/@svgdotjs/svg.js/src/modules/optional/data.js\n\n\n\n// Store data values on svg nodes\nfunction data(a, v, r) {\n  if (a == null) {\n    // get an object of attributes\n    return this.data(\n      map(\n        filter(\n          this.node.attributes,\n          (el) => el.nodeName.indexOf('data-') === 0\n        ),\n        (el) => el.nodeName.slice(5)\n      )\n    )\n  } else if (a instanceof Array) {\n    const data = {}\n    for (const key of a) {\n      data[key] = this.data(key)\n    }\n    return data\n  } else if (typeof a === 'object') {\n    for (v in a) {\n      this.data(v, a[v])\n    }\n  } else if (arguments.length < 2) {\n    try {\n      return JSON.parse(this.attr('data-' + a))\n    } catch (e) {\n      return this.attr('data-' + a)\n    }\n  } else {\n    this.attr(\n      'data-' + a,\n      v === null\n        ? null\n        : r === true || typeof v === 'string' || typeof v === 'number'\n          ? v\n          : JSON.stringify(v)\n    )\n  }\n\n  return this\n}\n\nregisterMethods('Dom', { data })\n\n;// ./node_modules/@svgdotjs/svg.js/src/modules/optional/memory.js\n\n\n// Remember arbitrary data\nfunction remember(k, v) {\n  // remember every item in an object individually\n  if (typeof arguments[0] === 'object') {\n    for (const key in k) {\n      this.remember(key, k[key])\n    }\n  } else if (arguments.length === 1) {\n    // retrieve memory\n    return this.memory()[k]\n  } else {\n    // store memory\n    this.memory()[k] = v\n  }\n\n  return this\n}\n\n// Erase a given memory\nfunction forget() {\n  if (arguments.length === 0) {\n    this._memory = {}\n  } else {\n    for (let i = arguments.length - 1; i >= 0; i--) {\n      delete this.memory()[arguments[i]]\n    }\n  }\n  return this\n}\n\n// This triggers creation of a new hidden class which is not performant\n// However, this function is not rarely used so it will not happen frequently\n// Return local memory object\nfunction memory() {\n  return (this._memory = this._memory || {})\n}\n\nregisterMethods('Dom', { remember, forget, memory })\n\n;// ./node_modules/@svgdotjs/svg.js/src/types/Color.js\n\n\nfunction sixDigitHex(hex) {\n  return hex.length === 4\n    ? [\n        '#',\n        hex.substring(1, 2),\n        hex.substring(1, 2),\n        hex.substring(2, 3),\n        hex.substring(2, 3),\n        hex.substring(3, 4),\n        hex.substring(3, 4)\n      ].join('')\n    : hex\n}\n\nfunction componentHex(component) {\n  const integer = Math.round(component)\n  const bounded = Math.max(0, Math.min(255, integer))\n  const hex = bounded.toString(16)\n  return hex.length === 1 ? '0' + hex : hex\n}\n\nfunction is(object, space) {\n  for (let i = space.length; i--; ) {\n    if (object[space[i]] == null) {\n      return false\n    }\n  }\n  return true\n}\n\nfunction getParameters(a, b) {\n  const params = is(a, 'rgb')\n    ? { _a: a.r, _b: a.g, _c: a.b, _d: 0, space: 'rgb' }\n    : is(a, 'xyz')\n      ? { _a: a.x, _b: a.y, _c: a.z, _d: 0, space: 'xyz' }\n      : is(a, 'hsl')\n        ? { _a: a.h, _b: a.s, _c: a.l, _d: 0, space: 'hsl' }\n        : is(a, 'lab')\n          ? { _a: a.l, _b: a.a, _c: a.b, _d: 0, space: 'lab' }\n          : is(a, 'lch')\n            ? { _a: a.l, _b: a.c, _c: a.h, _d: 0, space: 'lch' }\n            : is(a, 'cmyk')\n              ? { _a: a.c, _b: a.m, _c: a.y, _d: a.k, space: 'cmyk' }\n              : { _a: 0, _b: 0, _c: 0, space: 'rgb' }\n\n  params.space = b || params.space\n  return params\n}\n\nfunction cieSpace(space) {\n  if (space === 'lab' || space === 'xyz' || space === 'lch') {\n    return true\n  } else {\n    return false\n  }\n}\n\nfunction hueToRgb(p, q, t) {\n  if (t < 0) t += 1\n  if (t > 1) t -= 1\n  if (t < 1 / 6) return p + (q - p) * 6 * t\n  if (t < 1 / 2) return q\n  if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6\n  return p\n}\n\nclass Color {\n  constructor(...inputs) {\n    this.init(...inputs)\n  }\n\n  // Test if given value is a color\n  static isColor(color) {\n    return (\n      color && (color instanceof Color || this.isRgb(color) || this.test(color))\n    )\n  }\n\n  // Test if given value is an rgb object\n  static isRgb(color) {\n    return (\n      color &&\n      typeof color.r === 'number' &&\n      typeof color.g === 'number' &&\n      typeof color.b === 'number'\n    )\n  }\n\n  /*\n  Generating random colors\n  */\n  static random(mode = 'vibrant', t) {\n    // Get the math modules\n    const { random, round, sin, PI: pi } = Math\n\n    // Run the correct generator\n    if (mode === 'vibrant') {\n      const l = (81 - 57) * random() + 57\n      const c = (83 - 45) * random() + 45\n      const h = 360 * random()\n      const color = new Color(l, c, h, 'lch')\n      return color\n    } else if (mode === 'sine') {\n      t = t == null ? random() : t\n      const r = round(80 * sin((2 * pi * t) / 0.5 + 0.01) + 150)\n      const g = round(50 * sin((2 * pi * t) / 0.5 + 4.6) + 200)\n      const b = round(100 * sin((2 * pi * t) / 0.5 + 2.3) + 150)\n      const color = new Color(r, g, b)\n      return color\n    } else if (mode === 'pastel') {\n      const l = (94 - 86) * random() + 86\n      const c = (26 - 9) * random() + 9\n      const h = 360 * random()\n      const color = new Color(l, c, h, 'lch')\n      return color\n    } else if (mode === 'dark') {\n      const l = 10 + 10 * random()\n      const c = (125 - 75) * random() + 86\n      const h = 360 * random()\n      const color = new Color(l, c, h, 'lch')\n      return color\n    } else if (mode === 'rgb') {\n      const r = 255 * random()\n      const g = 255 * random()\n      const b = 255 * random()\n      const color = new Color(r, g, b)\n      return color\n    } else if (mode === 'lab') {\n      const l = 100 * random()\n      const a = 256 * random() - 128\n      const b = 256 * random() - 128\n      const color = new Color(l, a, b, 'lab')\n      return color\n    } else if (mode === 'grey') {\n      const grey = 255 * random()\n      const color = new Color(grey, grey, grey)\n      return color\n    } else {\n      throw new Error('Unsupported random color mode')\n    }\n  }\n\n  // Test if given value is a color string\n  static test(color) {\n    return typeof color === 'string' && (isHex.test(color) || isRgb.test(color))\n  }\n\n  cmyk() {\n    // Get the rgb values for the current color\n    const { _a, _b, _c } = this.rgb()\n    const [r, g, b] = [_a, _b, _c].map((v) => v / 255)\n\n    // Get the cmyk values in an unbounded format\n    const k = Math.min(1 - r, 1 - g, 1 - b)\n\n    if (k === 1) {\n      // Catch the black case\n      return new Color(0, 0, 0, 1, 'cmyk')\n    }\n\n    const c = (1 - r - k) / (1 - k)\n    const m = (1 - g - k) / (1 - k)\n    const y = (1 - b - k) / (1 - k)\n\n    // Construct the new color\n    const color = new Color(c, m, y, k, 'cmyk')\n    return color\n  }\n\n  hsl() {\n    // Get the rgb values\n    const { _a, _b, _c } = this.rgb()\n    const [r, g, b] = [_a, _b, _c].map((v) => v / 255)\n\n    // Find the maximum and minimum values to get the lightness\n    const max = Math.max(r, g, b)\n    const min = Math.min(r, g, b)\n    const l = (max + min) / 2\n\n    // If the r, g, v values are identical then we are grey\n    const isGrey = max === min\n\n    // Calculate the hue and saturation\n    const delta = max - min\n    const s = isGrey\n      ? 0\n      : l > 0.5\n        ? delta / (2 - max - min)\n        : delta / (max + min)\n    const h = isGrey\n      ? 0\n      : max === r\n        ? ((g - b) / delta + (g < b ? 6 : 0)) / 6\n        : max === g\n          ? ((b - r) / delta + 2) / 6\n          : max === b\n            ? ((r - g) / delta + 4) / 6\n            : 0\n\n    // Construct and return the new color\n    const color = new Color(360 * h, 100 * s, 100 * l, 'hsl')\n    return color\n  }\n\n  init(a = 0, b = 0, c = 0, d = 0, space = 'rgb') {\n    // This catches the case when a falsy value is passed like ''\n    a = !a ? 0 : a\n\n    // Reset all values in case the init function is rerun with new color space\n    if (this.space) {\n      for (const component in this.space) {\n        delete this[this.space[component]]\n      }\n    }\n\n    if (typeof a === 'number') {\n      // Allow for the case that we don't need d...\n      space = typeof d === 'string' ? d : space\n      d = typeof d === 'string' ? 0 : d\n\n      // Assign the values straight to the color\n      Object.assign(this, { _a: a, _b: b, _c: c, _d: d, space })\n      // If the user gave us an array, make the color from it\n    } else if (a instanceof Array) {\n      this.space = b || (typeof a[3] === 'string' ? a[3] : a[4]) || 'rgb'\n      Object.assign(this, { _a: a[0], _b: a[1], _c: a[2], _d: a[3] || 0 })\n    } else if (a instanceof Object) {\n      // Set the object up and assign its values directly\n      const values = getParameters(a, b)\n      Object.assign(this, values)\n    } else if (typeof a === 'string') {\n      if (isRgb.test(a)) {\n        const noWhitespace = a.replace(whitespace, '')\n        const [_a, _b, _c] = rgb\n          .exec(noWhitespace)\n          .slice(1, 4)\n          .map((v) => parseInt(v))\n        Object.assign(this, { _a, _b, _c, _d: 0, space: 'rgb' })\n      } else if (isHex.test(a)) {\n        const hexParse = (v) => parseInt(v, 16)\n        const [, _a, _b, _c] = hex.exec(sixDigitHex(a)).map(hexParse)\n        Object.assign(this, { _a, _b, _c, _d: 0, space: 'rgb' })\n      } else throw Error(\"Unsupported string format, can't construct Color\")\n    }\n\n    // Now add the components as a convenience\n    const { _a, _b, _c, _d } = this\n    const components =\n      this.space === 'rgb'\n        ? { r: _a, g: _b, b: _c }\n        : this.space === 'xyz'\n          ? { x: _a, y: _b, z: _c }\n          : this.space === 'hsl'\n            ? { h: _a, s: _b, l: _c }\n            : this.space === 'lab'\n              ? { l: _a, a: _b, b: _c }\n              : this.space === 'lch'\n                ? { l: _a, c: _b, h: _c }\n                : this.space === 'cmyk'\n                  ? { c: _a, m: _b, y: _c, k: _d }\n                  : {}\n    Object.assign(this, components)\n  }\n\n  lab() {\n    // Get the xyz color\n    const { x, y, z } = this.xyz()\n\n    // Get the lab components\n    const l = 116 * y - 16\n    const a = 500 * (x - y)\n    const b = 200 * (y - z)\n\n    // Construct and return a new color\n    const color = new Color(l, a, b, 'lab')\n    return color\n  }\n\n  lch() {\n    // Get the lab color directly\n    const { l, a, b } = this.lab()\n\n    // Get the chromaticity and the hue using polar coordinates\n    const c = Math.sqrt(a ** 2 + b ** 2)\n    let h = (180 * Math.atan2(b, a)) / Math.PI\n    if (h < 0) {\n      h *= -1\n      h = 360 - h\n    }\n\n    // Make a new color and return it\n    const color = new Color(l, c, h, 'lch')\n    return color\n  }\n  /*\n  Conversion Methods\n  */\n\n  rgb() {\n    if (this.space === 'rgb') {\n      return this\n    } else if (cieSpace(this.space)) {\n      // Convert to the xyz color space\n      let { x, y, z } = this\n      if (this.space === 'lab' || this.space === 'lch') {\n        // Get the values in the lab space\n        let { l, a, b } = this\n        if (this.space === 'lch') {\n          const { c, h } = this\n          const dToR = Math.PI / 180\n          a = c * Math.cos(dToR * h)\n          b = c * Math.sin(dToR * h)\n        }\n\n        // Undo the nonlinear function\n        const yL = (l + 16) / 116\n        const xL = a / 500 + yL\n        const zL = yL - b / 200\n\n        // Get the xyz values\n        const ct = 16 / 116\n        const mx = 0.008856\n        const nm = 7.787\n        x = 0.95047 * (xL ** 3 > mx ? xL ** 3 : (xL - ct) / nm)\n        y = 1.0 * (yL ** 3 > mx ? yL ** 3 : (yL - ct) / nm)\n        z = 1.08883 * (zL ** 3 > mx ? zL ** 3 : (zL - ct) / nm)\n      }\n\n      // Convert xyz to unbounded rgb values\n      const rU = x * 3.2406 + y * -1.5372 + z * -0.4986\n      const gU = x * -0.9689 + y * 1.8758 + z * 0.0415\n      const bU = x * 0.0557 + y * -0.204 + z * 1.057\n\n      // Convert the values to true rgb values\n      const pow = Math.pow\n      const bd = 0.0031308\n      const r = rU > bd ? 1.055 * pow(rU, 1 / 2.4) - 0.055 : 12.92 * rU\n      const g = gU > bd ? 1.055 * pow(gU, 1 / 2.4) - 0.055 : 12.92 * gU\n      const b = bU > bd ? 1.055 * pow(bU, 1 / 2.4) - 0.055 : 12.92 * bU\n\n      // Make and return the color\n      const color = new Color(255 * r, 255 * g, 255 * b)\n      return color\n    } else if (this.space === 'hsl') {\n      // https://bgrins.github.io/TinyColor/docs/tinycolor.html\n      // Get the current hsl values\n      let { h, s, l } = this\n      h /= 360\n      s /= 100\n      l /= 100\n\n      // If we are grey, then just make the color directly\n      if (s === 0) {\n        l *= 255\n        const color = new Color(l, l, l)\n        return color\n      }\n\n      // TODO I have no idea what this does :D If you figure it out, tell me!\n      const q = l < 0.5 ? l * (1 + s) : l + s - l * s\n      const p = 2 * l - q\n\n      // Get the rgb values\n      const r = 255 * hueToRgb(p, q, h + 1 / 3)\n      const g = 255 * hueToRgb(p, q, h)\n      const b = 255 * hueToRgb(p, q, h - 1 / 3)\n\n      // Make a new color\n      const color = new Color(r, g, b)\n      return color\n    } else if (this.space === 'cmyk') {\n      // https://gist.github.com/felipesabino/5066336\n      // Get the normalised cmyk values\n      const { c, m, y, k } = this\n\n      // Get the rgb values\n      const r = 255 * (1 - Math.min(1, c * (1 - k) + k))\n      const g = 255 * (1 - Math.min(1, m * (1 - k) + k))\n      const b = 255 * (1 - Math.min(1, y * (1 - k) + k))\n\n      // Form the color and return it\n      const color = new Color(r, g, b)\n      return color\n    } else {\n      return this\n    }\n  }\n\n  toArray() {\n    const { _a, _b, _c, _d, space } = this\n    return [_a, _b, _c, _d, space]\n  }\n\n  toHex() {\n    const [r, g, b] = this._clamped().map(componentHex)\n    return `#${r}${g}${b}`\n  }\n\n  toRgb() {\n    const [rV, gV, bV] = this._clamped()\n    const string = `rgb(${rV},${gV},${bV})`\n    return string\n  }\n\n  toString() {\n    return this.toHex()\n  }\n\n  xyz() {\n    // Normalise the red, green and blue values\n    const { _a: r255, _b: g255, _c: b255 } = this.rgb()\n    const [r, g, b] = [r255, g255, b255].map((v) => v / 255)\n\n    // Convert to the lab rgb space\n    const rL = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92\n    const gL = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92\n    const bL = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92\n\n    // Convert to the xyz color space without bounding the values\n    const xU = (rL * 0.4124 + gL * 0.3576 + bL * 0.1805) / 0.95047\n    const yU = (rL * 0.2126 + gL * 0.7152 + bL * 0.0722) / 1.0\n    const zU = (rL * 0.0193 + gL * 0.1192 + bL * 0.9505) / 1.08883\n\n    // Get the proper xyz values by applying the bounding\n    const x = xU > 0.008856 ? Math.pow(xU, 1 / 3) : 7.787 * xU + 16 / 116\n    const y = yU > 0.008856 ? Math.pow(yU, 1 / 3) : 7.787 * yU + 16 / 116\n    const z = zU > 0.008856 ? Math.pow(zU, 1 / 3) : 7.787 * zU + 16 / 116\n\n    // Make and return the color\n    const color = new Color(x, y, z, 'xyz')\n    return color\n  }\n\n  /*\n  Input and Output methods\n  */\n\n  _clamped() {\n    const { _a, _b, _c } = this.rgb()\n    const { max, min, round } = Math\n    const format = (v) => max(0, min(round(v), 255))\n    return [_a, _b, _c].map(format)\n  }\n\n  /*\n  Constructing colors\n  */\n}\n\n;// ./node_modules/@svgdotjs/svg.js/src/types/Point.js\n\n\nclass Point {\n  // Initialize\n  constructor(...args) {\n    this.init(...args)\n  }\n\n  // Clone point\n  clone() {\n    return new Point(this)\n  }\n\n  init(x, y) {\n    const base = { x: 0, y: 0 }\n\n    // ensure source as object\n    const source = Array.isArray(x)\n      ? { x: x[0], y: x[1] }\n      : typeof x === 'object'\n        ? { x: x.x, y: x.y }\n        : { x: x, y: y }\n\n    // merge source\n    this.x = source.x == null ? base.x : source.x\n    this.y = source.y == null ? base.y : source.y\n\n    return this\n  }\n\n  toArray() {\n    return [this.x, this.y]\n  }\n\n  transform(m) {\n    return this.clone().transformO(m)\n  }\n\n  // Transform point with matrix\n  transformO(m) {\n    if (!Matrix.isMatrixLike(m)) {\n      m = new Matrix(m)\n    }\n\n    const { x, y } = this\n\n    // Perform the matrix multiplication\n    this.x = m.a * x + m.c * y + m.e\n    this.y = m.b * x + m.d * y + m.f\n\n    return this\n  }\n}\n\nfunction point(x, y) {\n  return new Point(x, y).transformO(this.screenCTM().inverseO())\n}\n\n;// ./node_modules/@svgdotjs/svg.js/src/types/Matrix.js\n\n\n\n\n\n\nfunction closeEnough(a, b, threshold) {\n  return Math.abs(b - a) < (threshold || 1e-6)\n}\n\nclass Matrix {\n  constructor(...args) {\n    this.init(...args)\n  }\n\n  static formatTransforms(o) {\n    // Get all of the parameters required to form the matrix\n    const flipBoth = o.flip === 'both' || o.flip === true\n    const flipX = o.flip && (flipBoth || o.flip === 'x') ? -1 : 1\n    const flipY = o.flip && (flipBoth || o.flip === 'y') ? -1 : 1\n    const skewX =\n      o.skew && o.skew.length\n        ? o.skew[0]\n        : isFinite(o.skew)\n          ? o.skew\n          : isFinite(o.skewX)\n            ? o.skewX\n            : 0\n    const skewY =\n      o.skew && o.skew.length\n        ? o.skew[1]\n        : isFinite(o.skew)\n          ? o.skew\n          : isFinite(o.skewY)\n            ? o.skewY\n            : 0\n    const scaleX =\n      o.scale && o.scale.length\n        ? o.scale[0] * flipX\n        : isFinite(o.scale)\n          ? o.scale * flipX\n          : isFinite(o.scaleX)\n            ? o.scaleX * flipX\n            : flipX\n    const scaleY =\n      o.scale && o.scale.length\n        ? o.scale[1] * flipY\n        : isFinite(o.scale)\n          ? o.scale * flipY\n          : isFinite(o.scaleY)\n            ? o.scaleY * flipY\n            : flipY\n    const shear = o.shear || 0\n    const theta = o.rotate || o.theta || 0\n    const origin = new Point(\n      o.origin || o.around || o.ox || o.originX,\n      o.oy || o.originY\n    )\n    const ox = origin.x\n    const oy = origin.y\n    // We need Point to be invalid if nothing was passed because we cannot default to 0 here. That is why NaN\n    const position = new Point(\n      o.position || o.px || o.positionX || NaN,\n      o.py || o.positionY || NaN\n    )\n    const px = position.x\n    const py = position.y\n    const translate = new Point(\n      o.translate || o.tx || o.translateX,\n      o.ty || o.translateY\n    )\n    const tx = translate.x\n    const ty = translate.y\n    const relative = new Point(\n      o.relative || o.rx || o.relativeX,\n      o.ry || o.relativeY\n    )\n    const rx = relative.x\n    const ry = relative.y\n\n    // Populate all of the values\n    return {\n      scaleX,\n      scaleY,\n      skewX,\n      skewY,\n      shear,\n      theta,\n      rx,\n      ry,\n      tx,\n      ty,\n      ox,\n      oy,\n      px,\n      py\n    }\n  }\n\n  static fromArray(a) {\n    return { a: a[0], b: a[1], c: a[2], d: a[3], e: a[4], f: a[5] }\n  }\n\n  static isMatrixLike(o) {\n    return (\n      o.a != null ||\n      o.b != null ||\n      o.c != null ||\n      o.d != null ||\n      o.e != null ||\n      o.f != null\n    )\n  }\n\n  // left matrix, right matrix, target matrix which is overwritten\n  static matrixMultiply(l, r, o) {\n    // Work out the product directly\n    const a = l.a * r.a + l.c * r.b\n    const b = l.b * r.a + l.d * r.b\n    const c = l.a * r.c + l.c * r.d\n    const d = l.b * r.c + l.d * r.d\n    const e = l.e + l.a * r.e + l.c * r.f\n    const f = l.f + l.b * r.e + l.d * r.f\n\n    // make sure to use local variables because l/r and o could be the same\n    o.a = a\n    o.b = b\n    o.c = c\n    o.d = d\n    o.e = e\n    o.f = f\n\n    return o\n  }\n\n  around(cx, cy, matrix) {\n    return this.clone().aroundO(cx, cy, matrix)\n  }\n\n  // Transform around a center point\n  aroundO(cx, cy, matrix) {\n    const dx = cx || 0\n    const dy = cy || 0\n    return this.translateO(-dx, -dy).lmultiplyO(matrix).translateO(dx, dy)\n  }\n\n  // Clones this matrix\n  clone() {\n    return new Matrix(this)\n  }\n\n  // Decomposes this matrix into its affine parameters\n  decompose(cx = 0, cy = 0) {\n    // Get the parameters from the matrix\n    const a = this.a\n    const b = this.b\n    const c = this.c\n    const d = this.d\n    const e = this.e\n    const f = this.f\n\n    // Figure out if the winding direction is clockwise or counterclockwise\n    const determinant = a * d - b * c\n    const ccw = determinant > 0 ? 1 : -1\n\n    // Since we only shear in x, we can use the x basis to get the x scale\n    // and the rotation of the resulting matrix\n    const sx = ccw * Math.sqrt(a * a + b * b)\n    const thetaRad = Math.atan2(ccw * b, ccw * a)\n    const theta = (180 / Math.PI) * thetaRad\n    const ct = Math.cos(thetaRad)\n    const st = Math.sin(thetaRad)\n\n    // We can then solve the y basis vector simultaneously to get the other\n    // two affine parameters directly from these parameters\n    const lam = (a * c + b * d) / determinant\n    const sy = (c * sx) / (lam * a - b) || (d * sx) / (lam * b + a)\n\n    // Use the translations\n    const tx = e - cx + cx * ct * sx + cy * (lam * ct * sx - st * sy)\n    const ty = f - cy + cx * st * sx + cy * (lam * st * sx + ct * sy)\n\n    // Construct the decomposition and return it\n    return {\n      // Return the affine parameters\n      scaleX: sx,\n      scaleY: sy,\n      shear: lam,\n      rotate: theta,\n      translateX: tx,\n      translateY: ty,\n      originX: cx,\n      originY: cy,\n\n      // Return the matrix parameters\n      a: this.a,\n      b: this.b,\n      c: this.c,\n      d: this.d,\n      e: this.e,\n      f: this.f\n    }\n  }\n\n  // Check if two matrices are equal\n  equals(other) {\n    if (other === this) return true\n    const comp = new Matrix(other)\n    return (\n      closeEnough(this.a, comp.a) &&\n      closeEnough(this.b, comp.b) &&\n      closeEnough(this.c, comp.c) &&\n      closeEnough(this.d, comp.d) &&\n      closeEnough(this.e, comp.e) &&\n      closeEnough(this.f, comp.f)\n    )\n  }\n\n  // Flip matrix on x or y, at a given offset\n  flip(axis, around) {\n    return this.clone().flipO(axis, around)\n  }\n\n  flipO(axis, around) {\n    return axis === 'x'\n      ? this.scaleO(-1, 1, around, 0)\n      : axis === 'y'\n        ? this.scaleO(1, -1, 0, around)\n        : this.scaleO(-1, -1, axis, around || axis) // Define an x, y flip point\n  }\n\n  // Initialize\n  init(source) {\n    const base = Matrix.fromArray([1, 0, 0, 1, 0, 0])\n\n    // ensure source as object\n    source =\n      source instanceof Element\n        ? source.matrixify()\n        : typeof source === 'string'\n          ? Matrix.fromArray(source.split(delimiter).map(parseFloat))\n          : Array.isArray(source)\n            ? Matrix.fromArray(source)\n            : typeof source === 'object' && Matrix.isMatrixLike(source)\n              ? source\n              : typeof source === 'object'\n                ? new Matrix().transform(source)\n                : arguments.length === 6\n                  ? Matrix.fromArray([].slice.call(arguments))\n                  : base\n\n    // Merge the source matrix with the base matrix\n    this.a = source.a != null ? source.a : base.a\n    this.b = source.b != null ? source.b : base.b\n    this.c = source.c != null ? source.c : base.c\n    this.d = source.d != null ? source.d : base.d\n    this.e = source.e != null ? source.e : base.e\n    this.f = source.f != null ? source.f : base.f\n\n    return this\n  }\n\n  inverse() {\n    return this.clone().inverseO()\n  }\n\n  // Inverses matrix\n  inverseO() {\n    // Get the current parameters out of the matrix\n    const a = this.a\n    const b = this.b\n    const c = this.c\n    const d = this.d\n    const e = this.e\n    const f = this.f\n\n    // Invert the 2x2 matrix in the top left\n    const det = a * d - b * c\n    if (!det) throw new Error('Cannot invert ' + this)\n\n    // Calculate the top 2x2 matrix\n    const na = d / det\n    const nb = -b / det\n    const nc = -c / det\n    const nd = a / det\n\n    // Apply the inverted matrix to the top right\n    const ne = -(na * e + nc * f)\n    const nf = -(nb * e + nd * f)\n\n    // Construct the inverted matrix\n    this.a = na\n    this.b = nb\n    this.c = nc\n    this.d = nd\n    this.e = ne\n    this.f = nf\n\n    return this\n  }\n\n  lmultiply(matrix) {\n    return this.clone().lmultiplyO(matrix)\n  }\n\n  lmultiplyO(matrix) {\n    const r = this\n    const l = matrix instanceof Matrix ? matrix : new Matrix(matrix)\n\n    return Matrix.matrixMultiply(l, r, this)\n  }\n\n  // Left multiplies by the given matrix\n  multiply(matrix) {\n    return this.clone().multiplyO(matrix)\n  }\n\n  multiplyO(matrix) {\n    // Get the matrices\n    const l = this\n    const r = matrix instanceof Matrix ? matrix : new Matrix(matrix)\n\n    return Matrix.matrixMultiply(l, r, this)\n  }\n\n  // Rotate matrix\n  rotate(r, cx, cy) {\n    return this.clone().rotateO(r, cx, cy)\n  }\n\n  rotateO(r, cx = 0, cy = 0) {\n    // Convert degrees to radians\n    r = radians(r)\n\n    const cos = Math.cos(r)\n    const sin = Math.sin(r)\n\n    const { a, b, c, d, e, f } = this\n\n    this.a = a * cos - b * sin\n    this.b = b * cos + a * sin\n    this.c = c * cos - d * sin\n    this.d = d * cos + c * sin\n    this.e = e * cos - f * sin + cy * sin - cx * cos + cx\n    this.f = f * cos + e * sin - cx * sin - cy * cos + cy\n\n    return this\n  }\n\n  // Scale matrix\n  scale() {\n    return this.clone().scaleO(...arguments)\n  }\n\n  scaleO(x, y = x, cx = 0, cy = 0) {\n    // Support uniform scaling\n    if (arguments.length === 3) {\n      cy = cx\n      cx = y\n      y = x\n    }\n\n    const { a, b, c, d, e, f } = this\n\n    this.a = a * x\n    this.b = b * y\n    this.c = c * x\n    this.d = d * y\n    this.e = e * x - cx * x + cx\n    this.f = f * y - cy * y + cy\n\n    return this\n  }\n\n  // Shear matrix\n  shear(a, cx, cy) {\n    return this.clone().shearO(a, cx, cy)\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  shearO(lx, cx = 0, cy = 0) {\n    const { a, b, c, d, e, f } = this\n\n    this.a = a + b * lx\n    this.c = c + d * lx\n    this.e = e + f * lx - cy * lx\n\n    return this\n  }\n\n  // Skew Matrix\n  skew() {\n    return this.clone().skewO(...arguments)\n  }\n\n  skewO(x, y = x, cx = 0, cy = 0) {\n    // support uniformal skew\n    if (arguments.length === 3) {\n      cy = cx\n      cx = y\n      y = x\n    }\n\n    // Convert degrees to radians\n    x = radians(x)\n    y = radians(y)\n\n    const lx = Math.tan(x)\n    const ly = Math.tan(y)\n\n    const { a, b, c, d, e, f } = this\n\n    this.a = a + b * lx\n    this.b = b + a * ly\n    this.c = c + d * lx\n    this.d = d + c * ly\n    this.e = e + f * lx - cy * lx\n    this.f = f + e * ly - cx * ly\n\n    return this\n  }\n\n  // SkewX\n  skewX(x, cx, cy) {\n    return this.skew(x, 0, cx, cy)\n  }\n\n  // SkewY\n  skewY(y, cx, cy) {\n    return this.skew(0, y, cx, cy)\n  }\n\n  toArray() {\n    return [this.a, this.b, this.c, this.d, this.e, this.f]\n  }\n\n  // Convert matrix to string\n  toString() {\n    return (\n      'matrix(' +\n      this.a +\n      ',' +\n      this.b +\n      ',' +\n      this.c +\n      ',' +\n      this.d +\n      ',' +\n      this.e +\n      ',' +\n      this.f +\n      ')'\n    )\n  }\n\n  // Transform a matrix into another matrix by manipulating the space\n  transform(o) {\n    // Check if o is a matrix and then left multiply it directly\n    if (Matrix.isMatrixLike(o)) {\n      const matrix = new Matrix(o)\n      return matrix.multiplyO(this)\n    }\n\n    // Get the proposed transformations and the current transformations\n    const t = Matrix.formatTransforms(o)\n    const current = this\n    const { x: ox, y: oy } = new Point(t.ox, t.oy).transform(current)\n\n    // Construct the resulting matrix\n    const transformer = new Matrix()\n      .translateO(t.rx, t.ry)\n      .lmultiplyO(current)\n      .translateO(-ox, -oy)\n      .scaleO(t.scaleX, t.scaleY)\n      .skewO(t.skewX, t.skewY)\n      .shearO(t.shear)\n      .rotateO(t.theta)\n      .translateO(ox, oy)\n\n    // If we want the origin at a particular place, we force it there\n    if (isFinite(t.px) || isFinite(t.py)) {\n      const origin = new Point(ox, oy).transform(transformer)\n      // TODO: Replace t.px with isFinite(t.px)\n      // Doesn't work because t.px is also 0 if it wasn't passed\n      const dx = isFinite(t.px) ? t.px - origin.x : 0\n      const dy = isFinite(t.py) ? t.py - origin.y : 0\n      transformer.translateO(dx, dy)\n    }\n\n    // Translate now after positioning\n    transformer.translateO(t.tx, t.ty)\n    return transformer\n  }\n\n  // Translate matrix\n  translate(x, y) {\n    return this.clone().translateO(x, y)\n  }\n\n  translateO(x, y) {\n    this.e += x || 0\n    this.f += y || 0\n    return this\n  }\n\n  valueOf() {\n    return {\n      a: this.a,\n      b: this.b,\n      c: this.c,\n      d: this.d,\n      e: this.e,\n      f: this.f\n    }\n  }\n}\n\nfunction ctm() {\n  return new Matrix(this.node.getCTM())\n}\n\nfunction screenCTM() {\n  try {\n    /* https://bugzilla.mozilla.org/show_bug.cgi?id=1344537\n       This is needed because FF does not return the transformation matrix\n       for the inner coordinate system when getScreenCTM() is called on nested svgs.\n       However all other Browsers do that */\n    if (typeof this.isRoot === 'function' && !this.isRoot()) {\n      const rect = this.rect(1, 1)\n      const m = rect.node.getScreenCTM()\n      rect.remove()\n      return new Matrix(m)\n    }\n    return new Matrix(this.node.getScreenCTM())\n  } catch (e) {\n    console.warn(\n      `Cannot get CTM from SVG node ${this.node.nodeName}. Is the element rendered?`\n    )\n    return new Matrix()\n  }\n}\n\nregister(Matrix, 'Matrix')\n\n;// ./node_modules/@svgdotjs/svg.js/src/modules/core/parser.js\n\n\n\nfunction parser() {\n  // Reuse cached element if possible\n  if (!parser.nodes) {\n    const svg = adopter_makeInstance().size(2, 0)\n    svg.node.style.cssText = [\n      'opacity: 0',\n      'position: absolute',\n      'left: -100%',\n      'top: -100%',\n      'overflow: hidden'\n    ].join(';')\n\n    svg.attr('focusable', 'false')\n    svg.attr('aria-hidden', 'true')\n\n    const path = svg.path().node\n\n    parser.nodes = { svg, path }\n  }\n\n  if (!parser.nodes.svg.node.parentNode) {\n    const b = globals.document.body || globals.document.documentElement\n    parser.nodes.svg.addTo(b)\n  }\n\n  return parser.nodes\n}\n\n;// ./node_modules/@svgdotjs/svg.js/src/types/Box.js\n\n\n\n\n\n\n\n\nfunction isNulledBox(box) {\n  return !box.width && !box.height && !box.x && !box.y\n}\n\nfunction domContains(node) {\n  return (\n    node === globals.document ||\n    (\n      globals.document.documentElement.contains ||\n      function (node) {\n        // This is IE - it does not support contains() for top-level SVGs\n        while (node.parentNode) {\n          node = node.parentNode\n        }\n        return node === globals.document\n      }\n    ).call(globals.document.documentElement, node)\n  )\n}\n\nclass Box {\n  constructor(...args) {\n    this.init(...args)\n  }\n\n  addOffset() {\n    // offset by window scroll position, because getBoundingClientRect changes when window is scrolled\n    this.x += globals.window.pageXOffset\n    this.y += globals.window.pageYOffset\n    return new Box(this)\n  }\n\n  init(source) {\n    const base = [0, 0, 0, 0]\n    source =\n      typeof source === 'string'\n        ? source.split(delimiter).map(parseFloat)\n        : Array.isArray(source)\n          ? source\n          : typeof source === 'object'\n            ? [\n                source.left != null ? source.left : source.x,\n                source.top != null ? source.top : source.y,\n                source.width,\n                source.height\n              ]\n            : arguments.length === 4\n              ? [].slice.call(arguments)\n              : base\n\n    this.x = source[0] || 0\n    this.y = source[1] || 0\n    this.width = this.w = source[2] || 0\n    this.height = this.h = source[3] || 0\n\n    // Add more bounding box properties\n    this.x2 = this.x + this.w\n    this.y2 = this.y + this.h\n    this.cx = this.x + this.w / 2\n    this.cy = this.y + this.h / 2\n\n    return this\n  }\n\n  isNulled() {\n    return isNulledBox(this)\n  }\n\n  // Merge rect box with another, return a new instance\n  merge(box) {\n    const x = Math.min(this.x, box.x)\n    const y = Math.min(this.y, box.y)\n    const width = Math.max(this.x + this.width, box.x + box.width) - x\n    const height = Math.max(this.y + this.height, box.y + box.height) - y\n\n    return new Box(x, y, width, height)\n  }\n\n  toArray() {\n    return [this.x, this.y, this.width, this.height]\n  }\n\n  toString() {\n    return this.x + ' ' + this.y + ' ' + this.width + ' ' + this.height\n  }\n\n  transform(m) {\n    if (!(m instanceof Matrix)) {\n      m = new Matrix(m)\n    }\n\n    let xMin = Infinity\n    let xMax = -Infinity\n    let yMin = Infinity\n    let yMax = -Infinity\n\n    const pts = [\n      new Point(this.x, this.y),\n      new Point(this.x2, this.y),\n      new Point(this.x, this.y2),\n      new Point(this.x2, this.y2)\n    ]\n\n    pts.forEach(function (p) {\n      p = p.transform(m)\n      xMin = Math.min(xMin, p.x)\n      xMax = Math.max(xMax, p.x)\n      yMin = Math.min(yMin, p.y)\n      yMax = Math.max(yMax, p.y)\n    })\n\n    return new Box(xMin, yMin, xMax - xMin, yMax - yMin)\n  }\n}\n\nfunction getBox(el, getBBoxFn, retry) {\n  let box\n\n  try {\n    // Try to get the box with the provided function\n    box = getBBoxFn(el.node)\n\n    // If the box is worthless and not even in the dom, retry\n    // by throwing an error here...\n    if (isNulledBox(box) && !domContains(el.node)) {\n      throw new Error('Element not in the dom')\n    }\n  } catch (e) {\n    // ... and calling the retry handler here\n    box = retry(el)\n  }\n\n  return box\n}\n\nfunction bbox() {\n  // Function to get bbox is getBBox()\n  const getBBox = (node) => node.getBBox()\n\n  // Take all measures so that a stupid browser renders the element\n  // so we can get the bbox from it when we try again\n  const retry = (el) => {\n    try {\n      const clone = el.clone().addTo(parser().svg).show()\n      const box = clone.node.getBBox()\n      clone.remove()\n      return box\n    } catch (e) {\n      // We give up...\n      throw new Error(\n        `Getting bbox of element \"${\n          el.node.nodeName\n        }\" is not possible: ${e.toString()}`\n      )\n    }\n  }\n\n  const box = getBox(this, getBBox, retry)\n  const bbox = new Box(box)\n\n  return bbox\n}\n\nfunction rbox(el) {\n  const getRBox = (node) => node.getBoundingClientRect()\n  const retry = (el) => {\n    // There is no point in trying tricks here because if we insert the element into the dom ourselves\n    // it obviously will be at the wrong position\n    throw new Error(\n      `Getting rbox of element \"${el.node.nodeName}\" is not possible`\n    )\n  }\n\n  const box = getBox(this, getRBox, retry)\n  const rbox = new Box(box)\n\n  // If an element was passed, we want the bbox in the coordinate system of that element\n  if (el) {\n    return rbox.transform(el.screenCTM().inverseO())\n  }\n\n  // Else we want it in absolute screen coordinates\n  // Therefore we need to add the scrollOffset\n  return rbox.addOffset()\n}\n\n// Checks whether the given point is inside the bounding box\nfunction inside(x, y) {\n  const box = this.bbox()\n\n  return (\n    x > box.x && y > box.y && x < box.x + box.width && y < box.y + box.height\n  )\n}\n\nregisterMethods({\n  viewbox: {\n    viewbox(x, y, width, height) {\n      // act as getter\n      if (x == null) return new Box(this.attr('viewBox'))\n\n      // act as setter\n      return this.attr('viewBox', new Box(x, y, width, height))\n    },\n\n    zoom(level, point) {\n      // Its best to rely on the attributes here and here is why:\n      // clientXYZ: Doesn't work on non-root svgs because they dont have a CSSBox (silly!)\n      // getBoundingClientRect: Doesn't work because Chrome just ignores width and height of nested svgs completely\n      //                        that means, their clientRect is always as big as the content.\n      //                        Furthermore this size is incorrect if the element is further transformed by its parents\n      // computedStyle: Only returns meaningful values if css was used with px. We dont go this route here!\n      // getBBox: returns the bounding box of its content - that doesn't help!\n      let { width, height } = this.attr(['width', 'height'])\n\n      // Width and height is a string when a number with a unit is present which we can't use\n      // So we try clientXYZ\n      if (\n        (!width && !height) ||\n        typeof width === 'string' ||\n        typeof height === 'string'\n      ) {\n        width = this.node.clientWidth\n        height = this.node.clientHeight\n      }\n\n      // Giving up...\n      if (!width || !height) {\n        throw new Error(\n          'Impossible to get absolute width and height. Please provide an absolute width and height attribute on the zooming element'\n        )\n      }\n\n      const v = this.viewbox()\n\n      const zoomX = width / v.width\n      const zoomY = height / v.height\n      const zoom = Math.min(zoomX, zoomY)\n\n      if (level == null) {\n        return zoom\n      }\n\n      let zoomAmount = zoom / level\n\n      // Set the zoomAmount to the highest value which is safe to process and recover from\n      // The * 100 is a bit of wiggle room for the matrix transformation\n      if (zoomAmount === Infinity) zoomAmount = Number.MAX_SAFE_INTEGER / 100\n\n      point =\n        point || new Point(width / 2 / zoomX + v.x, height / 2 / zoomY + v.y)\n\n      const box = new Box(v).transform(\n        new Matrix({ scale: zoomAmount, origin: point })\n      )\n\n      return this.viewbox(box)\n    }\n  }\n})\n\nregister(Box, 'Box')\n\n;// ./node_modules/@svgdotjs/svg.js/src/types/List.js\n\n// import { subClassArray } from './ArrayPolyfill.js'\n\nclass List extends Array {\n  constructor(arr = [], ...args) {\n    super(arr, ...args)\n    if (typeof arr === 'number') return this\n    this.length = 0\n    this.push(...arr)\n  }\n}\n\n/* = subClassArray('List', Array, function (arr = []) {\n  // This catches the case, that native map tries to create an array with new Array(1)\n  if (typeof arr === 'number') return this\n  this.length = 0\n  this.push(...arr)\n}) */\n\n/* harmony default export */ const types_List = (List);\n\nextend([List], {\n  each(fnOrMethodName, ...args) {\n    if (typeof fnOrMethodName === 'function') {\n      return this.map((el, i, arr) => {\n        return fnOrMethodName.call(el, el, i, arr)\n      })\n    } else {\n      return this.map((el) => {\n        return el[fnOrMethodName](...args)\n      })\n    }\n  },\n\n  toArray() {\n    return Array.prototype.concat.apply([], this)\n  }\n})\n\nconst reserved = ['toArray', 'constructor', 'each']\n\nList.extend = function (methods) {\n  methods = methods.reduce((obj, name) => {\n    // Don't overwrite own methods\n    if (reserved.includes(name)) return obj\n\n    // Don't add private methods\n    if (name[0] === '_') return obj\n\n    // Allow access to original Array methods through a prefix\n    if (name in Array.prototype) {\n      obj['$' + name] = Array.prototype[name]\n    }\n\n    // Relay every call to each()\n    obj[name] = function (...attrs) {\n      return this.each(name, ...attrs)\n    }\n    return obj\n  }, {})\n\n  extend([List], methods)\n}\n\n;// ./node_modules/@svgdotjs/svg.js/src/modules/core/selector.js\n\n\n\n\n\nfunction baseFind(query, parent) {\n  return new types_List(\n    map((parent || globals.document).querySelectorAll(query), function (node) {\n      return adopt(node)\n    })\n  )\n}\n\n// Scoped find method\nfunction find(query) {\n  return baseFind(query, this.node)\n}\n\nfunction findOne(query) {\n  return adopt(this.node.querySelector(query))\n}\n\n;// ./node_modules/@svgdotjs/svg.js/src/modules/core/event.js\n\n\n\n\nlet listenerId = 0\nconst windowEvents = {}\n\nfunction getEvents(instance) {\n  let n = instance.getEventHolder()\n\n  // We dont want to save events in global space\n  if (n === globals.window) n = windowEvents\n  if (!n.events) n.events = {}\n  return n.events\n}\n\nfunction getEventTarget(instance) {\n  return instance.getEventTarget()\n}\n\nfunction clearEvents(instance) {\n  let n = instance.getEventHolder()\n  if (n === globals.window) n = windowEvents\n  if (n.events) n.events = {}\n}\n\n// Add event binder in the SVG namespace\nfunction on(node, events, listener, binding, options) {\n  const l = listener.bind(binding || node)\n  const instance = adopter_makeInstance(node)\n  const bag = getEvents(instance)\n  const n = getEventTarget(instance)\n\n  // events can be an array of events or a string of events\n  events = Array.isArray(events) ? events : events.split(delimiter)\n\n  // add id to listener\n  if (!listener._svgjsListenerId) {\n    listener._svgjsListenerId = ++listenerId\n  }\n\n  events.forEach(function (event) {\n    const ev = event.split('.')[0]\n    const ns = event.split('.')[1] || '*'\n\n    // ensure valid object\n    bag[ev] = bag[ev] || {}\n    bag[ev][ns] = bag[ev][ns] || {}\n\n    // reference listener\n    bag[ev][ns][listener._svgjsListenerId] = l\n\n    // add listener\n    n.addEventListener(ev, l, options || false)\n  })\n}\n\n// Add event unbinder in the SVG namespace\nfunction off(node, events, listener, options) {\n  const instance = adopter_makeInstance(node)\n  const bag = getEvents(instance)\n  const n = getEventTarget(instance)\n\n  // listener can be a function or a number\n  if (typeof listener === 'function') {\n    listener = listener._svgjsListenerId\n    if (!listener) return\n  }\n\n  // events can be an array of events or a string or undefined\n  events = Array.isArray(events) ? events : (events || '').split(delimiter)\n\n  events.forEach(function (event) {\n    const ev = event && event.split('.')[0]\n    const ns = event && event.split('.')[1]\n    let namespace, l\n\n    if (listener) {\n      // remove listener reference\n      if (bag[ev] && bag[ev][ns || '*']) {\n        // removeListener\n        n.removeEventListener(\n          ev,\n          bag[ev][ns || '*'][listener],\n          options || false\n        )\n\n        delete bag[ev][ns || '*'][listener]\n      }\n    } else if (ev && ns) {\n      // remove all listeners for a namespaced event\n      if (bag[ev] && bag[ev][ns]) {\n        for (l in bag[ev][ns]) {\n          off(n, [ev, ns].join('.'), l)\n        }\n\n        delete bag[ev][ns]\n      }\n    } else if (ns) {\n      // remove all listeners for a specific namespace\n      for (event in bag) {\n        for (namespace in bag[event]) {\n          if (ns === namespace) {\n            off(n, [event, ns].join('.'))\n          }\n        }\n      }\n    } else if (ev) {\n      // remove all listeners for the event\n      if (bag[ev]) {\n        for (namespace in bag[ev]) {\n          off(n, [ev, namespace].join('.'))\n        }\n\n        delete bag[ev]\n      }\n    } else {\n      // remove all listeners on a given node\n      for (event in bag) {\n        off(n, event)\n      }\n\n      clearEvents(instance)\n    }\n  })\n}\n\nfunction dispatch(node, event, data, options) {\n  const n = getEventTarget(node)\n\n  // Dispatch event\n  if (event instanceof globals.window.Event) {\n    n.dispatchEvent(event)\n  } else {\n    event = new globals.window.CustomEvent(event, {\n      detail: data,\n      cancelable: true,\n      ...options\n    })\n    n.dispatchEvent(event)\n  }\n  return event\n}\n\n;// ./node_modules/@svgdotjs/svg.js/src/types/EventTarget.js\n\n\n\n\nclass EventTarget extends Base {\n  addEventListener() {}\n\n  dispatch(event, data, options) {\n    return dispatch(this, event, data, options)\n  }\n\n  dispatchEvent(event) {\n    const bag = this.getEventHolder().events\n    if (!bag) return true\n\n    const events = bag[event.type]\n\n    for (const i in events) {\n      for (const j in events[i]) {\n        events[i][j](event)\n      }\n    }\n\n    return !event.defaultPrevented\n  }\n\n  // Fire given event\n  fire(event, data, options) {\n    this.dispatch(event, data, options)\n    return this\n  }\n\n  getEventHolder() {\n    return this\n  }\n\n  getEventTarget() {\n    return this\n  }\n\n  // Unbind event from listener\n  off(event, listener, options) {\n    off(this, event, listener, options)\n    return this\n  }\n\n  // Bind given event to listener\n  on(event, listener, binding, options) {\n    on(this, event, listener, binding, options)\n    return this\n  }\n\n  removeEventListener() {}\n}\n\nregister(EventTarget, 'EventTarget')\n\n;// ./node_modules/@svgdotjs/svg.js/src/modules/core/defaults.js\nfunction noop() {}\n\n// Default animation values\nconst timeline = {\n  duration: 400,\n  ease: '>',\n  delay: 0\n}\n\n// Default attribute values\nconst attrs = {\n  // fill and stroke\n  'fill-opacity': 1,\n  'stroke-opacity': 1,\n  'stroke-width': 0,\n  'stroke-linejoin': 'miter',\n  'stroke-linecap': 'butt',\n  fill: '#000000',\n  stroke: '#000000',\n  opacity: 1,\n\n  // position\n  x: 0,\n  y: 0,\n  cx: 0,\n  cy: 0,\n\n  // size\n  width: 0,\n  height: 0,\n\n  // radius\n  r: 0,\n  rx: 0,\n  ry: 0,\n\n  // gradient\n  offset: 0,\n  'stop-opacity': 1,\n  'stop-color': '#000000',\n\n  // text\n  'text-anchor': 'start'\n}\n\n;// ./node_modules/@svgdotjs/svg.js/src/types/SVGArray.js\n\n\nclass SVGArray extends Array {\n  constructor(...args) {\n    super(...args)\n    this.init(...args)\n  }\n\n  clone() {\n    return new this.constructor(this)\n  }\n\n  init(arr) {\n    // This catches the case, that native map tries to create an array with new Array(1)\n    if (typeof arr === 'number') return this\n    this.length = 0\n    this.push(...this.parse(arr))\n    return this\n  }\n\n  // Parse whitespace separated string\n  parse(array = []) {\n    // If already is an array, no need to parse it\n    if (array instanceof Array) return array\n\n    return array.trim().split(delimiter).map(parseFloat)\n  }\n\n  toArray() {\n    return Array.prototype.concat.apply([], this)\n  }\n\n  toSet() {\n    return new Set(this)\n  }\n\n  toString() {\n    return this.join(' ')\n  }\n\n  // Flattens the array if needed\n  valueOf() {\n    const ret = []\n    ret.push(...this)\n    return ret\n  }\n}\n\n;// ./node_modules/@svgdotjs/svg.js/src/types/SVGNumber.js\n\n\n// Module for unit conversions\nclass SVGNumber {\n  // Initialize\n  constructor(...args) {\n    this.init(...args)\n  }\n\n  convert(unit) {\n    return new SVGNumber(this.value, unit)\n  }\n\n  // Divide number\n  divide(number) {\n    number = new SVGNumber(number)\n    return new SVGNumber(this / number, this.unit || number.unit)\n  }\n\n  init(value, unit) {\n    unit = Array.isArray(value) ? value[1] : unit\n    value = Array.isArray(value) ? value[0] : value\n\n    // initialize defaults\n    this.value = 0\n    this.unit = unit || ''\n\n    // parse value\n    if (typeof value === 'number') {\n      // ensure a valid numeric value\n      this.value = isNaN(value)\n        ? 0\n        : !isFinite(value)\n          ? value < 0\n            ? -3.4e38\n            : +3.4e38\n          : value\n    } else if (typeof value === 'string') {\n      unit = value.match(numberAndUnit)\n\n      if (unit) {\n        // make value numeric\n        this.value = parseFloat(unit[1])\n\n        // normalize\n        if (unit[5] === '%') {\n          this.value /= 100\n        } else if (unit[5] === 's') {\n          this.value *= 1000\n        }\n\n        // store unit\n        this.unit = unit[5]\n      }\n    } else {\n      if (value instanceof SVGNumber) {\n        this.value = value.valueOf()\n        this.unit = value.unit\n      }\n    }\n\n    return this\n  }\n\n  // Subtract number\n  minus(number) {\n    number = new SVGNumber(number)\n    return new SVGNumber(this - number, this.unit || number.unit)\n  }\n\n  // Add number\n  plus(number) {\n    number = new SVGNumber(number)\n    return new SVGNumber(this + number, this.unit || number.unit)\n  }\n\n  // Multiply number\n  times(number) {\n    number = new SVGNumber(number)\n    return new SVGNumber(this * number, this.unit || number.unit)\n  }\n\n  toArray() {\n    return [this.value, this.unit]\n  }\n\n  toJSON() {\n    return this.toString()\n  }\n\n  toString() {\n    return (\n      (this.unit === '%'\n        ? ~~(this.value * 1e8) / 1e6\n        : this.unit === 's'\n          ? this.value / 1e3\n          : this.value) + this.unit\n    )\n  }\n\n  valueOf() {\n    return this.value\n  }\n}\n\n;// ./node_modules/@svgdotjs/svg.js/src/modules/core/attr.js\n\n\n\n\n\n\nconst colorAttributes = new Set([\n  'fill',\n  'stroke',\n  'color',\n  'bgcolor',\n  'stop-color',\n  'flood-color',\n  'lighting-color'\n])\n\nconst hooks = []\nfunction registerAttrHook(fn) {\n  hooks.push(fn)\n}\n\n// Set svg element attribute\nfunction attr(attr, val, ns) {\n  // act as full getter\n  if (attr == null) {\n    // get an object of attributes\n    attr = {}\n    val = this.node.attributes\n\n    for (const node of val) {\n      attr[node.nodeName] = isNumber.test(node.nodeValue)\n        ? parseFloat(node.nodeValue)\n        : node.nodeValue\n    }\n\n    return attr\n  } else if (attr instanceof Array) {\n    // loop through array and get all values\n    return attr.reduce((last, curr) => {\n      last[curr] = this.attr(curr)\n      return last\n    }, {})\n  } else if (typeof attr === 'object' && attr.constructor === Object) {\n    // apply every attribute individually if an object is passed\n    for (val in attr) this.attr(val, attr[val])\n  } else if (val === null) {\n    // remove value\n    this.node.removeAttribute(attr)\n  } else if (val == null) {\n    // act as a getter if the first and only argument is not an object\n    val = this.node.getAttribute(attr)\n    return val == null\n      ? attrs[attr]\n      : isNumber.test(val)\n        ? parseFloat(val)\n        : val\n  } else {\n    // Loop through hooks and execute them to convert value\n    val = hooks.reduce((_val, hook) => {\n      return hook(attr, _val, this)\n    }, val)\n\n    // ensure correct numeric values (also accepts NaN and Infinity)\n    if (typeof val === 'number') {\n      val = new SVGNumber(val)\n    } else if (colorAttributes.has(attr) && Color.isColor(val)) {\n      // ensure full hex color\n      val = new Color(val)\n    } else if (val.constructor === Array) {\n      // Check for plain arrays and parse array values\n      val = new SVGArray(val)\n    }\n\n    // if the passed attribute is leading...\n    if (attr === 'leading') {\n      // ... call the leading method instead\n      if (this.leading) {\n        this.leading(val)\n      }\n    } else {\n      // set given attribute on node\n      typeof ns === 'string'\n        ? this.node.setAttributeNS(ns, attr, val.toString())\n        : this.node.setAttribute(attr, val.toString())\n    }\n\n    // rebuild if required\n    if (this.rebuild && (attr === 'font-size' || attr === 'x')) {\n      this.rebuild()\n    }\n  }\n\n  return this\n}\n\n;// ./node_modules/@svgdotjs/svg.js/src/elements/Dom.js\n\n\n\n\n\n\n\n\n\nclass Dom extends EventTarget {\n  constructor(node, attrs) {\n    super()\n    this.node = node\n    this.type = node.nodeName\n\n    if (attrs && node !== attrs) {\n      this.attr(attrs)\n    }\n  }\n\n  // Add given element at a position\n  add(element, i) {\n    element = adopter_makeInstance(element)\n\n    // If non-root svg nodes are added we have to remove their namespaces\n    if (\n      element.removeNamespace &&\n      this.node instanceof globals.window.SVGElement\n    ) {\n      element.removeNamespace()\n    }\n\n    if (i == null) {\n      this.node.appendChild(element.node)\n    } else if (element.node !== this.node.childNodes[i]) {\n      this.node.insertBefore(element.node, this.node.childNodes[i])\n    }\n\n    return this\n  }\n\n  // Add element to given container and return self\n  addTo(parent, i) {\n    return adopter_makeInstance(parent).put(this, i)\n  }\n\n  // Returns all child elements\n  children() {\n    return new types_List(\n      map(this.node.children, function (node) {\n        return adopt(node)\n      })\n    )\n  }\n\n  // Remove all elements in this container\n  clear() {\n    // remove children\n    while (this.node.hasChildNodes()) {\n      this.node.removeChild(this.node.lastChild)\n    }\n\n    return this\n  }\n\n  // Clone element\n  clone(deep = true, assignNewIds = true) {\n    // write dom data to the dom so the clone can pickup the data\n    this.writeDataToDom()\n\n    // clone element\n    let nodeClone = this.node.cloneNode(deep)\n    if (assignNewIds) {\n      // assign new id\n      nodeClone = assignNewId(nodeClone)\n    }\n    return new this.constructor(nodeClone)\n  }\n\n  // Iterates over all children and invokes a given block\n  each(block, deep) {\n    const children = this.children()\n    let i, il\n\n    for (i = 0, il = children.length; i < il; i++) {\n      block.apply(children[i], [i, children])\n\n      if (deep) {\n        children[i].each(block, deep)\n      }\n    }\n\n    return this\n  }\n\n  element(nodeName, attrs) {\n    return this.put(new Dom(create(nodeName), attrs))\n  }\n\n  // Get first child\n  first() {\n    return adopt(this.node.firstChild)\n  }\n\n  // Get a element at the given index\n  get(i) {\n    return adopt(this.node.childNodes[i])\n  }\n\n  getEventHolder() {\n    return this.node\n  }\n\n  getEventTarget() {\n    return this.node\n  }\n\n  // Checks if the given element is a child\n  has(element) {\n    return this.index(element) >= 0\n  }\n\n  html(htmlOrFn, outerHTML) {\n    return this.xml(htmlOrFn, outerHTML, html)\n  }\n\n  // Get / set id\n  id(id) {\n    // generate new id if no id set\n    if (typeof id === 'undefined' && !this.node.id) {\n      this.node.id = eid(this.type)\n    }\n\n    // don't set directly with this.node.id to make `null` work correctly\n    return this.attr('id', id)\n  }\n\n  // Gets index of given element\n  index(element) {\n    return [].slice.call(this.node.childNodes).indexOf(element.node)\n  }\n\n  // Get the last child\n  last() {\n    return adopt(this.node.lastChild)\n  }\n\n  // matches the element vs a css selector\n  matches(selector) {\n    const el = this.node\n    const matcher =\n      el.matches ||\n      el.matchesSelector ||\n      el.msMatchesSelector ||\n      el.mozMatchesSelector ||\n      el.webkitMatchesSelector ||\n      el.oMatchesSelector ||\n      null\n    return matcher && matcher.call(el, selector)\n  }\n\n  // Returns the parent element instance\n  parent(type) {\n    let parent = this\n\n    // check for parent\n    if (!parent.node.parentNode) return null\n\n    // get parent element\n    parent = adopt(parent.node.parentNode)\n\n    if (!type) return parent\n\n    // loop through ancestors if type is given\n    do {\n      if (\n        typeof type === 'string' ? parent.matches(type) : parent instanceof type\n      )\n        return parent\n    } while ((parent = adopt(parent.node.parentNode)))\n\n    return parent\n  }\n\n  // Basically does the same as `add()` but returns the added element instead\n  put(element, i) {\n    element = adopter_makeInstance(element)\n    this.add(element, i)\n    return element\n  }\n\n  // Add element to given container and return container\n  putIn(parent, i) {\n    return adopter_makeInstance(parent).add(this, i)\n  }\n\n  // Remove element\n  remove() {\n    if (this.parent()) {\n      this.parent().removeElement(this)\n    }\n\n    return this\n  }\n\n  // Remove a given child\n  removeElement(element) {\n    this.node.removeChild(element.node)\n\n    return this\n  }\n\n  // Replace this with element\n  replace(element) {\n    element = adopter_makeInstance(element)\n\n    if (this.node.parentNode) {\n      this.node.parentNode.replaceChild(element.node, this.node)\n    }\n\n    return element\n  }\n\n  round(precision = 2, map = null) {\n    const factor = 10 ** precision\n    const attrs = this.attr(map)\n\n    for (const i in attrs) {\n      if (typeof attrs[i] === 'number') {\n        attrs[i] = Math.round(attrs[i] * factor) / factor\n      }\n    }\n\n    this.attr(attrs)\n    return this\n  }\n\n  // Import / Export raw svg\n  svg(svgOrFn, outerSVG) {\n    return this.xml(svgOrFn, outerSVG, svg)\n  }\n\n  // Return id on string conversion\n  toString() {\n    return this.id()\n  }\n\n  words(text) {\n    // This is faster than removing all children and adding a new one\n    this.node.textContent = text\n    return this\n  }\n\n  wrap(node) {\n    const parent = this.parent()\n\n    if (!parent) {\n      return this.addTo(node)\n    }\n\n    const position = parent.index(this)\n    return parent.put(node, position).put(this)\n  }\n\n  // write svgjs data to the dom\n  writeDataToDom() {\n    // dump variables recursively\n    this.each(function () {\n      this.writeDataToDom()\n    })\n\n    return this\n  }\n\n  // Import / Export raw svg\n  xml(xmlOrFn, outerXML, ns) {\n    if (typeof xmlOrFn === 'boolean') {\n      ns = outerXML\n      outerXML = xmlOrFn\n      xmlOrFn = null\n    }\n\n    // act as getter if no svg string is given\n    if (xmlOrFn == null || typeof xmlOrFn === 'function') {\n      // The default for exports is, that the outerNode is included\n      outerXML = outerXML == null ? true : outerXML\n\n      // write svgjs data to the dom\n      this.writeDataToDom()\n      let current = this\n\n      // An export modifier was passed\n      if (xmlOrFn != null) {\n        current = adopt(current.node.cloneNode(true))\n\n        // If the user wants outerHTML we need to process this node, too\n        if (outerXML) {\n          const result = xmlOrFn(current)\n          current = result || current\n\n          // The user does not want this node? Well, then he gets nothing\n          if (result === false) return ''\n        }\n\n        // Deep loop through all children and apply modifier\n        current.each(function () {\n          const result = xmlOrFn(this)\n          const _this = result || this\n\n          // If modifier returns false, discard node\n          if (result === false) {\n            this.remove()\n\n            // If modifier returns new node, use it\n          } else if (result && this !== _this) {\n            this.replace(_this)\n          }\n        }, true)\n      }\n\n      // Return outer or inner content\n      return outerXML ? current.node.outerHTML : current.node.innerHTML\n    }\n\n    // Act as setter if we got a string\n\n    // The default for import is, that the current node is not replaced\n    outerXML = outerXML == null ? false : outerXML\n\n    // Create temporary holder\n    const well = create('wrapper', ns)\n    const fragment = globals.document.createDocumentFragment()\n\n    // Dump raw svg\n    well.innerHTML = xmlOrFn\n\n    // Transplant nodes into the fragment\n    for (let len = well.children.length; len--; ) {\n      fragment.appendChild(well.firstElementChild)\n    }\n\n    const parent = this.parent()\n\n    // Add the whole fragment at once\n    return outerXML ? this.replace(fragment) && parent : this.add(fragment)\n  }\n}\n\nextend(Dom, { attr: attr, find: find, findOne: findOne })\nregister(Dom, 'Dom')\n\n;// ./node_modules/@svgdotjs/svg.js/src/elements/Element.js\n\n\n\n\n\n\n\n\n\n\n\nclass Element extends Dom {\n  constructor(node, attrs) {\n    super(node, attrs)\n\n    // initialize data object\n    this.dom = {}\n\n    // create circular reference\n    this.node.instance = this\n\n    if (node.hasAttribute('data-svgjs') || node.hasAttribute('svgjs:data')) {\n      // pull svgjs data from the dom (getAttributeNS doesn't work in html5)\n      this.setData(\n        JSON.parse(node.getAttribute('data-svgjs')) ??\n          JSON.parse(node.getAttribute('svgjs:data')) ??\n          {}\n      )\n    }\n  }\n\n  // Move element by its center\n  center(x, y) {\n    return this.cx(x).cy(y)\n  }\n\n  // Move by center over x-axis\n  cx(x) {\n    return x == null\n      ? this.x() + this.width() / 2\n      : this.x(x - this.width() / 2)\n  }\n\n  // Move by center over y-axis\n  cy(y) {\n    return y == null\n      ? this.y() + this.height() / 2\n      : this.y(y - this.height() / 2)\n  }\n\n  // Get defs\n  defs() {\n    const root = this.root()\n    return root && root.defs()\n  }\n\n  // Relative move over x and y axes\n  dmove(x, y) {\n    return this.dx(x).dy(y)\n  }\n\n  // Relative move over x axis\n  dx(x = 0) {\n    return this.x(new SVGNumber(x).plus(this.x()))\n  }\n\n  // Relative move over y axis\n  dy(y = 0) {\n    return this.y(new SVGNumber(y).plus(this.y()))\n  }\n\n  getEventHolder() {\n    return this\n  }\n\n  // Set height of element\n  height(height) {\n    return this.attr('height', height)\n  }\n\n  // Move element to given x and y values\n  move(x, y) {\n    return this.x(x).y(y)\n  }\n\n  // return array of all ancestors of given type up to the root svg\n  parents(until = this.root()) {\n    const isSelector = typeof until === 'string'\n    if (!isSelector) {\n      until = adopter_makeInstance(until)\n    }\n    const parents = new types_List()\n    let parent = this\n\n    while (\n      (parent = parent.parent()) &&\n      parent.node !== globals.document &&\n      parent.nodeName !== '#document-fragment'\n    ) {\n      parents.push(parent)\n\n      if (!isSelector && parent.node === until.node) {\n        break\n      }\n      if (isSelector && parent.matches(until)) {\n        break\n      }\n      if (parent.node === this.root().node) {\n        // We worked our way to the root and didn't match `until`\n        return null\n      }\n    }\n\n    return parents\n  }\n\n  // Get referenced element form attribute value\n  reference(attr) {\n    attr = this.attr(attr)\n    if (!attr) return null\n\n    const m = (attr + '').match(reference)\n    return m ? adopter_makeInstance(m[1]) : null\n  }\n\n  // Get parent document\n  root() {\n    const p = this.parent(getClass(root))\n    return p && p.root()\n  }\n\n  // set given data to the elements data property\n  setData(o) {\n    this.dom = o\n    return this\n  }\n\n  // Set element size to given width and height\n  size(width, height) {\n    const p = proportionalSize(this, width, height)\n\n    return this.width(new SVGNumber(p.width)).height(new SVGNumber(p.height))\n  }\n\n  // Set width of element\n  width(width) {\n    return this.attr('width', width)\n  }\n\n  // write svgjs data to the dom\n  writeDataToDom() {\n    writeDataToDom(this, this.dom)\n    return super.writeDataToDom()\n  }\n\n  // Move over x-axis\n  x(x) {\n    return this.attr('x', x)\n  }\n\n  // Move over y-axis\n  y(y) {\n    return this.attr('y', y)\n  }\n}\n\nextend(Element, {\n  bbox: bbox,\n  rbox: rbox,\n  inside: inside,\n  point: point,\n  ctm: ctm,\n  screenCTM: screenCTM\n})\n\nregister(Element, 'Element')\n\n;// ./node_modules/@svgdotjs/svg.js/src/modules/optional/sugar.js\n\n\n\n\n\n\n\n// Define list of available attributes for stroke and fill\nconst sugar = {\n  stroke: [\n    'color',\n    'width',\n    'opacity',\n    'linecap',\n    'linejoin',\n    'miterlimit',\n    'dasharray',\n    'dashoffset'\n  ],\n  fill: ['color', 'opacity', 'rule'],\n  prefix: function (t, a) {\n    return a === 'color' ? t : t + '-' + a\n  }\n}\n\n// Add sugar for fill and stroke\n;['fill', 'stroke'].forEach(function (m) {\n  const extension = {}\n  let i\n\n  extension[m] = function (o) {\n    if (typeof o === 'undefined') {\n      return this.attr(m)\n    }\n    if (\n      typeof o === 'string' ||\n      o instanceof Color ||\n      Color.isRgb(o) ||\n      o instanceof Element\n    ) {\n      this.attr(m, o)\n    } else {\n      // set all attributes from sugar.fill and sugar.stroke list\n      for (i = sugar[m].length - 1; i >= 0; i--) {\n        if (o[sugar[m][i]] != null) {\n          this.attr(sugar.prefix(m, sugar[m][i]), o[sugar[m][i]])\n        }\n      }\n    }\n\n    return this\n  }\n\n  registerMethods(['Element', 'Runner'], extension)\n})\n\nregisterMethods(['Element', 'Runner'], {\n  // Let the user set the matrix directly\n  matrix: function (mat, b, c, d, e, f) {\n    // Act as a getter\n    if (mat == null) {\n      return new Matrix(this)\n    }\n\n    // Act as a setter, the user can pass a matrix or a set of numbers\n    return this.attr('transform', new Matrix(mat, b, c, d, e, f))\n  },\n\n  // Map rotation to transform\n  rotate: function (angle, cx, cy) {\n    return this.transform({ rotate: angle, ox: cx, oy: cy }, true)\n  },\n\n  // Map skew to transform\n  skew: function (x, y, cx, cy) {\n    return arguments.length === 1 || arguments.length === 3\n      ? this.transform({ skew: x, ox: y, oy: cx }, true)\n      : this.transform({ skew: [x, y], ox: cx, oy: cy }, true)\n  },\n\n  shear: function (lam, cx, cy) {\n    return this.transform({ shear: lam, ox: cx, oy: cy }, true)\n  },\n\n  // Map scale to transform\n  scale: function (x, y, cx, cy) {\n    return arguments.length === 1 || arguments.length === 3\n      ? this.transform({ scale: x, ox: y, oy: cx }, true)\n      : this.transform({ scale: [x, y], ox: cx, oy: cy }, true)\n  },\n\n  // Map translate to transform\n  translate: function (x, y) {\n    return this.transform({ translate: [x, y] }, true)\n  },\n\n  // Map relative translations to transform\n  relative: function (x, y) {\n    return this.transform({ relative: [x, y] }, true)\n  },\n\n  // Map flip to transform\n  flip: function (direction = 'both', origin = 'center') {\n    if ('xybothtrue'.indexOf(direction) === -1) {\n      origin = direction\n      direction = 'both'\n    }\n\n    return this.transform({ flip: direction, origin: origin }, true)\n  },\n\n  // Opacity\n  opacity: function (value) {\n    return this.attr('opacity', value)\n  }\n})\n\nregisterMethods('radius', {\n  // Add x and y radius\n  radius: function (x, y = x) {\n    const type = (this._element || this).type\n    return type === 'radialGradient'\n      ? this.attr('r', new SVGNumber(x))\n      : this.rx(x).ry(y)\n  }\n})\n\nregisterMethods('Path', {\n  // Get path length\n  length: function () {\n    return this.node.getTotalLength()\n  },\n  // Get point at length\n  pointAt: function (length) {\n    return new Point(this.node.getPointAtLength(length))\n  }\n})\n\nregisterMethods(['Element', 'Runner'], {\n  // Set font\n  font: function (a, v) {\n    if (typeof a === 'object') {\n      for (v in a) this.font(v, a[v])\n      return this\n    }\n\n    return a === 'leading'\n      ? this.leading(v)\n      : a === 'anchor'\n        ? this.attr('text-anchor', v)\n        : a === 'size' ||\n            a === 'family' ||\n            a === 'weight' ||\n            a === 'stretch' ||\n            a === 'variant' ||\n            a === 'style'\n          ? this.attr('font-' + a, v)\n          : this.attr(a, v)\n  }\n})\n\n// Add events to elements\nconst sugar_methods = [\n  'click',\n  'dblclick',\n  'mousedown',\n  'mouseup',\n  'mouseover',\n  'mouseout',\n  'mousemove',\n  'mouseenter',\n  'mouseleave',\n  'touchstart',\n  'touchmove',\n  'touchleave',\n  'touchend',\n  'touchcancel',\n  'contextmenu',\n  'wheel',\n  'pointerdown',\n  'pointermove',\n  'pointerup',\n  'pointerleave',\n  'pointercancel'\n].reduce(function (last, event) {\n  // add event to Element\n  const fn = function (f) {\n    if (f === null) {\n      this.off(event)\n    } else {\n      this.on(event, f)\n    }\n    return this\n  }\n\n  last[event] = fn\n  return last\n}, {})\n\nregisterMethods('Element', sugar_methods)\n\n;// ./node_modules/@svgdotjs/svg.js/src/modules/optional/transform.js\n\n\n\n\n\n// Reset all transformations\nfunction untransform() {\n  return this.attr('transform', null)\n}\n\n// merge the whole transformation chain into one matrix and returns it\nfunction matrixify() {\n  const matrix = (this.attr('transform') || '')\n    // split transformations\n    .split(transforms)\n    .slice(0, -1)\n    .map(function (str) {\n      // generate key => value pairs\n      const kv = str.trim().split('(')\n      return [\n        kv[0],\n        kv[1].split(delimiter).map(function (str) {\n          return parseFloat(str)\n        })\n      ]\n    })\n    .reverse()\n    // merge every transformation into one matrix\n    .reduce(function (matrix, transform) {\n      if (transform[0] === 'matrix') {\n        return matrix.lmultiply(Matrix.fromArray(transform[1]))\n      }\n      return matrix[transform[0]].apply(matrix, transform[1])\n    }, new Matrix())\n\n  return matrix\n}\n\n// add an element to another parent without changing the visual representation on the screen\nfunction toParent(parent, i) {\n  if (this === parent) return this\n\n  if (isDescriptive(this.node)) return this.addTo(parent, i)\n\n  const ctm = this.screenCTM()\n  const pCtm = parent.screenCTM().inverse()\n\n  this.addTo(parent, i).untransform().transform(pCtm.multiply(ctm))\n\n  return this\n}\n\n// same as above with parent equals root-svg\nfunction toRoot(i) {\n  return this.toParent(this.root(), i)\n}\n\n// Add transformations\nfunction transform(o, relative) {\n  // Act as a getter if no object was passed\n  if (o == null || typeof o === 'string') {\n    const decomposed = new Matrix(this).decompose()\n    return o == null ? decomposed : decomposed[o]\n  }\n\n  if (!Matrix.isMatrixLike(o)) {\n    // Set the origin according to the defined transform\n    o = { ...o, origin: getOrigin(o, this) }\n  }\n\n  // The user can pass a boolean, an Element or an Matrix or nothing\n  const cleanRelative = relative === true ? this : relative || false\n  const result = new Matrix(cleanRelative).transform(o)\n  return this.attr('transform', result)\n}\n\nregisterMethods('Element', {\n  untransform,\n  matrixify,\n  toParent,\n  toRoot,\n  transform\n})\n\n;// ./node_modules/@svgdotjs/svg.js/src/elements/Container.js\n\n\n\nclass Container extends Element {\n  flatten() {\n    this.each(function () {\n      if (this instanceof Container) {\n        return this.flatten().ungroup()\n      }\n    })\n\n    return this\n  }\n\n  ungroup(parent = this.parent(), index = parent.index(this)) {\n    // when parent != this, we want append all elements to the end\n    index = index === -1 ? parent.children().length : index\n\n    this.each(function (i, children) {\n      // reverse each\n      return children[children.length - i - 1].toParent(parent, index)\n    })\n\n    return this.remove()\n  }\n}\n\nregister(Container, 'Container')\n\n;// ./node_modules/@svgdotjs/svg.js/src/elements/Defs.js\n\n\n\nclass Defs extends Container {\n  constructor(node, attrs = node) {\n    super(nodeOrNew('defs', node), attrs)\n  }\n\n  flatten() {\n    return this\n  }\n\n  ungroup() {\n    return this\n  }\n}\n\nregister(Defs, 'Defs')\n\n;// ./node_modules/@svgdotjs/svg.js/src/elements/Shape.js\n\n\n\nclass Shape extends Element {}\n\nregister(Shape, 'Shape')\n\n;// ./node_modules/@svgdotjs/svg.js/src/modules/core/circled.js\n\n\n// Radius x value\nfunction rx(rx) {\n  return this.attr('rx', rx)\n}\n\n// Radius y value\nfunction ry(ry) {\n  return this.attr('ry', ry)\n}\n\n// Move over x-axis\nfunction x(x) {\n  return x == null ? this.cx() - this.rx() : this.cx(x + this.rx())\n}\n\n// Move over y-axis\nfunction y(y) {\n  return y == null ? this.cy() - this.ry() : this.cy(y + this.ry())\n}\n\n// Move by center over x-axis\nfunction cx(x) {\n  return this.attr('cx', x)\n}\n\n// Move by center over y-axis\nfunction cy(y) {\n  return this.attr('cy', y)\n}\n\n// Set width of element\nfunction width(width) {\n  return width == null ? this.rx() * 2 : this.rx(new SVGNumber(width).divide(2))\n}\n\n// Set height of element\nfunction height(height) {\n  return height == null\n    ? this.ry() * 2\n    : this.ry(new SVGNumber(height).divide(2))\n}\n\n;// ./node_modules/@svgdotjs/svg.js/src/elements/Ellipse.js\n\n\n\n\n\n\n\nclass Ellipse extends Shape {\n  constructor(node, attrs = node) {\n    super(nodeOrNew('ellipse', node), attrs)\n  }\n\n  size(width, height) {\n    const p = proportionalSize(this, width, height)\n\n    return this.rx(new SVGNumber(p.width).divide(2)).ry(\n      new SVGNumber(p.height).divide(2)\n    )\n  }\n}\n\nextend(Ellipse, circled_namespaceObject)\n\nregisterMethods('Container', {\n  // Create an ellipse\n  ellipse: wrapWithAttrCheck(function (width = 0, height = width) {\n    return this.put(new Ellipse()).size(width, height).move(0, 0)\n  })\n})\n\nregister(Ellipse, 'Ellipse')\n\n;// ./node_modules/@svgdotjs/svg.js/src/elements/Fragment.js\n\n\n\n\nclass Fragment extends Dom {\n  constructor(node = globals.document.createDocumentFragment()) {\n    super(node)\n  }\n\n  // Import / Export raw xml\n  xml(xmlOrFn, outerXML, ns) {\n    if (typeof xmlOrFn === 'boolean') {\n      ns = outerXML\n      outerXML = xmlOrFn\n      xmlOrFn = null\n    }\n\n    // because this is a fragment we have to put all elements into a wrapper first\n    // before we can get the innerXML from it\n    if (xmlOrFn == null || typeof xmlOrFn === 'function') {\n      const wrapper = new Dom(create('wrapper', ns))\n      wrapper.add(this.node.cloneNode(true))\n\n      return wrapper.xml(false, ns)\n    }\n\n    // Act as setter if we got a string\n    return super.xml(xmlOrFn, false, ns)\n  }\n}\n\nregister(Fragment, 'Fragment')\n\n/* harmony default export */ const elements_Fragment = (Fragment);\n\n;// ./node_modules/@svgdotjs/svg.js/src/modules/core/gradiented.js\n\n\nfunction from(x, y) {\n  return (this._element || this).type === 'radialGradient'\n    ? this.attr({ fx: new SVGNumber(x), fy: new SVGNumber(y) })\n    : this.attr({ x1: new SVGNumber(x), y1: new SVGNumber(y) })\n}\n\nfunction to(x, y) {\n  return (this._element || this).type === 'radialGradient'\n    ? this.attr({ cx: new SVGNumber(x), cy: new SVGNumber(y) })\n    : this.attr({ x2: new SVGNumber(x), y2: new SVGNumber(y) })\n}\n\n;// ./node_modules/@svgdotjs/svg.js/src/elements/Gradient.js\n\n\n\n\n\n\n\nclass Gradient extends Container {\n  constructor(type, attrs) {\n    super(\n      nodeOrNew(type + 'Gradient', typeof type === 'string' ? null : type),\n      attrs\n    )\n  }\n\n  // custom attr to handle transform\n  attr(a, b, c) {\n    if (a === 'transform') a = 'gradientTransform'\n    return super.attr(a, b, c)\n  }\n\n  bbox() {\n    return new Box()\n  }\n\n  targets() {\n    return baseFind('svg [fill*=' + this.id() + ']')\n  }\n\n  // Alias string conversion to fill\n  toString() {\n    return this.url()\n  }\n\n  // Update gradient\n  update(block) {\n    // remove all stops\n    this.clear()\n\n    // invoke passed block\n    if (typeof block === 'function') {\n      block.call(this, this)\n    }\n\n    return this\n  }\n\n  // Return the fill id\n  url() {\n    return 'url(#' + this.id() + ')'\n  }\n}\n\nextend(Gradient, gradiented_namespaceObject)\n\nregisterMethods({\n  Container: {\n    // Create gradient element in defs\n    gradient(...args) {\n      return this.defs().gradient(...args)\n    }\n  },\n  // define gradient\n  Defs: {\n    gradient: wrapWithAttrCheck(function (type, block) {\n      return this.put(new Gradient(type)).update(block)\n    })\n  }\n})\n\nregister(Gradient, 'Gradient')\n\n;// ./node_modules/@svgdotjs/svg.js/src/elements/Pattern.js\n\n\n\n\n\n\nclass Pattern extends Container {\n  // Initialize node\n  constructor(node, attrs = node) {\n    super(nodeOrNew('pattern', node), attrs)\n  }\n\n  // custom attr to handle transform\n  attr(a, b, c) {\n    if (a === 'transform') a = 'patternTransform'\n    return super.attr(a, b, c)\n  }\n\n  bbox() {\n    return new Box()\n  }\n\n  targets() {\n    return baseFind('svg [fill*=' + this.id() + ']')\n  }\n\n  // Alias string conversion to fill\n  toString() {\n    return this.url()\n  }\n\n  // Update pattern by rebuilding\n  update(block) {\n    // remove content\n    this.clear()\n\n    // invoke passed block\n    if (typeof block === 'function') {\n      block.call(this, this)\n    }\n\n    return this\n  }\n\n  // Return the fill id\n  url() {\n    return 'url(#' + this.id() + ')'\n  }\n}\n\nregisterMethods({\n  Container: {\n    // Create pattern element in defs\n    pattern(...args) {\n      return this.defs().pattern(...args)\n    }\n  },\n  Defs: {\n    pattern: wrapWithAttrCheck(function (width, height, block) {\n      return this.put(new Pattern()).update(block).attr({\n        x: 0,\n        y: 0,\n        width: width,\n        height: height,\n        patternUnits: 'userSpaceOnUse'\n      })\n    })\n  }\n})\n\nregister(Pattern, 'Pattern')\n\n;// ./node_modules/@svgdotjs/svg.js/src/elements/Image.js\n\n\n\n\n\n\n\n\n\n\nclass Image extends Shape {\n  constructor(node, attrs = node) {\n    super(nodeOrNew('image', node), attrs)\n  }\n\n  // (re)load image\n  load(url, callback) {\n    if (!url) return this\n\n    const img = new globals.window.Image()\n\n    on(\n      img,\n      'load',\n      function (e) {\n        const p = this.parent(Pattern)\n\n        // ensure image size\n        if (this.width() === 0 && this.height() === 0) {\n          this.size(img.width, img.height)\n        }\n\n        if (p instanceof Pattern) {\n          // ensure pattern size if not set\n          if (p.width() === 0 && p.height() === 0) {\n            p.size(this.width(), this.height())\n          }\n        }\n\n        if (typeof callback === 'function') {\n          callback.call(this, e)\n        }\n      },\n      this\n    )\n\n    on(img, 'load error', function () {\n      // dont forget to unbind memory leaking events\n      off(img)\n    })\n\n    return this.attr('href', (img.src = url), xlink)\n  }\n}\n\nregisterAttrHook(function (attr, val, _this) {\n  // convert image fill and stroke to patterns\n  if (attr === 'fill' || attr === 'stroke') {\n    if (isImage.test(val)) {\n      val = _this.root().defs().image(val)\n    }\n  }\n\n  if (val instanceof Image) {\n    val = _this\n      .root()\n      .defs()\n      .pattern(0, 0, (pattern) => {\n        pattern.add(val)\n      })\n  }\n\n  return val\n})\n\nregisterMethods({\n  Container: {\n    // create image element, load image and set its size\n    image: wrapWithAttrCheck(function (source, callback) {\n      return this.put(new Image()).size(0, 0).load(source, callback)\n    })\n  }\n})\n\nregister(Image, 'Image')\n\n;// ./node_modules/@svgdotjs/svg.js/src/types/PointArray.js\n\n\n\n\n\nclass PointArray extends SVGArray {\n  // Get bounding box of points\n  bbox() {\n    let maxX = -Infinity\n    let maxY = -Infinity\n    let minX = Infinity\n    let minY = Infinity\n    this.forEach(function (el) {\n      maxX = Math.max(el[0], maxX)\n      maxY = Math.max(el[1], maxY)\n      minX = Math.min(el[0], minX)\n      minY = Math.min(el[1], minY)\n    })\n    return new Box(minX, minY, maxX - minX, maxY - minY)\n  }\n\n  // Move point string\n  move(x, y) {\n    const box = this.bbox()\n\n    // get relative offset\n    x -= box.x\n    y -= box.y\n\n    // move every point\n    if (!isNaN(x) && !isNaN(y)) {\n      for (let i = this.length - 1; i >= 0; i--) {\n        this[i] = [this[i][0] + x, this[i][1] + y]\n      }\n    }\n\n    return this\n  }\n\n  // Parse point string and flat array\n  parse(array = [0, 0]) {\n    const points = []\n\n    // if it is an array, we flatten it and therefore clone it to 1 depths\n    if (array instanceof Array) {\n      array = Array.prototype.concat.apply([], array)\n    } else {\n      // Else, it is considered as a string\n      // parse points\n      array = array.trim().split(delimiter).map(parseFloat)\n    }\n\n    // validate points - https://svgwg.org/svg2-draft/shapes.html#DataTypePoints\n    // Odd number of coordinates is an error. In such cases, drop the last odd coordinate.\n    if (array.length % 2 !== 0) array.pop()\n\n    // wrap points in two-tuples\n    for (let i = 0, len = array.length; i < len; i = i + 2) {\n      points.push([array[i], array[i + 1]])\n    }\n\n    return points\n  }\n\n  // Resize poly string\n  size(width, height) {\n    let i\n    const box = this.bbox()\n\n    // recalculate position of all points according to new size\n    for (i = this.length - 1; i >= 0; i--) {\n      if (box.width)\n        this[i][0] = ((this[i][0] - box.x) * width) / box.width + box.x\n      if (box.height)\n        this[i][1] = ((this[i][1] - box.y) * height) / box.height + box.y\n    }\n\n    return this\n  }\n\n  // Convert array to line object\n  toLine() {\n    return {\n      x1: this[0][0],\n      y1: this[0][1],\n      x2: this[1][0],\n      y2: this[1][1]\n    }\n  }\n\n  // Convert array to string\n  toString() {\n    const array = []\n    // convert to a poly point string\n    for (let i = 0, il = this.length; i < il; i++) {\n      array.push(this[i].join(','))\n    }\n\n    return array.join(' ')\n  }\n\n  transform(m) {\n    return this.clone().transformO(m)\n  }\n\n  // transform points with matrix (similar to Point.transform)\n  transformO(m) {\n    if (!Matrix.isMatrixLike(m)) {\n      m = new Matrix(m)\n    }\n\n    for (let i = this.length; i--; ) {\n      // Perform the matrix multiplication\n      const [x, y] = this[i]\n      this[i][0] = m.a * x + m.c * y + m.e\n      this[i][1] = m.b * x + m.d * y + m.f\n    }\n\n    return this\n  }\n}\n\n;// ./node_modules/@svgdotjs/svg.js/src/modules/core/pointed.js\n\n\nconst MorphArray = PointArray\n\n// Move by left top corner over x-axis\nfunction pointed_x(x) {\n  return x == null ? this.bbox().x : this.move(x, this.bbox().y)\n}\n\n// Move by left top corner over y-axis\nfunction pointed_y(y) {\n  return y == null ? this.bbox().y : this.move(this.bbox().x, y)\n}\n\n// Set width of element\nfunction pointed_width(width) {\n  const b = this.bbox()\n  return width == null ? b.width : this.size(width, b.height)\n}\n\n// Set height of element\nfunction pointed_height(height) {\n  const b = this.bbox()\n  return height == null ? b.height : this.size(b.width, height)\n}\n\n;// ./node_modules/@svgdotjs/svg.js/src/elements/Line.js\n\n\n\n\n\n\n\nclass Line extends Shape {\n  // Initialize node\n  constructor(node, attrs = node) {\n    super(nodeOrNew('line', node), attrs)\n  }\n\n  // Get array\n  array() {\n    return new PointArray([\n      [this.attr('x1'), this.attr('y1')],\n      [this.attr('x2'), this.attr('y2')]\n    ])\n  }\n\n  // Move by left top corner\n  move(x, y) {\n    return this.attr(this.array().move(x, y).toLine())\n  }\n\n  // Overwrite native plot() method\n  plot(x1, y1, x2, y2) {\n    if (x1 == null) {\n      return this.array()\n    } else if (typeof y1 !== 'undefined') {\n      x1 = { x1, y1, x2, y2 }\n    } else {\n      x1 = new PointArray(x1).toLine()\n    }\n\n    return this.attr(x1)\n  }\n\n  // Set element size to given width and height\n  size(width, height) {\n    const p = proportionalSize(this, width, height)\n    return this.attr(this.array().size(p.width, p.height).toLine())\n  }\n}\n\nextend(Line, pointed_namespaceObject)\n\nregisterMethods({\n  Container: {\n    // Create a line element\n    line: wrapWithAttrCheck(function (...args) {\n      // make sure plot is called as a setter\n      // x1 is not necessarily a number, it can also be an array, a string and a PointArray\n      return Line.prototype.plot.apply(\n        this.put(new Line()),\n        args[0] != null ? args : [0, 0, 0, 0]\n      )\n    })\n  }\n})\n\nregister(Line, 'Line')\n\n;// ./node_modules/@svgdotjs/svg.js/src/elements/Marker.js\n\n\n\n\nclass Marker extends Container {\n  // Initialize node\n  constructor(node, attrs = node) {\n    super(nodeOrNew('marker', node), attrs)\n  }\n\n  // Set height of element\n  height(height) {\n    return this.attr('markerHeight', height)\n  }\n\n  orient(orient) {\n    return this.attr('orient', orient)\n  }\n\n  // Set marker refX and refY\n  ref(x, y) {\n    return this.attr('refX', x).attr('refY', y)\n  }\n\n  // Return the fill id\n  toString() {\n    return 'url(#' + this.id() + ')'\n  }\n\n  // Update marker\n  update(block) {\n    // remove all content\n    this.clear()\n\n    // invoke passed block\n    if (typeof block === 'function') {\n      block.call(this, this)\n    }\n\n    return this\n  }\n\n  // Set width of element\n  width(width) {\n    return this.attr('markerWidth', width)\n  }\n}\n\nregisterMethods({\n  Container: {\n    marker(...args) {\n      // Create marker element in defs\n      return this.defs().marker(...args)\n    }\n  },\n  Defs: {\n    // Create marker\n    marker: wrapWithAttrCheck(function (width, height, block) {\n      // Set default viewbox to match the width and height, set ref to cx and cy and set orient to auto\n      return this.put(new Marker())\n        .size(width, height)\n        .ref(width / 2, height / 2)\n        .viewbox(0, 0, width, height)\n        .attr('orient', 'auto')\n        .update(block)\n    })\n  },\n  marker: {\n    // Create and attach markers\n    marker(marker, width, height, block) {\n      let attr = ['marker']\n\n      // Build attribute name\n      if (marker !== 'all') attr.push(marker)\n      attr = attr.join('-')\n\n      // Set marker attribute\n      marker =\n        arguments[1] instanceof Marker\n          ? arguments[1]\n          : this.defs().marker(width, height, block)\n\n      return this.attr(attr, marker)\n    }\n  }\n})\n\nregister(Marker, 'Marker')\n\n;// ./node_modules/@svgdotjs/svg.js/src/animation/Controller.js\n\n\n\n/***\nBase Class\n==========\nThe base stepper class that will be\n***/\n\nfunction makeSetterGetter(k, f) {\n  return function (v) {\n    if (v == null) return this[k]\n    this[k] = v\n    if (f) f.call(this)\n    return this\n  }\n}\n\nconst easing = {\n  '-': function (pos) {\n    return pos\n  },\n  '<>': function (pos) {\n    return -Math.cos(pos * Math.PI) / 2 + 0.5\n  },\n  '>': function (pos) {\n    return Math.sin((pos * Math.PI) / 2)\n  },\n  '<': function (pos) {\n    return -Math.cos((pos * Math.PI) / 2) + 1\n  },\n  bezier: function (x1, y1, x2, y2) {\n    // see https://www.w3.org/TR/css-easing-1/#cubic-bezier-algo\n    return function (t) {\n      if (t < 0) {\n        if (x1 > 0) {\n          return (y1 / x1) * t\n        } else if (x2 > 0) {\n          return (y2 / x2) * t\n        } else {\n          return 0\n        }\n      } else if (t > 1) {\n        if (x2 < 1) {\n          return ((1 - y2) / (1 - x2)) * t + (y2 - x2) / (1 - x2)\n        } else if (x1 < 1) {\n          return ((1 - y1) / (1 - x1)) * t + (y1 - x1) / (1 - x1)\n        } else {\n          return 1\n        }\n      } else {\n        return 3 * t * (1 - t) ** 2 * y1 + 3 * t ** 2 * (1 - t) * y2 + t ** 3\n      }\n    }\n  },\n  // see https://www.w3.org/TR/css-easing-1/#step-timing-function-algo\n  steps: function (steps, stepPosition = 'end') {\n    // deal with \"jump-\" prefix\n    stepPosition = stepPosition.split('-').reverse()[0]\n\n    let jumps = steps\n    if (stepPosition === 'none') {\n      --jumps\n    } else if (stepPosition === 'both') {\n      ++jumps\n    }\n\n    // The beforeFlag is essentially useless\n    return (t, beforeFlag = false) => {\n      // Step is called currentStep in referenced url\n      let step = Math.floor(t * steps)\n      const jumping = (t * step) % 1 === 0\n\n      if (stepPosition === 'start' || stepPosition === 'both') {\n        ++step\n      }\n\n      if (beforeFlag && jumping) {\n        --step\n      }\n\n      if (t >= 0 && step < 0) {\n        step = 0\n      }\n\n      if (t <= 1 && step > jumps) {\n        step = jumps\n      }\n\n      return step / jumps\n    }\n  }\n}\n\nclass Stepper {\n  done() {\n    return false\n  }\n}\n\n/***\nEasing Functions\n================\n***/\n\nclass Ease extends Stepper {\n  constructor(fn = timeline.ease) {\n    super()\n    this.ease = easing[fn] || fn\n  }\n\n  step(from, to, pos) {\n    if (typeof from !== 'number') {\n      return pos < 1 ? from : to\n    }\n    return from + (to - from) * this.ease(pos)\n  }\n}\n\n/***\nController Types\n================\n***/\n\nclass Controller extends Stepper {\n  constructor(fn) {\n    super()\n    this.stepper = fn\n  }\n\n  done(c) {\n    return c.done\n  }\n\n  step(current, target, dt, c) {\n    return this.stepper(current, target, dt, c)\n  }\n}\n\nfunction recalculate() {\n  // Apply the default parameters\n  const duration = (this._duration || 500) / 1000\n  const overshoot = this._overshoot || 0\n\n  // Calculate the PID natural response\n  const eps = 1e-10\n  const pi = Math.PI\n  const os = Math.log(overshoot / 100 + eps)\n  const zeta = -os / Math.sqrt(pi * pi + os * os)\n  const wn = 3.9 / (zeta * duration)\n\n  // Calculate the Spring values\n  this.d = 2 * zeta * wn\n  this.k = wn * wn\n}\n\nclass Spring extends Controller {\n  constructor(duration = 500, overshoot = 0) {\n    super()\n    this.duration(duration).overshoot(overshoot)\n  }\n\n  step(current, target, dt, c) {\n    if (typeof current === 'string') return current\n    c.done = dt === Infinity\n    if (dt === Infinity) return target\n    if (dt === 0) return current\n\n    if (dt > 100) dt = 16\n\n    dt /= 1000\n\n    // Get the previous velocity\n    const velocity = c.velocity || 0\n\n    // Apply the control to get the new position and store it\n    const acceleration = -this.d * velocity - this.k * (current - target)\n    const newPosition = current + velocity * dt + (acceleration * dt * dt) / 2\n\n    // Store the velocity\n    c.velocity = velocity + acceleration * dt\n\n    // Figure out if we have converged, and if so, pass the value\n    c.done = Math.abs(target - newPosition) + Math.abs(velocity) < 0.002\n    return c.done ? target : newPosition\n  }\n}\n\nextend(Spring, {\n  duration: makeSetterGetter('_duration', recalculate),\n  overshoot: makeSetterGetter('_overshoot', recalculate)\n})\n\nclass PID extends Controller {\n  constructor(p = 0.1, i = 0.01, d = 0, windup = 1000) {\n    super()\n    this.p(p).i(i).d(d).windup(windup)\n  }\n\n  step(current, target, dt, c) {\n    if (typeof current === 'string') return current\n    c.done = dt === Infinity\n\n    if (dt === Infinity) return target\n    if (dt === 0) return current\n\n    const p = target - current\n    let i = (c.integral || 0) + p * dt\n    const d = (p - (c.error || 0)) / dt\n    const windup = this._windup\n\n    // antiwindup\n    if (windup !== false) {\n      i = Math.max(-windup, Math.min(i, windup))\n    }\n\n    c.error = p\n    c.integral = i\n\n    c.done = Math.abs(p) < 0.001\n\n    return c.done ? target : current + (this.P * p + this.I * i + this.D * d)\n  }\n}\n\nextend(PID, {\n  windup: makeSetterGetter('_windup'),\n  p: makeSetterGetter('P'),\n  i: makeSetterGetter('I'),\n  d: makeSetterGetter('D')\n})\n\n;// ./node_modules/@svgdotjs/svg.js/src/utils/pathParser.js\n\n\n\nconst segmentParameters = {\n  M: 2,\n  L: 2,\n  H: 1,\n  V: 1,\n  C: 6,\n  S: 4,\n  Q: 4,\n  T: 2,\n  A: 7,\n  Z: 0\n}\n\nconst pathHandlers = {\n  M: function (c, p, p0) {\n    p.x = p0.x = c[0]\n    p.y = p0.y = c[1]\n\n    return ['M', p.x, p.y]\n  },\n  L: function (c, p) {\n    p.x = c[0]\n    p.y = c[1]\n    return ['L', c[0], c[1]]\n  },\n  H: function (c, p) {\n    p.x = c[0]\n    return ['H', c[0]]\n  },\n  V: function (c, p) {\n    p.y = c[0]\n    return ['V', c[0]]\n  },\n  C: function (c, p) {\n    p.x = c[4]\n    p.y = c[5]\n    return ['C', c[0], c[1], c[2], c[3], c[4], c[5]]\n  },\n  S: function (c, p) {\n    p.x = c[2]\n    p.y = c[3]\n    return ['S', c[0], c[1], c[2], c[3]]\n  },\n  Q: function (c, p) {\n    p.x = c[2]\n    p.y = c[3]\n    return ['Q', c[0], c[1], c[2], c[3]]\n  },\n  T: function (c, p) {\n    p.x = c[0]\n    p.y = c[1]\n    return ['T', c[0], c[1]]\n  },\n  Z: function (c, p, p0) {\n    p.x = p0.x\n    p.y = p0.y\n    return ['Z']\n  },\n  A: function (c, p) {\n    p.x = c[5]\n    p.y = c[6]\n    return ['A', c[0], c[1], c[2], c[3], c[4], c[5], c[6]]\n  }\n}\n\nconst mlhvqtcsaz = 'mlhvqtcsaz'.split('')\n\nfor (let i = 0, il = mlhvqtcsaz.length; i < il; ++i) {\n  pathHandlers[mlhvqtcsaz[i]] = (function (i) {\n    return function (c, p, p0) {\n      if (i === 'H') c[0] = c[0] + p.x\n      else if (i === 'V') c[0] = c[0] + p.y\n      else if (i === 'A') {\n        c[5] = c[5] + p.x\n        c[6] = c[6] + p.y\n      } else {\n        for (let j = 0, jl = c.length; j < jl; ++j) {\n          c[j] = c[j] + (j % 2 ? p.y : p.x)\n        }\n      }\n\n      return pathHandlers[i](c, p, p0)\n    }\n  })(mlhvqtcsaz[i].toUpperCase())\n}\n\nfunction makeAbsolut(parser) {\n  const command = parser.segment[0]\n  return pathHandlers[command](parser.segment.slice(1), parser.p, parser.p0)\n}\n\nfunction segmentComplete(parser) {\n  return (\n    parser.segment.length &&\n    parser.segment.length - 1 ===\n      segmentParameters[parser.segment[0].toUpperCase()]\n  )\n}\n\nfunction startNewSegment(parser, token) {\n  parser.inNumber && finalizeNumber(parser, false)\n  const pathLetter = isPathLetter.test(token)\n\n  if (pathLetter) {\n    parser.segment = [token]\n  } else {\n    const lastCommand = parser.lastCommand\n    const small = lastCommand.toLowerCase()\n    const isSmall = lastCommand === small\n    parser.segment = [small === 'm' ? (isSmall ? 'l' : 'L') : lastCommand]\n  }\n\n  parser.inSegment = true\n  parser.lastCommand = parser.segment[0]\n\n  return pathLetter\n}\n\nfunction finalizeNumber(parser, inNumber) {\n  if (!parser.inNumber) throw new Error('Parser Error')\n  parser.number && parser.segment.push(parseFloat(parser.number))\n  parser.inNumber = inNumber\n  parser.number = ''\n  parser.pointSeen = false\n  parser.hasExponent = false\n\n  if (segmentComplete(parser)) {\n    finalizeSegment(parser)\n  }\n}\n\nfunction finalizeSegment(parser) {\n  parser.inSegment = false\n  if (parser.absolute) {\n    parser.segment = makeAbsolut(parser)\n  }\n  parser.segments.push(parser.segment)\n}\n\nfunction isArcFlag(parser) {\n  if (!parser.segment.length) return false\n  const isArc = parser.segment[0].toUpperCase() === 'A'\n  const length = parser.segment.length\n\n  return isArc && (length === 4 || length === 5)\n}\n\nfunction isExponential(parser) {\n  return parser.lastToken.toUpperCase() === 'E'\n}\n\nconst pathDelimiters = new Set([' ', ',', '\\t', '\\n', '\\r', '\\f'])\nfunction pathParser(d, toAbsolute = true) {\n  let index = 0\n  let token = ''\n  const parser = {\n    segment: [],\n    inNumber: false,\n    number: '',\n    lastToken: '',\n    inSegment: false,\n    segments: [],\n    pointSeen: false,\n    hasExponent: false,\n    absolute: toAbsolute,\n    p0: new Point(),\n    p: new Point()\n  }\n\n  while (((parser.lastToken = token), (token = d.charAt(index++)))) {\n    if (!parser.inSegment) {\n      if (startNewSegment(parser, token)) {\n        continue\n      }\n    }\n\n    if (token === '.') {\n      if (parser.pointSeen || parser.hasExponent) {\n        finalizeNumber(parser, false)\n        --index\n        continue\n      }\n      parser.inNumber = true\n      parser.pointSeen = true\n      parser.number += token\n      continue\n    }\n\n    if (!isNaN(parseInt(token))) {\n      if (parser.number === '0' || isArcFlag(parser)) {\n        parser.inNumber = true\n        parser.number = token\n        finalizeNumber(parser, true)\n        continue\n      }\n\n      parser.inNumber = true\n      parser.number += token\n      continue\n    }\n\n    if (pathDelimiters.has(token)) {\n      if (parser.inNumber) {\n        finalizeNumber(parser, false)\n      }\n      continue\n    }\n\n    if (token === '-' || token === '+') {\n      if (parser.inNumber && !isExponential(parser)) {\n        finalizeNumber(parser, false)\n        --index\n        continue\n      }\n      parser.number += token\n      parser.inNumber = true\n      continue\n    }\n\n    if (token.toUpperCase() === 'E') {\n      parser.number += token\n      parser.hasExponent = true\n      continue\n    }\n\n    if (isPathLetter.test(token)) {\n      if (parser.inNumber) {\n        finalizeNumber(parser, false)\n      } else if (!segmentComplete(parser)) {\n        throw new Error('parser Error')\n      } else {\n        finalizeSegment(parser)\n      }\n      --index\n    }\n  }\n\n  if (parser.inNumber) {\n    finalizeNumber(parser, false)\n  }\n\n  if (parser.inSegment && segmentComplete(parser)) {\n    finalizeSegment(parser)\n  }\n\n  return parser.segments\n}\n\n;// ./node_modules/@svgdotjs/svg.js/src/types/PathArray.js\n\n\n\n\n\nfunction arrayToString(a) {\n  let s = ''\n  for (let i = 0, il = a.length; i < il; i++) {\n    s += a[i][0]\n\n    if (a[i][1] != null) {\n      s += a[i][1]\n\n      if (a[i][2] != null) {\n        s += ' '\n        s += a[i][2]\n\n        if (a[i][3] != null) {\n          s += ' '\n          s += a[i][3]\n          s += ' '\n          s += a[i][4]\n\n          if (a[i][5] != null) {\n            s += ' '\n            s += a[i][5]\n            s += ' '\n            s += a[i][6]\n\n            if (a[i][7] != null) {\n              s += ' '\n              s += a[i][7]\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return s + ' '\n}\n\nclass PathArray extends SVGArray {\n  // Get bounding box of path\n  bbox() {\n    parser().path.setAttribute('d', this.toString())\n    return new Box(parser.nodes.path.getBBox())\n  }\n\n  // Move path string\n  move(x, y) {\n    // get bounding box of current situation\n    const box = this.bbox()\n\n    // get relative offset\n    x -= box.x\n    y -= box.y\n\n    if (!isNaN(x) && !isNaN(y)) {\n      // move every point\n      for (let l, i = this.length - 1; i >= 0; i--) {\n        l = this[i][0]\n\n        if (l === 'M' || l === 'L' || l === 'T') {\n          this[i][1] += x\n          this[i][2] += y\n        } else if (l === 'H') {\n          this[i][1] += x\n        } else if (l === 'V') {\n          this[i][1] += y\n        } else if (l === 'C' || l === 'S' || l === 'Q') {\n          this[i][1] += x\n          this[i][2] += y\n          this[i][3] += x\n          this[i][4] += y\n\n          if (l === 'C') {\n            this[i][5] += x\n            this[i][6] += y\n          }\n        } else if (l === 'A') {\n          this[i][6] += x\n          this[i][7] += y\n        }\n      }\n    }\n\n    return this\n  }\n\n  // Absolutize and parse path to array\n  parse(d = 'M0 0') {\n    if (Array.isArray(d)) {\n      d = Array.prototype.concat.apply([], d).toString()\n    }\n\n    return pathParser(d)\n  }\n\n  // Resize path string\n  size(width, height) {\n    // get bounding box of current situation\n    const box = this.bbox()\n    let i, l\n\n    // If the box width or height is 0 then we ignore\n    // transformations on the respective axis\n    box.width = box.width === 0 ? 1 : box.width\n    box.height = box.height === 0 ? 1 : box.height\n\n    // recalculate position of all points according to new size\n    for (i = this.length - 1; i >= 0; i--) {\n      l = this[i][0]\n\n      if (l === 'M' || l === 'L' || l === 'T') {\n        this[i][1] = ((this[i][1] - box.x) * width) / box.width + box.x\n        this[i][2] = ((this[i][2] - box.y) * height) / box.height + box.y\n      } else if (l === 'H') {\n        this[i][1] = ((this[i][1] - box.x) * width) / box.width + box.x\n      } else if (l === 'V') {\n        this[i][1] = ((this[i][1] - box.y) * height) / box.height + box.y\n      } else if (l === 'C' || l === 'S' || l === 'Q') {\n        this[i][1] = ((this[i][1] - box.x) * width) / box.width + box.x\n        this[i][2] = ((this[i][2] - box.y) * height) / box.height + box.y\n        this[i][3] = ((this[i][3] - box.x) * width) / box.width + box.x\n        this[i][4] = ((this[i][4] - box.y) * height) / box.height + box.y\n\n        if (l === 'C') {\n          this[i][5] = ((this[i][5] - box.x) * width) / box.width + box.x\n          this[i][6] = ((this[i][6] - box.y) * height) / box.height + box.y\n        }\n      } else if (l === 'A') {\n        // resize radii\n        this[i][1] = (this[i][1] * width) / box.width\n        this[i][2] = (this[i][2] * height) / box.height\n\n        // move position values\n        this[i][6] = ((this[i][6] - box.x) * width) / box.width + box.x\n        this[i][7] = ((this[i][7] - box.y) * height) / box.height + box.y\n      }\n    }\n\n    return this\n  }\n\n  // Convert array to string\n  toString() {\n    return arrayToString(this)\n  }\n}\n\n;// ./node_modules/@svgdotjs/svg.js/src/animation/Morphable.js\n\n\n\n\n\n\n\n\nconst getClassForType = (value) => {\n  const type = typeof value\n\n  if (type === 'number') {\n    return SVGNumber\n  } else if (type === 'string') {\n    if (Color.isColor(value)) {\n      return Color\n    } else if (delimiter.test(value)) {\n      return isPathLetter.test(value) ? PathArray : SVGArray\n    } else if (numberAndUnit.test(value)) {\n      return SVGNumber\n    } else {\n      return NonMorphable\n    }\n  } else if (morphableTypes.indexOf(value.constructor) > -1) {\n    return value.constructor\n  } else if (Array.isArray(value)) {\n    return SVGArray\n  } else if (type === 'object') {\n    return ObjectBag\n  } else {\n    return NonMorphable\n  }\n}\n\nclass Morphable {\n  constructor(stepper) {\n    this._stepper = stepper || new Ease('-')\n\n    this._from = null\n    this._to = null\n    this._type = null\n    this._context = null\n    this._morphObj = null\n  }\n\n  at(pos) {\n    return this._morphObj.morph(\n      this._from,\n      this._to,\n      pos,\n      this._stepper,\n      this._context\n    )\n  }\n\n  done() {\n    const complete = this._context.map(this._stepper.done).reduce(function (\n      last,\n      curr\n    ) {\n      return last && curr\n    }, true)\n    return complete\n  }\n\n  from(val) {\n    if (val == null) {\n      return this._from\n    }\n\n    this._from = this._set(val)\n    return this\n  }\n\n  stepper(stepper) {\n    if (stepper == null) return this._stepper\n    this._stepper = stepper\n    return this\n  }\n\n  to(val) {\n    if (val == null) {\n      return this._to\n    }\n\n    this._to = this._set(val)\n    return this\n  }\n\n  type(type) {\n    // getter\n    if (type == null) {\n      return this._type\n    }\n\n    // setter\n    this._type = type\n    return this\n  }\n\n  _set(value) {\n    if (!this._type) {\n      this.type(getClassForType(value))\n    }\n\n    let result = new this._type(value)\n    if (this._type === Color) {\n      result = this._to\n        ? result[this._to[4]]()\n        : this._from\n          ? result[this._from[4]]()\n          : result\n    }\n\n    if (this._type === ObjectBag) {\n      result = this._to\n        ? result.align(this._to)\n        : this._from\n          ? result.align(this._from)\n          : result\n    }\n\n    result = result.toConsumable()\n\n    this._morphObj = this._morphObj || new this._type()\n    this._context =\n      this._context ||\n      Array.apply(null, Array(result.length))\n        .map(Object)\n        .map(function (o) {\n          o.done = true\n          return o\n        })\n    return result\n  }\n}\n\nclass NonMorphable {\n  constructor(...args) {\n    this.init(...args)\n  }\n\n  init(val) {\n    val = Array.isArray(val) ? val[0] : val\n    this.value = val\n    return this\n  }\n\n  toArray() {\n    return [this.value]\n  }\n\n  valueOf() {\n    return this.value\n  }\n}\n\nclass TransformBag {\n  constructor(...args) {\n    this.init(...args)\n  }\n\n  init(obj) {\n    if (Array.isArray(obj)) {\n      obj = {\n        scaleX: obj[0],\n        scaleY: obj[1],\n        shear: obj[2],\n        rotate: obj[3],\n        translateX: obj[4],\n        translateY: obj[5],\n        originX: obj[6],\n        originY: obj[7]\n      }\n    }\n\n    Object.assign(this, TransformBag.defaults, obj)\n    return this\n  }\n\n  toArray() {\n    const v = this\n\n    return [\n      v.scaleX,\n      v.scaleY,\n      v.shear,\n      v.rotate,\n      v.translateX,\n      v.translateY,\n      v.originX,\n      v.originY\n    ]\n  }\n}\n\nTransformBag.defaults = {\n  scaleX: 1,\n  scaleY: 1,\n  shear: 0,\n  rotate: 0,\n  translateX: 0,\n  translateY: 0,\n  originX: 0,\n  originY: 0\n}\n\nconst sortByKey = (a, b) => {\n  return a[0] < b[0] ? -1 : a[0] > b[0] ? 1 : 0\n}\n\nclass ObjectBag {\n  constructor(...args) {\n    this.init(...args)\n  }\n\n  align(other) {\n    const values = this.values\n    for (let i = 0, il = values.length; i < il; ++i) {\n      // If the type is the same we only need to check if the color is in the correct format\n      if (values[i + 1] === other[i + 1]) {\n        if (values[i + 1] === Color && other[i + 7] !== values[i + 7]) {\n          const space = other[i + 7]\n          const color = new Color(this.values.splice(i + 3, 5))\n            [space]()\n            .toArray()\n          this.values.splice(i + 3, 0, ...color)\n        }\n\n        i += values[i + 2] + 2\n        continue\n      }\n\n      if (!other[i + 1]) {\n        return this\n      }\n\n      // The types differ, so we overwrite the new type with the old one\n      // And initialize it with the types default (e.g. black for color or 0 for number)\n      const defaultObject = new other[i + 1]().toArray()\n\n      // Than we fix the values array\n      const toDelete = values[i + 2] + 3\n\n      values.splice(\n        i,\n        toDelete,\n        other[i],\n        other[i + 1],\n        other[i + 2],\n        ...defaultObject\n      )\n\n      i += values[i + 2] + 2\n    }\n    return this\n  }\n\n  init(objOrArr) {\n    this.values = []\n\n    if (Array.isArray(objOrArr)) {\n      this.values = objOrArr.slice()\n      return\n    }\n\n    objOrArr = objOrArr || {}\n    const entries = []\n\n    for (const i in objOrArr) {\n      const Type = getClassForType(objOrArr[i])\n      const val = new Type(objOrArr[i]).toArray()\n      entries.push([i, Type, val.length, ...val])\n    }\n\n    entries.sort(sortByKey)\n\n    this.values = entries.reduce((last, curr) => last.concat(curr), [])\n    return this\n  }\n\n  toArray() {\n    return this.values\n  }\n\n  valueOf() {\n    const obj = {}\n    const arr = this.values\n\n    // for (var i = 0, len = arr.length; i < len; i += 2) {\n    while (arr.length) {\n      const key = arr.shift()\n      const Type = arr.shift()\n      const num = arr.shift()\n      const values = arr.splice(0, num)\n      obj[key] = new Type(values) // .valueOf()\n    }\n\n    return obj\n  }\n}\n\nconst morphableTypes = [NonMorphable, TransformBag, ObjectBag]\n\nfunction registerMorphableType(type = []) {\n  morphableTypes.push(...[].concat(type))\n}\n\nfunction makeMorphable() {\n  extend(morphableTypes, {\n    to(val) {\n      return new Morphable()\n        .type(this.constructor)\n        .from(this.toArray()) // this.valueOf())\n        .to(val)\n    },\n    fromArray(arr) {\n      this.init(arr)\n      return this\n    },\n    toConsumable() {\n      return this.toArray()\n    },\n    morph(from, to, pos, stepper, context) {\n      const mapper = function (i, index) {\n        return stepper.step(i, to[index], pos, context[index], context)\n      }\n\n      return this.fromArray(from.map(mapper))\n    }\n  })\n}\n\n;// ./node_modules/@svgdotjs/svg.js/src/elements/Path.js\n\n\n\n\n\n\nclass Path extends Shape {\n  // Initialize node\n  constructor(node, attrs = node) {\n    super(nodeOrNew('path', node), attrs)\n  }\n\n  // Get array\n  array() {\n    return this._array || (this._array = new PathArray(this.attr('d')))\n  }\n\n  // Clear array cache\n  clear() {\n    delete this._array\n    return this\n  }\n\n  // Set height of element\n  height(height) {\n    return height == null\n      ? this.bbox().height\n      : this.size(this.bbox().width, height)\n  }\n\n  // Move by left top corner\n  move(x, y) {\n    return this.attr('d', this.array().move(x, y))\n  }\n\n  // Plot new path\n  plot(d) {\n    return d == null\n      ? this.array()\n      : this.clear().attr(\n          'd',\n          typeof d === 'string' ? d : (this._array = new PathArray(d))\n        )\n  }\n\n  // Set element size to given width and height\n  size(width, height) {\n    const p = proportionalSize(this, width, height)\n    return this.attr('d', this.array().size(p.width, p.height))\n  }\n\n  // Set width of element\n  width(width) {\n    return width == null\n      ? this.bbox().width\n      : this.size(width, this.bbox().height)\n  }\n\n  // Move by left top corner over x-axis\n  x(x) {\n    return x == null ? this.bbox().x : this.move(x, this.bbox().y)\n  }\n\n  // Move by left top corner over y-axis\n  y(y) {\n    return y == null ? this.bbox().y : this.move(this.bbox().x, y)\n  }\n}\n\n// Define morphable array\nPath.prototype.MorphArray = PathArray\n\n// Add parent method\nregisterMethods({\n  Container: {\n    // Create a wrapped path element\n    path: wrapWithAttrCheck(function (d) {\n      // make sure plot is called as a setter\n      return this.put(new Path()).plot(d || new PathArray())\n    })\n  }\n})\n\nregister(Path, 'Path')\n\n;// ./node_modules/@svgdotjs/svg.js/src/modules/core/poly.js\n\n\n\n// Get array\nfunction array() {\n  return this._array || (this._array = new PointArray(this.attr('points')))\n}\n\n// Clear array cache\nfunction clear() {\n  delete this._array\n  return this\n}\n\n// Move by left top corner\nfunction move(x, y) {\n  return this.attr('points', this.array().move(x, y))\n}\n\n// Plot new path\nfunction plot(p) {\n  return p == null\n    ? this.array()\n    : this.clear().attr(\n        'points',\n        typeof p === 'string' ? p : (this._array = new PointArray(p))\n      )\n}\n\n// Set element size to given width and height\nfunction size(width, height) {\n  const p = proportionalSize(this, width, height)\n  return this.attr('points', this.array().size(p.width, p.height))\n}\n\n;// ./node_modules/@svgdotjs/svg.js/src/elements/Polygon.js\n\n\n\n\n\n\n\nclass Polygon extends Shape {\n  // Initialize node\n  constructor(node, attrs = node) {\n    super(nodeOrNew('polygon', node), attrs)\n  }\n}\n\nregisterMethods({\n  Container: {\n    // Create a wrapped polygon element\n    polygon: wrapWithAttrCheck(function (p) {\n      // make sure plot is called as a setter\n      return this.put(new Polygon()).plot(p || new PointArray())\n    })\n  }\n})\n\nextend(Polygon, pointed_namespaceObject)\nextend(Polygon, poly_namespaceObject)\nregister(Polygon, 'Polygon')\n\n;// ./node_modules/@svgdotjs/svg.js/src/elements/Polyline.js\n\n\n\n\n\n\n\nclass Polyline extends Shape {\n  // Initialize node\n  constructor(node, attrs = node) {\n    super(nodeOrNew('polyline', node), attrs)\n  }\n}\n\nregisterMethods({\n  Container: {\n    // Create a wrapped polygon element\n    polyline: wrapWithAttrCheck(function (p) {\n      // make sure plot is called as a setter\n      return this.put(new Polyline()).plot(p || new PointArray())\n    })\n  }\n})\n\nextend(Polyline, pointed_namespaceObject)\nextend(Polyline, poly_namespaceObject)\nregister(Polyline, 'Polyline')\n\n;// ./node_modules/@svgdotjs/svg.js/src/elements/Rect.js\n\n\n\n\n\nclass Rect extends Shape {\n  // Initialize node\n  constructor(node, attrs = node) {\n    super(nodeOrNew('rect', node), attrs)\n  }\n}\n\nextend(Rect, { rx: rx, ry: ry })\n\nregisterMethods({\n  Container: {\n    // Create a rect element\n    rect: wrapWithAttrCheck(function (width, height) {\n      return this.put(new Rect()).size(width, height)\n    })\n  }\n})\n\nregister(Rect, 'Rect')\n\n;// ./node_modules/@svgdotjs/svg.js/src/animation/Queue.js\nclass Queue {\n  constructor() {\n    this._first = null\n    this._last = null\n  }\n\n  // Shows us the first item in the list\n  first() {\n    return this._first && this._first.value\n  }\n\n  // Shows us the last item in the list\n  last() {\n    return this._last && this._last.value\n  }\n\n  push(value) {\n    // An item stores an id and the provided value\n    const item =\n      typeof value.next !== 'undefined'\n        ? value\n        : { value: value, next: null, prev: null }\n\n    // Deal with the queue being empty or populated\n    if (this._last) {\n      item.prev = this._last\n      this._last.next = item\n      this._last = item\n    } else {\n      this._last = item\n      this._first = item\n    }\n\n    // Return the current item\n    return item\n  }\n\n  // Removes the item that was returned from the push\n  remove(item) {\n    // Relink the previous item\n    if (item.prev) item.prev.next = item.next\n    if (item.next) item.next.prev = item.prev\n    if (item === this._last) this._last = item.prev\n    if (item === this._first) this._first = item.next\n\n    // Invalidate item\n    item.prev = null\n    item.next = null\n  }\n\n  shift() {\n    // Check if we have a value\n    const remove = this._first\n    if (!remove) return null\n\n    // If we do, remove it and relink things\n    this._first = remove.next\n    if (this._first) this._first.prev = null\n    this._last = this._first ? this._last : null\n    return remove.value\n  }\n}\n\n;// ./node_modules/@svgdotjs/svg.js/src/animation/Animator.js\n\n\n\nconst Animator = {\n  nextDraw: null,\n  frames: new Queue(),\n  timeouts: new Queue(),\n  immediates: new Queue(),\n  timer: () => globals.window.performance || globals.window.Date,\n  transforms: [],\n\n  frame(fn) {\n    // Store the node\n    const node = Animator.frames.push({ run: fn })\n\n    // Request an animation frame if we don't have one\n    if (Animator.nextDraw === null) {\n      Animator.nextDraw = globals.window.requestAnimationFrame(Animator._draw)\n    }\n\n    // Return the node so we can remove it easily\n    return node\n  },\n\n  timeout(fn, delay) {\n    delay = delay || 0\n\n    // Work out when the event should fire\n    const time = Animator.timer().now() + delay\n\n    // Add the timeout to the end of the queue\n    const node = Animator.timeouts.push({ run: fn, time: time })\n\n    // Request another animation frame if we need one\n    if (Animator.nextDraw === null) {\n      Animator.nextDraw = globals.window.requestAnimationFrame(Animator._draw)\n    }\n\n    return node\n  },\n\n  immediate(fn) {\n    // Add the immediate fn to the end of the queue\n    const node = Animator.immediates.push(fn)\n    // Request another animation frame if we need one\n    if (Animator.nextDraw === null) {\n      Animator.nextDraw = globals.window.requestAnimationFrame(Animator._draw)\n    }\n\n    return node\n  },\n\n  cancelFrame(node) {\n    node != null && Animator.frames.remove(node)\n  },\n\n  clearTimeout(node) {\n    node != null && Animator.timeouts.remove(node)\n  },\n\n  cancelImmediate(node) {\n    node != null && Animator.immediates.remove(node)\n  },\n\n  _draw(now) {\n    // Run all the timeouts we can run, if they are not ready yet, add them\n    // to the end of the queue immediately! (bad timeouts!!! [sarcasm])\n    let nextTimeout = null\n    const lastTimeout = Animator.timeouts.last()\n    while ((nextTimeout = Animator.timeouts.shift())) {\n      // Run the timeout if its time, or push it to the end\n      if (now >= nextTimeout.time) {\n        nextTimeout.run()\n      } else {\n        Animator.timeouts.push(nextTimeout)\n      }\n\n      // If we hit the last item, we should stop shifting out more items\n      if (nextTimeout === lastTimeout) break\n    }\n\n    // Run all of the animation frames\n    let nextFrame = null\n    const lastFrame = Animator.frames.last()\n    while (nextFrame !== lastFrame && (nextFrame = Animator.frames.shift())) {\n      nextFrame.run(now)\n    }\n\n    let nextImmediate = null\n    while ((nextImmediate = Animator.immediates.shift())) {\n      nextImmediate()\n    }\n\n    // If we have remaining timeouts or frames, draw until we don't anymore\n    Animator.nextDraw =\n      Animator.timeouts.first() || Animator.frames.first()\n        ? globals.window.requestAnimationFrame(Animator._draw)\n        : null\n  }\n}\n\n/* harmony default export */ const animation_Animator = (Animator);\n\n;// ./node_modules/@svgdotjs/svg.js/src/animation/Timeline.js\n\n\n\n\n\nconst makeSchedule = function (runnerInfo) {\n  const start = runnerInfo.start\n  const duration = runnerInfo.runner.duration()\n  const end = start + duration\n  return {\n    start: start,\n    duration: duration,\n    end: end,\n    runner: runnerInfo.runner\n  }\n}\n\nconst defaultSource = function () {\n  const w = globals.window\n  return (w.performance || w.Date).now()\n}\n\nclass Timeline extends EventTarget {\n  // Construct a new timeline on the given element\n  constructor(timeSource = defaultSource) {\n    super()\n\n    this._timeSource = timeSource\n\n    // terminate resets all variables to their initial state\n    this.terminate()\n  }\n\n  active() {\n    return !!this._nextFrame\n  }\n\n  finish() {\n    // Go to end and pause\n    this.time(this.getEndTimeOfTimeline() + 1)\n    return this.pause()\n  }\n\n  // Calculates the end of the timeline\n  getEndTime() {\n    const lastRunnerInfo = this.getLastRunnerInfo()\n    const lastDuration = lastRunnerInfo ? lastRunnerInfo.runner.duration() : 0\n    const lastStartTime = lastRunnerInfo ? lastRunnerInfo.start : this._time\n    return lastStartTime + lastDuration\n  }\n\n  getEndTimeOfTimeline() {\n    const endTimes = this._runners.map((i) => i.start + i.runner.duration())\n    return Math.max(0, ...endTimes)\n  }\n\n  getLastRunnerInfo() {\n    return this.getRunnerInfoById(this._lastRunnerId)\n  }\n\n  getRunnerInfoById(id) {\n    return this._runners[this._runnerIds.indexOf(id)] || null\n  }\n\n  pause() {\n    this._paused = true\n    return this._continue()\n  }\n\n  persist(dtOrForever) {\n    if (dtOrForever == null) return this._persist\n    this._persist = dtOrForever\n    return this\n  }\n\n  play() {\n    // Now make sure we are not paused and continue the animation\n    this._paused = false\n    return this.updateTime()._continue()\n  }\n\n  reverse(yes) {\n    const currentSpeed = this.speed()\n    if (yes == null) return this.speed(-currentSpeed)\n\n    const positive = Math.abs(currentSpeed)\n    return this.speed(yes ? -positive : positive)\n  }\n\n  // schedules a runner on the timeline\n  schedule(runner, delay, when) {\n    if (runner == null) {\n      return this._runners.map(makeSchedule)\n    }\n\n    // The start time for the next animation can either be given explicitly,\n    // derived from the current timeline time or it can be relative to the\n    // last start time to chain animations directly\n\n    let absoluteStartTime = 0\n    const endTime = this.getEndTime()\n    delay = delay || 0\n\n    // Work out when to start the animation\n    if (when == null || when === 'last' || when === 'after') {\n      // Take the last time and increment\n      absoluteStartTime = endTime\n    } else if (when === 'absolute' || when === 'start') {\n      absoluteStartTime = delay\n      delay = 0\n    } else if (when === 'now') {\n      absoluteStartTime = this._time\n    } else if (when === 'relative') {\n      const runnerInfo = this.getRunnerInfoById(runner.id)\n      if (runnerInfo) {\n        absoluteStartTime = runnerInfo.start + delay\n        delay = 0\n      }\n    } else if (when === 'with-last') {\n      const lastRunnerInfo = this.getLastRunnerInfo()\n      const lastStartTime = lastRunnerInfo ? lastRunnerInfo.start : this._time\n      absoluteStartTime = lastStartTime\n    } else {\n      throw new Error('Invalid value for the \"when\" parameter')\n    }\n\n    // Manage runner\n    runner.unschedule()\n    runner.timeline(this)\n\n    const persist = runner.persist()\n    const runnerInfo = {\n      persist: persist === null ? this._persist : persist,\n      start: absoluteStartTime + delay,\n      runner\n    }\n\n    this._lastRunnerId = runner.id\n\n    this._runners.push(runnerInfo)\n    this._runners.sort((a, b) => a.start - b.start)\n    this._runnerIds = this._runners.map((info) => info.runner.id)\n\n    this.updateTime()._continue()\n    return this\n  }\n\n  seek(dt) {\n    return this.time(this._time + dt)\n  }\n\n  source(fn) {\n    if (fn == null) return this._timeSource\n    this._timeSource = fn\n    return this\n  }\n\n  speed(speed) {\n    if (speed == null) return this._speed\n    this._speed = speed\n    return this\n  }\n\n  stop() {\n    // Go to start and pause\n    this.time(0)\n    return this.pause()\n  }\n\n  time(time) {\n    if (time == null) return this._time\n    this._time = time\n    return this._continue(true)\n  }\n\n  // Remove the runner from this timeline\n  unschedule(runner) {\n    const index = this._runnerIds.indexOf(runner.id)\n    if (index < 0) return this\n\n    this._runners.splice(index, 1)\n    this._runnerIds.splice(index, 1)\n\n    runner.timeline(null)\n    return this\n  }\n\n  // Makes sure, that after pausing the time doesn't jump\n  updateTime() {\n    if (!this.active()) {\n      this._lastSourceTime = this._timeSource()\n    }\n    return this\n  }\n\n  // Checks if we are running and continues the animation\n  _continue(immediateStep = false) {\n    animation_Animator.cancelFrame(this._nextFrame)\n    this._nextFrame = null\n\n    if (immediateStep) return this._stepImmediate()\n    if (this._paused) return this\n\n    this._nextFrame = animation_Animator.frame(this._step)\n    return this\n  }\n\n  _stepFn(immediateStep = false) {\n    // Get the time delta from the last time and update the time\n    const time = this._timeSource()\n    let dtSource = time - this._lastSourceTime\n\n    if (immediateStep) dtSource = 0\n\n    const dtTime = this._speed * dtSource + (this._time - this._lastStepTime)\n    this._lastSourceTime = time\n\n    // Only update the time if we use the timeSource.\n    // Otherwise use the current time\n    if (!immediateStep) {\n      // Update the time\n      this._time += dtTime\n      this._time = this._time < 0 ? 0 : this._time\n    }\n    this._lastStepTime = this._time\n    this.fire('time', this._time)\n\n    // This is for the case that the timeline was seeked so that the time\n    // is now before the startTime of the runner. That is why we need to set\n    // the runner to position 0\n\n    // FIXME:\n    // However, resetting in insertion order leads to bugs. Considering the case,\n    // where 2 runners change the same attribute but in different times,\n    // resetting both of them will lead to the case where the later defined\n    // runner always wins the reset even if the other runner started earlier\n    // and therefore should win the attribute battle\n    // this can be solved by resetting them backwards\n    for (let k = this._runners.length; k--; ) {\n      // Get and run the current runner and ignore it if its inactive\n      const runnerInfo = this._runners[k]\n      const runner = runnerInfo.runner\n\n      // Make sure that we give the actual difference\n      // between runner start time and now\n      const dtToStart = this._time - runnerInfo.start\n\n      // Dont run runner if not started yet\n      // and try to reset it\n      if (dtToStart <= 0) {\n        runner.reset()\n      }\n    }\n\n    // Run all of the runners directly\n    let runnersLeft = false\n    for (let i = 0, len = this._runners.length; i < len; i++) {\n      // Get and run the current runner and ignore it if its inactive\n      const runnerInfo = this._runners[i]\n      const runner = runnerInfo.runner\n      let dt = dtTime\n\n      // Make sure that we give the actual difference\n      // between runner start time and now\n      const dtToStart = this._time - runnerInfo.start\n\n      // Dont run runner if not started yet\n      if (dtToStart <= 0) {\n        runnersLeft = true\n        continue\n      } else if (dtToStart < dt) {\n        // Adjust dt to make sure that animation is on point\n        dt = dtToStart\n      }\n\n      if (!runner.active()) continue\n\n      // If this runner is still going, signal that we need another animation\n      // frame, otherwise, remove the completed runner\n      const finished = runner.step(dt).done\n      if (!finished) {\n        runnersLeft = true\n        // continue\n      } else if (runnerInfo.persist !== true) {\n        // runner is finished. And runner might get removed\n        const endTime = runner.duration() - runner.time() + this._time\n\n        if (endTime + runnerInfo.persist < this._time) {\n          // Delete runner and correct index\n          runner.unschedule()\n          --i\n          --len\n        }\n      }\n    }\n\n    // Basically: we continue when there are runners right from us in time\n    // when --\x3e, and when runners are left from us when <--\n    if (\n      (runnersLeft && !(this._speed < 0 && this._time === 0)) ||\n      (this._runnerIds.length && this._speed < 0 && this._time > 0)\n    ) {\n      this._continue()\n    } else {\n      this.pause()\n      this.fire('finished')\n    }\n\n    return this\n  }\n\n  terminate() {\n    // cleanup memory\n\n    // Store the timing variables\n    this._startTime = 0\n    this._speed = 1.0\n\n    // Determines how long a runner is hold in memory. Can be a dt or true/false\n    this._persist = 0\n\n    // Keep track of the running animations and their starting parameters\n    this._nextFrame = null\n    this._paused = true\n    this._runners = []\n    this._runnerIds = []\n    this._lastRunnerId = -1\n    this._time = 0\n    this._lastSourceTime = 0\n    this._lastStepTime = 0\n\n    // Make sure that step is always called in class context\n    this._step = this._stepFn.bind(this, false)\n    this._stepImmediate = this._stepFn.bind(this, true)\n  }\n}\n\nregisterMethods({\n  Element: {\n    timeline: function (timeline) {\n      if (timeline == null) {\n        this._timeline = this._timeline || new Timeline()\n        return this._timeline\n      } else {\n        this._timeline = timeline\n        return this\n      }\n    }\n  }\n})\n\n;// ./node_modules/@svgdotjs/svg.js/src/animation/Runner.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass Runner extends EventTarget {\n  constructor(options) {\n    super()\n\n    // Store a unique id on the runner, so that we can identify it later\n    this.id = Runner.id++\n\n    // Ensure a default value\n    options = options == null ? timeline.duration : options\n\n    // Ensure that we get a controller\n    options = typeof options === 'function' ? new Controller(options) : options\n\n    // Declare all of the variables\n    this._element = null\n    this._timeline = null\n    this.done = false\n    this._queue = []\n\n    // Work out the stepper and the duration\n    this._duration = typeof options === 'number' && options\n    this._isDeclarative = options instanceof Controller\n    this._stepper = this._isDeclarative ? options : new Ease()\n\n    // We copy the current values from the timeline because they can change\n    this._history = {}\n\n    // Store the state of the runner\n    this.enabled = true\n    this._time = 0\n    this._lastTime = 0\n\n    // At creation, the runner is in reset state\n    this._reseted = true\n\n    // Save transforms applied to this runner\n    this.transforms = new Matrix()\n    this.transformId = 1\n\n    // Looping variables\n    this._haveReversed = false\n    this._reverse = false\n    this._loopsDone = 0\n    this._swing = false\n    this._wait = 0\n    this._times = 1\n\n    this._frameId = null\n\n    // Stores how long a runner is stored after being done\n    this._persist = this._isDeclarative ? true : null\n  }\n\n  static sanitise(duration, delay, when) {\n    // Initialise the default parameters\n    let times = 1\n    let swing = false\n    let wait = 0\n    duration = duration ?? timeline.duration\n    delay = delay ?? timeline.delay\n    when = when || 'last'\n\n    // If we have an object, unpack the values\n    if (typeof duration === 'object' && !(duration instanceof Stepper)) {\n      delay = duration.delay ?? delay\n      when = duration.when ?? when\n      swing = duration.swing || swing\n      times = duration.times ?? times\n      wait = duration.wait ?? wait\n      duration = duration.duration ?? timeline.duration\n    }\n\n    return {\n      duration: duration,\n      delay: delay,\n      swing: swing,\n      times: times,\n      wait: wait,\n      when: when\n    }\n  }\n\n  active(enabled) {\n    if (enabled == null) return this.enabled\n    this.enabled = enabled\n    return this\n  }\n\n  /*\n  Private Methods\n  ===============\n  Methods that shouldn't be used externally\n  */\n  addTransform(transform) {\n    this.transforms.lmultiplyO(transform)\n    return this\n  }\n\n  after(fn) {\n    return this.on('finished', fn)\n  }\n\n  animate(duration, delay, when) {\n    const o = Runner.sanitise(duration, delay, when)\n    const runner = new Runner(o.duration)\n    if (this._timeline) runner.timeline(this._timeline)\n    if (this._element) runner.element(this._element)\n    return runner.loop(o).schedule(o.delay, o.when)\n  }\n\n  clearTransform() {\n    this.transforms = new Matrix()\n    return this\n  }\n\n  // TODO: Keep track of all transformations so that deletion is faster\n  clearTransformsFromQueue() {\n    if (\n      !this.done ||\n      !this._timeline ||\n      !this._timeline._runnerIds.includes(this.id)\n    ) {\n      this._queue = this._queue.filter((item) => {\n        return !item.isTransform\n      })\n    }\n  }\n\n  delay(delay) {\n    return this.animate(0, delay)\n  }\n\n  duration() {\n    return this._times * (this._wait + this._duration) - this._wait\n  }\n\n  during(fn) {\n    return this.queue(null, fn)\n  }\n\n  ease(fn) {\n    this._stepper = new Ease(fn)\n    return this\n  }\n  /*\n  Runner Definitions\n  ==================\n  These methods help us define the runtime behaviour of the Runner or they\n  help us make new runners from the current runner\n  */\n\n  element(element) {\n    if (element == null) return this._element\n    this._element = element\n    element._prepareRunner()\n    return this\n  }\n\n  finish() {\n    return this.step(Infinity)\n  }\n\n  loop(times, swing, wait) {\n    // Deal with the user passing in an object\n    if (typeof times === 'object') {\n      swing = times.swing\n      wait = times.wait\n      times = times.times\n    }\n\n    // Sanitise the values and store them\n    this._times = times || Infinity\n    this._swing = swing || false\n    this._wait = wait || 0\n\n    // Allow true to be passed\n    if (this._times === true) {\n      this._times = Infinity\n    }\n\n    return this\n  }\n\n  loops(p) {\n    const loopDuration = this._duration + this._wait\n    if (p == null) {\n      const loopsDone = Math.floor(this._time / loopDuration)\n      const relativeTime = this._time - loopsDone * loopDuration\n      const position = relativeTime / this._duration\n      return Math.min(loopsDone + position, this._times)\n    }\n    const whole = Math.floor(p)\n    const partial = p % 1\n    const time = loopDuration * whole + this._duration * partial\n    return this.time(time)\n  }\n\n  persist(dtOrForever) {\n    if (dtOrForever == null) return this._persist\n    this._persist = dtOrForever\n    return this\n  }\n\n  position(p) {\n    // Get all of the variables we need\n    const x = this._time\n    const d = this._duration\n    const w = this._wait\n    const t = this._times\n    const s = this._swing\n    const r = this._reverse\n    let position\n\n    if (p == null) {\n      /*\n      This function converts a time to a position in the range [0, 1]\n      The full explanation can be found in this desmos demonstration\n        https://www.desmos.com/calculator/u4fbavgche\n      The logic is slightly simplified here because we can use booleans\n      */\n\n      // Figure out the value without thinking about the start or end time\n      const f = function (x) {\n        const swinging = s * Math.floor((x % (2 * (w + d))) / (w + d))\n        const backwards = (swinging && !r) || (!swinging && r)\n        const uncliped =\n          (Math.pow(-1, backwards) * (x % (w + d))) / d + backwards\n        const clipped = Math.max(Math.min(uncliped, 1), 0)\n        return clipped\n      }\n\n      // Figure out the value by incorporating the start time\n      const endTime = t * (w + d) - w\n      position =\n        x <= 0\n          ? Math.round(f(1e-5))\n          : x < endTime\n            ? f(x)\n            : Math.round(f(endTime - 1e-5))\n      return position\n    }\n\n    // Work out the loops done and add the position to the loops done\n    const loopsDone = Math.floor(this.loops())\n    const swingForward = s && loopsDone % 2 === 0\n    const forwards = (swingForward && !r) || (r && swingForward)\n    position = loopsDone + (forwards ? p : 1 - p)\n    return this.loops(position)\n  }\n\n  progress(p) {\n    if (p == null) {\n      return Math.min(1, this._time / this.duration())\n    }\n    return this.time(p * this.duration())\n  }\n\n  /*\n  Basic Functionality\n  ===================\n  These methods allow us to attach basic functions to the runner directly\n  */\n  queue(initFn, runFn, retargetFn, isTransform) {\n    this._queue.push({\n      initialiser: initFn || noop,\n      runner: runFn || noop,\n      retarget: retargetFn,\n      isTransform: isTransform,\n      initialised: false,\n      finished: false\n    })\n    const timeline = this.timeline()\n    timeline && this.timeline()._continue()\n    return this\n  }\n\n  reset() {\n    if (this._reseted) return this\n    this.time(0)\n    this._reseted = true\n    return this\n  }\n\n  reverse(reverse) {\n    this._reverse = reverse == null ? !this._reverse : reverse\n    return this\n  }\n\n  schedule(timeline, delay, when) {\n    // The user doesn't need to pass a timeline if we already have one\n    if (!(timeline instanceof Timeline)) {\n      when = delay\n      delay = timeline\n      timeline = this.timeline()\n    }\n\n    // If there is no timeline, yell at the user...\n    if (!timeline) {\n      throw Error('Runner cannot be scheduled without timeline')\n    }\n\n    // Schedule the runner on the timeline provided\n    timeline.schedule(this, delay, when)\n    return this\n  }\n\n  step(dt) {\n    // If we are inactive, this stepper just gets skipped\n    if (!this.enabled) return this\n\n    // Update the time and get the new position\n    dt = dt == null ? 16 : dt\n    this._time += dt\n    const position = this.position()\n\n    // Figure out if we need to run the stepper in this frame\n    const running = this._lastPosition !== position && this._time >= 0\n    this._lastPosition = position\n\n    // Figure out if we just started\n    const duration = this.duration()\n    const justStarted = this._lastTime <= 0 && this._time > 0\n    const justFinished = this._lastTime < duration && this._time >= duration\n\n    this._lastTime = this._time\n    if (justStarted) {\n      this.fire('start', this)\n    }\n\n    // Work out if the runner is finished set the done flag here so animations\n    // know, that they are running in the last step (this is good for\n    // transformations which can be merged)\n    const declarative = this._isDeclarative\n    this.done = !declarative && !justFinished && this._time >= duration\n\n    // Runner is running. So its not in reset state anymore\n    this._reseted = false\n\n    let converged = false\n    // Call initialise and the run function\n    if (running || declarative) {\n      this._initialise(running)\n\n      // clear the transforms on this runner so they dont get added again and again\n      this.transforms = new Matrix()\n      converged = this._run(declarative ? dt : position)\n\n      this.fire('step', this)\n    }\n    // correct the done flag here\n    // declarative animations itself know when they converged\n    this.done = this.done || (converged && declarative)\n    if (justFinished) {\n      this.fire('finished', this)\n    }\n    return this\n  }\n\n  /*\n  Runner animation methods\n  ========================\n  Control how the animation plays\n  */\n  time(time) {\n    if (time == null) {\n      return this._time\n    }\n    const dt = time - this._time\n    this.step(dt)\n    return this\n  }\n\n  timeline(timeline) {\n    // check explicitly for undefined so we can set the timeline to null\n    if (typeof timeline === 'undefined') return this._timeline\n    this._timeline = timeline\n    return this\n  }\n\n  unschedule() {\n    const timeline = this.timeline()\n    timeline && timeline.unschedule(this)\n    return this\n  }\n\n  // Run each initialise function in the runner if required\n  _initialise(running) {\n    // If we aren't running, we shouldn't initialise when not declarative\n    if (!running && !this._isDeclarative) return\n\n    // Loop through all of the initialisers\n    for (let i = 0, len = this._queue.length; i < len; ++i) {\n      // Get the current initialiser\n      const current = this._queue[i]\n\n      // Determine whether we need to initialise\n      const needsIt = this._isDeclarative || (!current.initialised && running)\n      running = !current.finished\n\n      // Call the initialiser if we need to\n      if (needsIt && running) {\n        current.initialiser.call(this)\n        current.initialised = true\n      }\n    }\n  }\n\n  // Save a morpher to the morpher list so that we can retarget it later\n  _rememberMorpher(method, morpher) {\n    this._history[method] = {\n      morpher: morpher,\n      caller: this._queue[this._queue.length - 1]\n    }\n\n    // We have to resume the timeline in case a controller\n    // is already done without being ever run\n    // This can happen when e.g. this is done:\n    //    anim = el.animate(new SVG.Spring)\n    // and later\n    //    anim.move(...)\n    if (this._isDeclarative) {\n      const timeline = this.timeline()\n      timeline && timeline.play()\n    }\n  }\n\n  // Try to set the target for a morpher if the morpher exists, otherwise\n  // Run each run function for the position or dt given\n  _run(positionOrDt) {\n    // Run all of the _queue directly\n    let allfinished = true\n    for (let i = 0, len = this._queue.length; i < len; ++i) {\n      // Get the current function to run\n      const current = this._queue[i]\n\n      // Run the function if its not finished, we keep track of the finished\n      // flag for the sake of declarative _queue\n      const converged = current.runner.call(this, positionOrDt)\n      current.finished = current.finished || converged === true\n      allfinished = allfinished && current.finished\n    }\n\n    // We report when all of the constructors are finished\n    return allfinished\n  }\n\n  // do nothing and return false\n  _tryRetarget(method, target, extra) {\n    if (this._history[method]) {\n      // if the last method wasn't even initialised, throw it away\n      if (!this._history[method].caller.initialised) {\n        const index = this._queue.indexOf(this._history[method].caller)\n        this._queue.splice(index, 1)\n        return false\n      }\n\n      // for the case of transformations, we use the special retarget function\n      // which has access to the outer scope\n      if (this._history[method].caller.retarget) {\n        this._history[method].caller.retarget.call(this, target, extra)\n        // for everything else a simple morpher change is sufficient\n      } else {\n        this._history[method].morpher.to(target)\n      }\n\n      this._history[method].caller.finished = false\n      const timeline = this.timeline()\n      timeline && timeline.play()\n      return true\n    }\n    return false\n  }\n}\n\nRunner.id = 0\n\nclass FakeRunner {\n  constructor(transforms = new Matrix(), id = -1, done = true) {\n    this.transforms = transforms\n    this.id = id\n    this.done = done\n  }\n\n  clearTransformsFromQueue() {}\n}\n\nextend([Runner, FakeRunner], {\n  mergeWith(runner) {\n    return new FakeRunner(\n      runner.transforms.lmultiply(this.transforms),\n      runner.id\n    )\n  }\n})\n\n// FakeRunner.emptyRunner = new FakeRunner()\n\nconst lmultiply = (last, curr) => last.lmultiplyO(curr)\nconst getRunnerTransform = (runner) => runner.transforms\n\nfunction mergeTransforms() {\n  // Find the matrix to apply to the element and apply it\n  const runners = this._transformationRunners.runners\n  const netTransform = runners\n    .map(getRunnerTransform)\n    .reduce(lmultiply, new Matrix())\n\n  this.transform(netTransform)\n\n  this._transformationRunners.merge()\n\n  if (this._transformationRunners.length() === 1) {\n    this._frameId = null\n  }\n}\n\nclass RunnerArray {\n  constructor() {\n    this.runners = []\n    this.ids = []\n  }\n\n  add(runner) {\n    if (this.runners.includes(runner)) return\n    const id = runner.id + 1\n\n    this.runners.push(runner)\n    this.ids.push(id)\n\n    return this\n  }\n\n  clearBefore(id) {\n    const deleteCnt = this.ids.indexOf(id + 1) || 1\n    this.ids.splice(0, deleteCnt, 0)\n    this.runners\n      .splice(0, deleteCnt, new FakeRunner())\n      .forEach((r) => r.clearTransformsFromQueue())\n    return this\n  }\n\n  edit(id, newRunner) {\n    const index = this.ids.indexOf(id + 1)\n    this.ids.splice(index, 1, id + 1)\n    this.runners.splice(index, 1, newRunner)\n    return this\n  }\n\n  getByID(id) {\n    return this.runners[this.ids.indexOf(id + 1)]\n  }\n\n  length() {\n    return this.ids.length\n  }\n\n  merge() {\n    let lastRunner = null\n    for (let i = 0; i < this.runners.length; ++i) {\n      const runner = this.runners[i]\n\n      const condition =\n        lastRunner &&\n        runner.done &&\n        lastRunner.done &&\n        // don't merge runner when persisted on timeline\n        (!runner._timeline ||\n          !runner._timeline._runnerIds.includes(runner.id)) &&\n        (!lastRunner._timeline ||\n          !lastRunner._timeline._runnerIds.includes(lastRunner.id))\n\n      if (condition) {\n        // the +1 happens in the function\n        this.remove(runner.id)\n        const newRunner = runner.mergeWith(lastRunner)\n        this.edit(lastRunner.id, newRunner)\n        lastRunner = newRunner\n        --i\n      } else {\n        lastRunner = runner\n      }\n    }\n\n    return this\n  }\n\n  remove(id) {\n    const index = this.ids.indexOf(id + 1)\n    this.ids.splice(index, 1)\n    this.runners.splice(index, 1)\n    return this\n  }\n}\n\nregisterMethods({\n  Element: {\n    animate(duration, delay, when) {\n      const o = Runner.sanitise(duration, delay, when)\n      const timeline = this.timeline()\n      return new Runner(o.duration)\n        .loop(o)\n        .element(this)\n        .timeline(timeline.play())\n        .schedule(o.delay, o.when)\n    },\n\n    delay(by, when) {\n      return this.animate(0, by, when)\n    },\n\n    // this function searches for all runners on the element and deletes the ones\n    // which run before the current one. This is because absolute transformations\n    // overwrite anything anyway so there is no need to waste time computing\n    // other runners\n    _clearTransformRunnersBefore(currentRunner) {\n      this._transformationRunners.clearBefore(currentRunner.id)\n    },\n\n    _currentTransform(current) {\n      return (\n        this._transformationRunners.runners\n          // we need the equal sign here to make sure, that also transformations\n          // on the same runner which execute before the current transformation are\n          // taken into account\n          .filter((runner) => runner.id <= current.id)\n          .map(getRunnerTransform)\n          .reduce(lmultiply, new Matrix())\n      )\n    },\n\n    _addRunner(runner) {\n      this._transformationRunners.add(runner)\n\n      // Make sure that the runner merge is executed at the very end of\n      // all Animator functions. That is why we use immediate here to execute\n      // the merge right after all frames are run\n      animation_Animator.cancelImmediate(this._frameId)\n      this._frameId = animation_Animator.immediate(mergeTransforms.bind(this))\n    },\n\n    _prepareRunner() {\n      if (this._frameId == null) {\n        this._transformationRunners = new RunnerArray().add(\n          new FakeRunner(new Matrix(this))\n        )\n      }\n    }\n  }\n})\n\n// Will output the elements from array A that are not in the array B\nconst difference = (a, b) => a.filter((x) => !b.includes(x))\n\nextend(Runner, {\n  attr(a, v) {\n    return this.styleAttr('attr', a, v)\n  },\n\n  // Add animatable styles\n  css(s, v) {\n    return this.styleAttr('css', s, v)\n  },\n\n  styleAttr(type, nameOrAttrs, val) {\n    if (typeof nameOrAttrs === 'string') {\n      return this.styleAttr(type, { [nameOrAttrs]: val })\n    }\n\n    let attrs = nameOrAttrs\n    if (this._tryRetarget(type, attrs)) return this\n\n    let morpher = new Morphable(this._stepper).to(attrs)\n    let keys = Object.keys(attrs)\n\n    this.queue(\n      function () {\n        morpher = morpher.from(this.element()[type](keys))\n      },\n      function (pos) {\n        this.element()[type](morpher.at(pos).valueOf())\n        return morpher.done()\n      },\n      function (newToAttrs) {\n        // Check if any new keys were added\n        const newKeys = Object.keys(newToAttrs)\n        const differences = difference(newKeys, keys)\n\n        // If their are new keys, initialize them and add them to morpher\n        if (differences.length) {\n          // Get the values\n          const addedFromAttrs = this.element()[type](differences)\n\n          // Get the already initialized values\n          const oldFromAttrs = new ObjectBag(morpher.from()).valueOf()\n\n          // Merge old and new\n          Object.assign(oldFromAttrs, addedFromAttrs)\n          morpher.from(oldFromAttrs)\n        }\n\n        // Get the object from the morpher\n        const oldToAttrs = new ObjectBag(morpher.to()).valueOf()\n\n        // Merge in new attributes\n        Object.assign(oldToAttrs, newToAttrs)\n\n        // Change morpher target\n        morpher.to(oldToAttrs)\n\n        // Make sure that we save the work we did so we don't need it to do again\n        keys = newKeys\n        attrs = newToAttrs\n      }\n    )\n\n    this._rememberMorpher(type, morpher)\n    return this\n  },\n\n  zoom(level, point) {\n    if (this._tryRetarget('zoom', level, point)) return this\n\n    let morpher = new Morphable(this._stepper).to(new SVGNumber(level))\n\n    this.queue(\n      function () {\n        morpher = morpher.from(this.element().zoom())\n      },\n      function (pos) {\n        this.element().zoom(morpher.at(pos), point)\n        return morpher.done()\n      },\n      function (newLevel, newPoint) {\n        point = newPoint\n        morpher.to(newLevel)\n      }\n    )\n\n    this._rememberMorpher('zoom', morpher)\n    return this\n  },\n\n  /**\n   ** absolute transformations\n   **/\n\n  //\n  // M v -----|-----(D M v = F v)------|-----\x3e  T v\n  //\n  // 1. define the final state (T) and decompose it (once)\n  //    t = [tx, ty, the, lam, sy, sx]\n  // 2. on every frame: pull the current state of all previous transforms\n  //    (M - m can change)\n  //   and then write this as m = [tx0, ty0, the0, lam0, sy0, sx0]\n  // 3. Find the interpolated matrix F(pos) = m + pos * (t - m)\n  //   - Note F(0) = M\n  //   - Note F(1) = T\n  // 4. Now you get the delta matrix as a result: D = F * inv(M)\n\n  transform(transforms, relative, affine) {\n    // If we have a declarative function, we should retarget it if possible\n    relative = transforms.relative || relative\n    if (\n      this._isDeclarative &&\n      !relative &&\n      this._tryRetarget('transform', transforms)\n    ) {\n      return this\n    }\n\n    // Parse the parameters\n    const isMatrix = Matrix.isMatrixLike(transforms)\n    affine =\n      transforms.affine != null\n        ? transforms.affine\n        : affine != null\n          ? affine\n          : !isMatrix\n\n    // Create a morpher and set its type\n    const morpher = new Morphable(this._stepper).type(\n      affine ? TransformBag : Matrix\n    )\n\n    let origin\n    let element\n    let current\n    let currentAngle\n    let startTransform\n\n    function setup() {\n      // make sure element and origin is defined\n      element = element || this.element()\n      origin = origin || getOrigin(transforms, element)\n\n      startTransform = new Matrix(relative ? undefined : element)\n\n      // add the runner to the element so it can merge transformations\n      element._addRunner(this)\n\n      // Deactivate all transforms that have run so far if we are absolute\n      if (!relative) {\n        element._clearTransformRunnersBefore(this)\n      }\n    }\n\n    function run(pos) {\n      // clear all other transforms before this in case something is saved\n      // on this runner. We are absolute. We dont need these!\n      if (!relative) this.clearTransform()\n\n      const { x, y } = new Point(origin).transform(\n        element._currentTransform(this)\n      )\n\n      let target = new Matrix({ ...transforms, origin: [x, y] })\n      let start = this._isDeclarative && current ? current : startTransform\n\n      if (affine) {\n        target = target.decompose(x, y)\n        start = start.decompose(x, y)\n\n        // Get the current and target angle as it was set\n        const rTarget = target.rotate\n        const rCurrent = start.rotate\n\n        // Figure out the shortest path to rotate directly\n        const possibilities = [rTarget - 360, rTarget, rTarget + 360]\n        const distances = possibilities.map((a) => Math.abs(a - rCurrent))\n        const shortest = Math.min(...distances)\n        const index = distances.indexOf(shortest)\n        target.rotate = possibilities[index]\n      }\n\n      if (relative) {\n        // we have to be careful here not to overwrite the rotation\n        // with the rotate method of Matrix\n        if (!isMatrix) {\n          target.rotate = transforms.rotate || 0\n        }\n        if (this._isDeclarative && currentAngle) {\n          start.rotate = currentAngle\n        }\n      }\n\n      morpher.from(start)\n      morpher.to(target)\n\n      const affineParameters = morpher.at(pos)\n      currentAngle = affineParameters.rotate\n      current = new Matrix(affineParameters)\n\n      this.addTransform(current)\n      element._addRunner(this)\n      return morpher.done()\n    }\n\n    function retarget(newTransforms) {\n      // only get a new origin if it changed since the last call\n      if (\n        (newTransforms.origin || 'center').toString() !==\n        (transforms.origin || 'center').toString()\n      ) {\n        origin = getOrigin(newTransforms, element)\n      }\n\n      // overwrite the old transformations with the new ones\n      transforms = { ...newTransforms, origin }\n    }\n\n    this.queue(setup, run, retarget, true)\n    this._isDeclarative && this._rememberMorpher('transform', morpher)\n    return this\n  },\n\n  // Animatable x-axis\n  x(x) {\n    return this._queueNumber('x', x)\n  },\n\n  // Animatable y-axis\n  y(y) {\n    return this._queueNumber('y', y)\n  },\n\n  ax(x) {\n    return this._queueNumber('ax', x)\n  },\n\n  ay(y) {\n    return this._queueNumber('ay', y)\n  },\n\n  dx(x = 0) {\n    return this._queueNumberDelta('x', x)\n  },\n\n  dy(y = 0) {\n    return this._queueNumberDelta('y', y)\n  },\n\n  dmove(x, y) {\n    return this.dx(x).dy(y)\n  },\n\n  _queueNumberDelta(method, to) {\n    to = new SVGNumber(to)\n\n    // Try to change the target if we have this method already registered\n    if (this._tryRetarget(method, to)) return this\n\n    // Make a morpher and queue the animation\n    const morpher = new Morphable(this._stepper).to(to)\n    let from = null\n    this.queue(\n      function () {\n        from = this.element()[method]()\n        morpher.from(from)\n        morpher.to(from + to)\n      },\n      function (pos) {\n        this.element()[method](morpher.at(pos))\n        return morpher.done()\n      },\n      function (newTo) {\n        morpher.to(from + new SVGNumber(newTo))\n      }\n    )\n\n    // Register the morpher so that if it is changed again, we can retarget it\n    this._rememberMorpher(method, morpher)\n    return this\n  },\n\n  _queueObject(method, to) {\n    // Try to change the target if we have this method already registered\n    if (this._tryRetarget(method, to)) return this\n\n    // Make a morpher and queue the animation\n    const morpher = new Morphable(this._stepper).to(to)\n    this.queue(\n      function () {\n        morpher.from(this.element()[method]())\n      },\n      function (pos) {\n        this.element()[method](morpher.at(pos))\n        return morpher.done()\n      }\n    )\n\n    // Register the morpher so that if it is changed again, we can retarget it\n    this._rememberMorpher(method, morpher)\n    return this\n  },\n\n  _queueNumber(method, value) {\n    return this._queueObject(method, new SVGNumber(value))\n  },\n\n  // Animatable center x-axis\n  cx(x) {\n    return this._queueNumber('cx', x)\n  },\n\n  // Animatable center y-axis\n  cy(y) {\n    return this._queueNumber('cy', y)\n  },\n\n  // Add animatable move\n  move(x, y) {\n    return this.x(x).y(y)\n  },\n\n  amove(x, y) {\n    return this.ax(x).ay(y)\n  },\n\n  // Add animatable center\n  center(x, y) {\n    return this.cx(x).cy(y)\n  },\n\n  // Add animatable size\n  size(width, height) {\n    // animate bbox based size for all other elements\n    let box\n\n    if (!width || !height) {\n      box = this._element.bbox()\n    }\n\n    if (!width) {\n      width = (box.width / box.height) * height\n    }\n\n    if (!height) {\n      height = (box.height / box.width) * width\n    }\n\n    return this.width(width).height(height)\n  },\n\n  // Add animatable width\n  width(width) {\n    return this._queueNumber('width', width)\n  },\n\n  // Add animatable height\n  height(height) {\n    return this._queueNumber('height', height)\n  },\n\n  // Add animatable plot\n  plot(a, b, c, d) {\n    // Lines can be plotted with 4 arguments\n    if (arguments.length === 4) {\n      return this.plot([a, b, c, d])\n    }\n\n    if (this._tryRetarget('plot', a)) return this\n\n    const morpher = new Morphable(this._stepper)\n      .type(this._element.MorphArray)\n      .to(a)\n\n    this.queue(\n      function () {\n        morpher.from(this._element.array())\n      },\n      function (pos) {\n        this._element.plot(morpher.at(pos))\n        return morpher.done()\n      }\n    )\n\n    this._rememberMorpher('plot', morpher)\n    return this\n  },\n\n  // Add leading method\n  leading(value) {\n    return this._queueNumber('leading', value)\n  },\n\n  // Add animatable viewbox\n  viewbox(x, y, width, height) {\n    return this._queueObject('viewbox', new Box(x, y, width, height))\n  },\n\n  update(o) {\n    if (typeof o !== 'object') {\n      return this.update({\n        offset: arguments[0],\n        color: arguments[1],\n        opacity: arguments[2]\n      })\n    }\n\n    if (o.opacity != null) this.attr('stop-opacity', o.opacity)\n    if (o.color != null) this.attr('stop-color', o.color)\n    if (o.offset != null) this.attr('offset', o.offset)\n\n    return this\n  }\n})\n\nextend(Runner, { rx: rx, ry: ry, from: from, to: to })\nregister(Runner, 'Runner')\n\n;// ./node_modules/@svgdotjs/svg.js/src/elements/Svg.js\n\n\n\n\n\n\n\nclass Svg extends Container {\n  constructor(node, attrs = node) {\n    super(nodeOrNew('svg', node), attrs)\n    this.namespace()\n  }\n\n  // Creates and returns defs element\n  defs() {\n    if (!this.isRoot()) return this.root().defs()\n\n    return adopt(this.node.querySelector('defs')) || this.put(new Defs())\n  }\n\n  isRoot() {\n    return (\n      !this.node.parentNode ||\n      (!(this.node.parentNode instanceof globals.window.SVGElement) &&\n        this.node.parentNode.nodeName !== '#document-fragment')\n    )\n  }\n\n  // Add namespaces\n  namespace() {\n    if (!this.isRoot()) return this.root().namespace()\n    return this.attr({ xmlns: svg, version: '1.1' }).attr(\n      'xmlns:xlink',\n      xlink,\n      xmlns\n    )\n  }\n\n  removeNamespace() {\n    return this.attr({ xmlns: null, version: null })\n      .attr('xmlns:xlink', null, xmlns)\n      .attr('xmlns:svgjs', null, xmlns)\n  }\n\n  // Check if this is a root svg\n  // If not, call root() from this element\n  root() {\n    if (this.isRoot()) return this\n    return super.root()\n  }\n}\n\nregisterMethods({\n  Container: {\n    // Create nested svg document\n    nested: wrapWithAttrCheck(function () {\n      return this.put(new Svg())\n    })\n  }\n})\n\nregister(Svg, 'Svg', true)\n\n;// ./node_modules/@svgdotjs/svg.js/src/elements/Symbol.js\n\n\n\n\nclass Symbol_Symbol extends Container {\n  // Initialize node\n  constructor(node, attrs = node) {\n    super(nodeOrNew('symbol', node), attrs)\n  }\n}\n\nregisterMethods({\n  Container: {\n    symbol: wrapWithAttrCheck(function () {\n      return this.put(new Symbol_Symbol())\n    })\n  }\n})\n\nregister(Symbol_Symbol, 'Symbol')\n\n;// ./node_modules/@svgdotjs/svg.js/src/modules/core/textable.js\n\n\n// Create plain text node\nfunction plain(text) {\n  // clear if build mode is disabled\n  if (this._build === false) {\n    this.clear()\n  }\n\n  // create text node\n  this.node.appendChild(globals.document.createTextNode(text))\n\n  return this\n}\n\n// Get length of text element\nfunction textable_length() {\n  return this.node.getComputedTextLength()\n}\n\n// Move over x-axis\n// Text is moved by its bounding box\n// text-anchor does NOT matter\nfunction textable_x(x, box = this.bbox()) {\n  if (x == null) {\n    return box.x\n  }\n\n  return this.attr('x', this.attr('x') + x - box.x)\n}\n\n// Move over y-axis\nfunction textable_y(y, box = this.bbox()) {\n  if (y == null) {\n    return box.y\n  }\n\n  return this.attr('y', this.attr('y') + y - box.y)\n}\n\nfunction textable_move(x, y, box = this.bbox()) {\n  return this.x(x, box).y(y, box)\n}\n\n// Move center over x-axis\nfunction textable_cx(x, box = this.bbox()) {\n  if (x == null) {\n    return box.cx\n  }\n\n  return this.attr('x', this.attr('x') + x - box.cx)\n}\n\n// Move center over y-axis\nfunction textable_cy(y, box = this.bbox()) {\n  if (y == null) {\n    return box.cy\n  }\n\n  return this.attr('y', this.attr('y') + y - box.cy)\n}\n\nfunction center(x, y, box = this.bbox()) {\n  return this.cx(x, box).cy(y, box)\n}\n\nfunction ax(x) {\n  return this.attr('x', x)\n}\n\nfunction ay(y) {\n  return this.attr('y', y)\n}\n\nfunction amove(x, y) {\n  return this.ax(x).ay(y)\n}\n\n// Enable / disable build mode\nfunction build(build) {\n  this._build = !!build\n  return this\n}\n\n;// ./node_modules/@svgdotjs/svg.js/src/elements/Text.js\n\n\n\n\n\n\n\n\nclass Text extends Shape {\n  // Initialize node\n  constructor(node, attrs = node) {\n    super(nodeOrNew('text', node), attrs)\n\n    this.dom.leading = this.dom.leading ?? new SVGNumber(1.3) // store leading value for rebuilding\n    this._rebuild = true // enable automatic updating of dy values\n    this._build = false // disable build mode for adding multiple lines\n  }\n\n  // Set / get leading\n  leading(value) {\n    // act as getter\n    if (value == null) {\n      return this.dom.leading\n    }\n\n    // act as setter\n    this.dom.leading = new SVGNumber(value)\n\n    return this.rebuild()\n  }\n\n  // Rebuild appearance type\n  rebuild(rebuild) {\n    // store new rebuild flag if given\n    if (typeof rebuild === 'boolean') {\n      this._rebuild = rebuild\n    }\n\n    // define position of all lines\n    if (this._rebuild) {\n      const self = this\n      let blankLineOffset = 0\n      const leading = this.dom.leading\n\n      this.each(function (i) {\n        if (isDescriptive(this.node)) return\n\n        const fontSize = globals.window\n          .getComputedStyle(this.node)\n          .getPropertyValue('font-size')\n\n        const dy = leading * new SVGNumber(fontSize)\n\n        if (this.dom.newLined) {\n          this.attr('x', self.attr('x'))\n\n          if (this.text() === '\\n') {\n            blankLineOffset += dy\n          } else {\n            this.attr('dy', i ? dy + blankLineOffset : 0)\n            blankLineOffset = 0\n          }\n        }\n      })\n\n      this.fire('rebuild')\n    }\n\n    return this\n  }\n\n  // overwrite method from parent to set data properly\n  setData(o) {\n    this.dom = o\n    this.dom.leading = new SVGNumber(o.leading || 1.3)\n    return this\n  }\n\n  writeDataToDom() {\n    writeDataToDom(this, this.dom, { leading: 1.3 })\n    return this\n  }\n\n  // Set the text content\n  text(text) {\n    // act as getter\n    if (text === undefined) {\n      const children = this.node.childNodes\n      let firstLine = 0\n      text = ''\n\n      for (let i = 0, len = children.length; i < len; ++i) {\n        // skip textPaths - they are no lines\n        if (children[i].nodeName === 'textPath' || isDescriptive(children[i])) {\n          if (i === 0) firstLine = i + 1\n          continue\n        }\n\n        // add newline if its not the first child and newLined is set to true\n        if (\n          i !== firstLine &&\n          children[i].nodeType !== 3 &&\n          adopt(children[i]).dom.newLined === true\n        ) {\n          text += '\\n'\n        }\n\n        // add content of this node\n        text += children[i].textContent\n      }\n\n      return text\n    }\n\n    // remove existing content\n    this.clear().build(true)\n\n    if (typeof text === 'function') {\n      // call block\n      text.call(this, this)\n    } else {\n      // store text and make sure text is not blank\n      text = (text + '').split('\\n')\n\n      // build new lines\n      for (let j = 0, jl = text.length; j < jl; j++) {\n        this.newLine(text[j])\n      }\n    }\n\n    // disable build mode and rebuild lines\n    return this.build(false).rebuild()\n  }\n}\n\nextend(Text, textable_namespaceObject)\n\nregisterMethods({\n  Container: {\n    // Create text element\n    text: wrapWithAttrCheck(function (text = '') {\n      return this.put(new Text()).text(text)\n    }),\n\n    // Create plain text element\n    plain: wrapWithAttrCheck(function (text = '') {\n      return this.put(new Text()).plain(text)\n    })\n  }\n})\n\nregister(Text, 'Text')\n\n;// ./node_modules/@svgdotjs/svg.js/src/elements/Tspan.js\n\n\n\n\n\n\n\n\nclass Tspan extends Shape {\n  // Initialize node\n  constructor(node, attrs = node) {\n    super(nodeOrNew('tspan', node), attrs)\n    this._build = false // disable build mode for adding multiple lines\n  }\n\n  // Shortcut dx\n  dx(dx) {\n    return this.attr('dx', dx)\n  }\n\n  // Shortcut dy\n  dy(dy) {\n    return this.attr('dy', dy)\n  }\n\n  // Create new line\n  newLine() {\n    // mark new line\n    this.dom.newLined = true\n\n    // fetch parent\n    const text = this.parent()\n\n    // early return in case we are not in a text element\n    if (!(text instanceof Text)) {\n      return this\n    }\n\n    const i = text.index(this)\n\n    const fontSize = globals.window\n      .getComputedStyle(this.node)\n      .getPropertyValue('font-size')\n    const dy = text.dom.leading * new SVGNumber(fontSize)\n\n    // apply new position\n    return this.dy(i ? dy : 0).attr('x', text.x())\n  }\n\n  // Set text content\n  text(text) {\n    if (text == null)\n      return this.node.textContent + (this.dom.newLined ? '\\n' : '')\n\n    if (typeof text === 'function') {\n      this.clear().build(true)\n      text.call(this, this)\n      this.build(false)\n    } else {\n      this.plain(text)\n    }\n\n    return this\n  }\n}\n\nextend(Tspan, textable_namespaceObject)\n\nregisterMethods({\n  Tspan: {\n    tspan: wrapWithAttrCheck(function (text = '') {\n      const tspan = new Tspan()\n\n      // clear if build mode is disabled\n      if (!this._build) {\n        this.clear()\n      }\n\n      // add new tspan\n      return this.put(tspan).text(text)\n    })\n  },\n  Text: {\n    newLine: function (text = '') {\n      return this.tspan(text).newLine()\n    }\n  }\n})\n\nregister(Tspan, 'Tspan')\n\n;// ./node_modules/@svgdotjs/svg.js/src/elements/Circle.js\n\n\n\n\n\n\nclass Circle extends Shape {\n  constructor(node, attrs = node) {\n    super(nodeOrNew('circle', node), attrs)\n  }\n\n  radius(r) {\n    return this.attr('r', r)\n  }\n\n  // Radius x value\n  rx(rx) {\n    return this.attr('r', rx)\n  }\n\n  // Alias radius x value\n  ry(ry) {\n    return this.rx(ry)\n  }\n\n  size(size) {\n    return this.radius(new SVGNumber(size).divide(2))\n  }\n}\n\nextend(Circle, { x: x, y: y, cx: cx, cy: cy, width: width, height: height })\n\nregisterMethods({\n  Container: {\n    // Create circle element\n    circle: wrapWithAttrCheck(function (size = 0) {\n      return this.put(new Circle()).size(size).move(0, 0)\n    })\n  }\n})\n\nregister(Circle, 'Circle')\n\n;// ./node_modules/@svgdotjs/svg.js/src/elements/ClipPath.js\n\n\n\n\n\nclass ClipPath extends Container {\n  constructor(node, attrs = node) {\n    super(nodeOrNew('clipPath', node), attrs)\n  }\n\n  // Unclip all clipped elements and remove itself\n  remove() {\n    // unclip all targets\n    this.targets().forEach(function (el) {\n      el.unclip()\n    })\n\n    // remove clipPath from parent\n    return super.remove()\n  }\n\n  targets() {\n    return baseFind('svg [clip-path*=' + this.id() + ']')\n  }\n}\n\nregisterMethods({\n  Container: {\n    // Create clipping element\n    clip: wrapWithAttrCheck(function () {\n      return this.defs().put(new ClipPath())\n    })\n  },\n  Element: {\n    // Distribute clipPath to svg element\n    clipper() {\n      return this.reference('clip-path')\n    },\n\n    clipWith(element) {\n      // use given clip or create a new one\n      const clipper =\n        element instanceof ClipPath\n          ? element\n          : this.parent().clip().add(element)\n\n      // apply mask\n      return this.attr('clip-path', 'url(#' + clipper.id() + ')')\n    },\n\n    // Unclip element\n    unclip() {\n      return this.attr('clip-path', null)\n    }\n  }\n})\n\nregister(ClipPath, 'ClipPath')\n\n;// ./node_modules/@svgdotjs/svg.js/src/elements/ForeignObject.js\n\n\n\n\nclass ForeignObject extends Element {\n  constructor(node, attrs = node) {\n    super(nodeOrNew('foreignObject', node), attrs)\n  }\n}\n\nregisterMethods({\n  Container: {\n    foreignObject: wrapWithAttrCheck(function (width, height) {\n      return this.put(new ForeignObject()).size(width, height)\n    })\n  }\n})\n\nregister(ForeignObject, 'ForeignObject')\n\n;// ./node_modules/@svgdotjs/svg.js/src/modules/core/containerGeometry.js\n\n\n\n\n\n\nfunction dmove(dx, dy) {\n  this.children().forEach((child) => {\n    let bbox\n\n    // We have to wrap this for elements that dont have a bbox\n    // e.g. title and other descriptive elements\n    try {\n      // Get the childs bbox\n      // Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=1905039\n      // Because bbox for nested svgs returns the contents bbox in the coordinate space of the svg itself (weird!), we cant use bbox for svgs\n      // Therefore we have to use getBoundingClientRect. But THAT is broken (as explained in the bug).\n      // Funnily enough the broken behavior would work for us but that breaks it in chrome\n      // So we have to replicate the broken behavior of FF by just reading the attributes of the svg itself\n      bbox =\n        child.node instanceof getWindow().SVGSVGElement\n          ? new Box(child.attr(['x', 'y', 'width', 'height']))\n          : child.bbox()\n    } catch (e) {\n      return\n    }\n\n    // Get childs matrix\n    const m = new Matrix(child)\n    // Translate childs matrix by amount and\n    // transform it back into parents space\n    const matrix = m.translate(dx, dy).transform(m.inverse())\n    // Calculate new x and y from old box\n    const p = new Point(bbox.x, bbox.y).transform(matrix)\n    // Move element\n    child.move(p.x, p.y)\n  })\n\n  return this\n}\n\nfunction dx(dx) {\n  return this.dmove(dx, 0)\n}\n\nfunction dy(dy) {\n  return this.dmove(0, dy)\n}\n\nfunction containerGeometry_height(height, box = this.bbox()) {\n  if (height == null) return box.height\n  return this.size(box.width, height, box)\n}\n\nfunction containerGeometry_move(x = 0, y = 0, box = this.bbox()) {\n  const dx = x - box.x\n  const dy = y - box.y\n\n  return this.dmove(dx, dy)\n}\n\nfunction containerGeometry_size(width, height, box = this.bbox()) {\n  const p = proportionalSize(this, width, height, box)\n  const scaleX = p.width / box.width\n  const scaleY = p.height / box.height\n\n  this.children().forEach((child) => {\n    const o = new Point(box).transform(new Matrix(child).inverse())\n    child.scale(scaleX, scaleY, o.x, o.y)\n  })\n\n  return this\n}\n\nfunction containerGeometry_width(width, box = this.bbox()) {\n  if (width == null) return box.width\n  return this.size(width, box.height, box)\n}\n\nfunction containerGeometry_x(x, box = this.bbox()) {\n  if (x == null) return box.x\n  return this.move(x, box.y, box)\n}\n\nfunction containerGeometry_y(y, box = this.bbox()) {\n  if (y == null) return box.y\n  return this.move(box.x, y, box)\n}\n\n;// ./node_modules/@svgdotjs/svg.js/src/elements/G.js\n\n\n\n\n\nclass G extends Container {\n  constructor(node, attrs = node) {\n    super(nodeOrNew('g', node), attrs)\n  }\n}\n\nextend(G, containerGeometry_namespaceObject)\n\nregisterMethods({\n  Container: {\n    // Create a group element\n    group: wrapWithAttrCheck(function () {\n      return this.put(new G())\n    })\n  }\n})\n\nregister(G, 'G')\n\n;// ./node_modules/@svgdotjs/svg.js/src/elements/A.js\n\n\n\n\n\n\nclass A extends Container {\n  constructor(node, attrs = node) {\n    super(nodeOrNew('a', node), attrs)\n  }\n\n  // Link target attribute\n  target(target) {\n    return this.attr('target', target)\n  }\n\n  // Link url\n  to(url) {\n    return this.attr('href', url, xlink)\n  }\n}\n\nextend(A, containerGeometry_namespaceObject)\n\nregisterMethods({\n  Container: {\n    // Create a hyperlink element\n    link: wrapWithAttrCheck(function (url) {\n      return this.put(new A()).to(url)\n    })\n  },\n  Element: {\n    unlink() {\n      const link = this.linker()\n\n      if (!link) return this\n\n      const parent = link.parent()\n\n      if (!parent) {\n        return this.remove()\n      }\n\n      const index = parent.index(link)\n      parent.add(this, index)\n\n      link.remove()\n      return this\n    },\n    linkTo(url) {\n      // reuse old link if possible\n      let link = this.linker()\n\n      if (!link) {\n        link = new A()\n        this.wrap(link)\n      }\n\n      if (typeof url === 'function') {\n        url.call(link, link)\n      } else {\n        link.to(url)\n      }\n\n      return this\n    },\n    linker() {\n      const link = this.parent()\n      if (link && link.node.nodeName.toLowerCase() === 'a') {\n        return link\n      }\n\n      return null\n    }\n  }\n})\n\nregister(A, 'A')\n\n;// ./node_modules/@svgdotjs/svg.js/src/elements/Mask.js\n\n\n\n\n\nclass Mask extends Container {\n  // Initialize node\n  constructor(node, attrs = node) {\n    super(nodeOrNew('mask', node), attrs)\n  }\n\n  // Unmask all masked elements and remove itself\n  remove() {\n    // unmask all targets\n    this.targets().forEach(function (el) {\n      el.unmask()\n    })\n\n    // remove mask from parent\n    return super.remove()\n  }\n\n  targets() {\n    return baseFind('svg [mask*=' + this.id() + ']')\n  }\n}\n\nregisterMethods({\n  Container: {\n    mask: wrapWithAttrCheck(function () {\n      return this.defs().put(new Mask())\n    })\n  },\n  Element: {\n    // Distribute mask to svg element\n    masker() {\n      return this.reference('mask')\n    },\n\n    maskWith(element) {\n      // use given mask or create a new one\n      const masker =\n        element instanceof Mask ? element : this.parent().mask().add(element)\n\n      // apply mask\n      return this.attr('mask', 'url(#' + masker.id() + ')')\n    },\n\n    // Unmask element\n    unmask() {\n      return this.attr('mask', null)\n    }\n  }\n})\n\nregister(Mask, 'Mask')\n\n;// ./node_modules/@svgdotjs/svg.js/src/elements/Stop.js\n\n\n\n\n\nclass Stop extends Element {\n  constructor(node, attrs = node) {\n    super(nodeOrNew('stop', node), attrs)\n  }\n\n  // add color stops\n  update(o) {\n    if (typeof o === 'number' || o instanceof SVGNumber) {\n      o = {\n        offset: arguments[0],\n        color: arguments[1],\n        opacity: arguments[2]\n      }\n    }\n\n    // set attributes\n    if (o.opacity != null) this.attr('stop-opacity', o.opacity)\n    if (o.color != null) this.attr('stop-color', o.color)\n    if (o.offset != null) this.attr('offset', new SVGNumber(o.offset))\n\n    return this\n  }\n}\n\nregisterMethods({\n  Gradient: {\n    // Add a color stop\n    stop: function (offset, color, opacity) {\n      return this.put(new Stop()).update(offset, color, opacity)\n    }\n  }\n})\n\nregister(Stop, 'Stop')\n\n;// ./node_modules/@svgdotjs/svg.js/src/elements/Style.js\n\n\n\n\n\nfunction cssRule(selector, rule) {\n  if (!selector) return ''\n  if (!rule) return selector\n\n  let ret = selector + '{'\n\n  for (const i in rule) {\n    ret += unCamelCase(i) + ':' + rule[i] + ';'\n  }\n\n  ret += '}'\n\n  return ret\n}\n\nclass Style extends Element {\n  constructor(node, attrs = node) {\n    super(nodeOrNew('style', node), attrs)\n  }\n\n  addText(w = '') {\n    this.node.textContent += w\n    return this\n  }\n\n  font(name, src, params = {}) {\n    return this.rule('@font-face', {\n      fontFamily: name,\n      src: src,\n      ...params\n    })\n  }\n\n  rule(selector, obj) {\n    return this.addText(cssRule(selector, obj))\n  }\n}\n\nregisterMethods('Dom', {\n  style(selector, obj) {\n    return this.put(new Style()).rule(selector, obj)\n  },\n  fontface(name, src, params) {\n    return this.put(new Style()).font(name, src, params)\n  }\n})\n\nregister(Style, 'Style')\n\n;// ./node_modules/@svgdotjs/svg.js/src/elements/TextPath.js\n\n\n\n\n\n\n\n\nclass TextPath extends Text {\n  // Initialize node\n  constructor(node, attrs = node) {\n    super(nodeOrNew('textPath', node), attrs)\n  }\n\n  // return the array of the path track element\n  array() {\n    const track = this.track()\n\n    return track ? track.array() : null\n  }\n\n  // Plot path if any\n  plot(d) {\n    const track = this.track()\n    let pathArray = null\n\n    if (track) {\n      pathArray = track.plot(d)\n    }\n\n    return d == null ? pathArray : this\n  }\n\n  // Get the path element\n  track() {\n    return this.reference('href')\n  }\n}\n\nregisterMethods({\n  Container: {\n    textPath: wrapWithAttrCheck(function (text, path) {\n      // Convert text to instance if needed\n      if (!(text instanceof Text)) {\n        text = this.text(text)\n      }\n\n      return text.path(path)\n    })\n  },\n  Text: {\n    // Create path for text to run on\n    path: wrapWithAttrCheck(function (track, importNodes = true) {\n      const textPath = new TextPath()\n\n      // if track is a path, reuse it\n      if (!(track instanceof Path)) {\n        // create path element\n        track = this.defs().path(track)\n      }\n\n      // link textPath to path and add content\n      textPath.attr('href', '#' + track, xlink)\n\n      // Transplant all nodes from text to textPath\n      let node\n      if (importNodes) {\n        while ((node = this.node.firstChild)) {\n          textPath.node.appendChild(node)\n        }\n      }\n\n      // add textPath element as child node and return textPath\n      return this.put(textPath)\n    }),\n\n    // Get the textPath children\n    textPath() {\n      return this.findOne('textPath')\n    }\n  },\n  Path: {\n    // creates a textPath from this path\n    text: wrapWithAttrCheck(function (text) {\n      // Convert text to instance if needed\n      if (!(text instanceof Text)) {\n        text = new Text().addTo(this.parent()).text(text)\n      }\n\n      // Create textPath from text and path and return\n      return text.path(this)\n    }),\n\n    targets() {\n      return baseFind('svg textPath').filter((node) => {\n        return (node.attr('href') || '').includes(this.id())\n      })\n\n      // Does not work in IE11. Use when IE support is dropped\n      // return baseFind('svg textPath[*|href*=' + this.id() + ']')\n    }\n  }\n})\n\nTextPath.prototype.MorphArray = PathArray\nregister(TextPath, 'TextPath')\n\n;// ./node_modules/@svgdotjs/svg.js/src/elements/Use.js\n\n\n\n\n\nclass Use extends Shape {\n  constructor(node, attrs = node) {\n    super(nodeOrNew('use', node), attrs)\n  }\n\n  // Use element as a reference\n  use(element, file) {\n    // Set lined element\n    return this.attr('href', (file || '') + '#' + element, xlink)\n  }\n}\n\nregisterMethods({\n  Container: {\n    // Create a use element\n    use: wrapWithAttrCheck(function (element, file) {\n      return this.put(new Use()).use(element, file)\n    })\n  }\n})\n\nregister(Use, 'Use')\n\n;// ./node_modules/@svgdotjs/svg.js/src/main.js\n/* Optional Modules */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst SVG = (/* unused pure expression or super */ null && (makeInstance))\n\n\n\n\n\n\n/* Animation Modules */\n\n\n\n\n\n\n/* Types */\n\n\n\n\n\n\n\n\n\n\n\n/* Elements */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nextend([Svg, Symbol_Symbol, Image, Pattern, Marker], getMethodsFor('viewbox'))\n\nextend([Line, Polyline, Polygon, Path], getMethodsFor('marker'))\n\nextend(Text, getMethodsFor('Text'))\nextend(Path, getMethodsFor('Path'))\n\nextend(Defs, getMethodsFor('Defs'))\n\nextend([Text, Tspan], getMethodsFor('Tspan'))\n\nextend([Rect, Ellipse, Gradient, Runner], getMethodsFor('radius'))\n\nextend(EventTarget, getMethodsFor('EventTarget'))\nextend(Dom, getMethodsFor('Dom'))\nextend(Element, getMethodsFor('Element'))\nextend(Shape, getMethodsFor('Shape'))\nextend([Container, elements_Fragment], getMethodsFor('Container'))\nextend(Gradient, getMethodsFor('Gradient'))\n\nextend(Runner, getMethodsFor('Runner'))\n\ntypes_List.extend(getMethodNames())\n\nregisterMorphableType([\n  SVGNumber,\n  Color,\n  Box,\n  Matrix,\n  SVGArray,\n  PointArray,\n  PathArray,\n  Point\n])\n\nmakeMorphable()\n\n;// ./src/objects/text-circle.ts\n\n\nclass TextCircle extends G {\n    constructor() {\n        super(...arguments);\n        this.$circle = null;\n        this.$text = null;\n    }\n    init(text, x, y, size, strokeWidth) {\n        this.$circle = this.circle(size)\n            .stroke({ width: strokeWidth })\n            .center(0, 0);\n        this.$text = this.text(text).center(0, 0);\n        if (x && y)\n            this.center(x, y);\n        return this;\n    }\n    getText() {\n        var _a;\n        return ((_a = this.$text) === null || _a === void 0 ? void 0 : _a.text()) || \"\";\n    }\n    setText(text) {\n        var _a;\n        if (text == null)\n            text = \"\";\n        text = `${text}`;\n        if (text === \"\")\n            text = NBSP;\n        (_a = this.$text) === null || _a === void 0 ? void 0 : _a.text(text);\n        return this;\n    }\n    getSize() {\n        const r = this.attr(\"r\");\n        if (typeof r === \"number\")\n            return r * 2;\n        if (typeof r === \"string\" && !isNaN(Number(r)))\n            return Number(r) * 2;\n        return 0;\n    }\n    setSize(diameter, animationDuration = 0) {\n        this.animate(animationDuration).attr(\"r\", String(diameter / 2));\n        return this;\n    }\n    toString() {\n        return this.getText();\n    }\n}\n\n;// ./src/objects/graph-node.ts\n\n\nclass GraphNode extends TextCircle {\n    constructor() {\n        super(...arguments);\n        this.$incoming = {};\n        this.$outgoing = {};\n        this.$nullary = {};\n    }\n    init(text, x, y, size, strokeWidth) {\n        const bgSize = 3 * size;\n        this.rect(bgSize, bgSize).center(0, 0).addClass(\"invisible\");\n        return super.init(text, x, y, size, strokeWidth);\n    }\n    getBend(key) {\n        return 0;\n    }\n    getDirected(key) {\n        return true;\n    }\n    getIncoming(inKey) {\n        return this.$incoming[inKey];\n    }\n    getOutgoing(outKey) {\n        return this.$outgoing[outKey];\n    }\n    getIncomingEdges() {\n        return Object.values(this.$incoming).filter((e) => e !== null);\n    }\n    getOutgoingEdges() {\n        return Object.values(this.$outgoing).filter((e) => e !== null);\n    }\n    getPredecessors() {\n        return Object.values(this.$incoming)\n            .map((e) => e === null || e === void 0 ? void 0 : e.getStart())\n            .filter((e) => e !== undefined && e !== null);\n    }\n    getSuccessors() {\n        return Object.values(this.$outgoing)\n            .map((e) => e === null || e === void 0 ? void 0 : e.getEnd())\n            .filter((e) => e !== undefined && e !== null);\n    }\n    getPredecessor(inKey) {\n        var _a;\n        return ((_a = this.$incoming[inKey]) === null || _a === void 0 ? void 0 : _a.getStart()) || null;\n    }\n    getSuccessor(outKey) {\n        var _a;\n        return ((_a = this.$outgoing[outKey]) === null || _a === void 0 ? void 0 : _a.getEnd()) || null;\n    }\n    setPredecessor(inKey, outKey, predecessor, strokeWidth) {\n        predecessor.setSuccessor(outKey, inKey, this, strokeWidth);\n        return this;\n    }\n    setSuccessor(outKey, inKey, successor, strokeWidth) {\n        const outEdge = this.$outgoing[outKey];\n        if (outEdge) {\n            const oldSuccessor = outEdge.getEnd();\n            const oldIncoming = oldSuccessor === null || oldSuccessor === void 0 ? void 0 : oldSuccessor.$incoming;\n            for (const k in oldIncoming) {\n                if (oldIncoming[k] === outEdge)\n                    delete oldIncoming[k];\n            }\n            outEdge.remove();\n        }\n        if (successor) {\n            const inEdge = successor.$incoming[inKey];\n            if (inEdge) {\n                const oldPredecessor = inEdge.getStart();\n                const oldOutgoing = oldPredecessor === null || oldPredecessor === void 0 ? void 0 : oldPredecessor.$outgoing;\n                for (const k in oldOutgoing) {\n                    if (oldOutgoing[k] === inEdge)\n                        delete oldOutgoing[k];\n                }\n                inEdge.remove();\n            }\n            const edge = this.root().connection(this, successor, strokeWidth, this.getBend(outKey), this.getDirected(outKey));\n            this.$outgoing[outKey] = edge;\n            successor.$incoming[inKey] = edge;\n        }\n        else {\n            delete this.$outgoing[outKey];\n        }\n        this._updateNullary();\n        return this;\n    }\n    _updateNullary() {\n        var _a, _b;\n        for (const node of baseFind(\"g\")) {\n            if (node instanceof GraphNode) {\n                for (const c in node.$nullary) {\n                    const show = !node.$outgoing[c];\n                    if (show)\n                        (_a = node.$nullary[c]) === null || _a === void 0 ? void 0 : _a.removeClass(\"invisible\");\n                    else\n                        (_b = node.$nullary[c]) === null || _b === void 0 ? void 0 : _b.addClass(\"invisible\");\n                }\n            }\n        }\n    }\n    setIncomingHighlight(inKey, high) {\n        var _a;\n        this.setHighlight(high);\n        (_a = this.getIncoming(inKey)) === null || _a === void 0 ? void 0 : _a.setHighlight(high);\n        return this;\n    }\n    getHighlight() {\n        return this.hasClass(\"highlight\");\n    }\n    setOutgoingHighlight(outKey, high) {\n        var _a;\n        this.setHighlight(high);\n        (_a = this.getOutgoing(outKey)) === null || _a === void 0 ? void 0 : _a.setHighlight(high);\n        return this;\n    }\n    remove() {\n        for (const outKey in this.$outgoing) {\n            const outEdge = this.$outgoing[outKey];\n            if (!outEdge)\n                continue;\n            const end = outEdge.getEnd();\n            const incoming = end === null || end === void 0 ? void 0 : end.$incoming;\n            for (const inKey in incoming) {\n                if (outEdge === incoming[inKey]) {\n                    delete incoming[inKey];\n                }\n                outEdge.remove();\n            }\n        }\n        for (const inKey in this.$incoming) {\n            const inEdge = this.$incoming[inKey];\n            if (!inEdge)\n                continue;\n            const start = inEdge.getStart();\n            const outgoing = start === null || start === void 0 ? void 0 : start.$outgoing;\n            for (const outKey in outgoing) {\n                if (inEdge === outgoing[outKey]) {\n                    delete outgoing[outKey];\n                }\n                inEdge.remove();\n            }\n        }\n        super.remove();\n        this._updateNullary();\n        return this;\n    }\n    setCenter(x, y, animationDuration = 0) {\n        super.setCenter(x, y, animationDuration);\n        for (const edge of this.getOutgoingEdges()) {\n            edge.update({ x1: x, y1: y }, animationDuration);\n        }\n        for (const edge of this.getIncomingEdges()) {\n            edge.update({ x2: x, y2: y }, animationDuration);\n        }\n        return this;\n    }\n    setSize(size, animationDuration = 0) {\n        super.setSize(size, animationDuration);\n        for (const edge of this.getIncomingEdges()) {\n            edge.update({ r2: size / 2 }, animationDuration);\n        }\n        return this;\n    }\n}\n\n;// ./src/objects/binary-node.ts\n\nclass BinaryNode extends GraphNode {\n    constructor() {\n        super(...arguments);\n        this.$incoming = {\n            parent: null,\n        };\n        this.$outgoing = {\n            left: null,\n            right: null,\n        };\n        this.$nullary = {\n            left: null,\n            right: null,\n        };\n        this.$edgebends = { left: 0.1, right: -0.1 };\n        this.$leftWidth = 0;\n        this.$rightWidth = 0;\n        this.$width = 0;\n    }\n    init(text, x, y, size, strokeWidth) {\n        const d = size;\n        const nX = 0.5 * d, nY = 0.8 * d, nR = 2 * strokeWidth;\n        const nullpath = (s) => `M 0,0 L ${s * nX},${nY} m ${nR},0 a ${nR},${nR} 0 1,0 ${-2 * nR},0 a ${nR},${nR} 0 1,0 ${2 * nR},0`;\n        this.$nullary.left = this.path(nullpath(-1))\n            .stroke({ width: strokeWidth })\n            .addClass(\"nullnode\");\n        this.$nullary.right = this.path(nullpath(1))\n            .stroke({ width: strokeWidth })\n            .addClass(\"nullnode\");\n        return super.init(text, x, y, size, strokeWidth);\n    }\n    getBend(c) {\n        return this.$edgebends[c];\n    }\n    getParent() {\n        var _a;\n        return ((_a = this.$incoming.parent) === null || _a === void 0 ? void 0 : _a.getStart()) || null;\n    }\n    getLeft() {\n        var _a;\n        return ((_a = this.$outgoing.left) === null || _a === void 0 ? void 0 : _a.getEnd()) || null;\n    }\n    getRight() {\n        var _a;\n        return ((_a = this.$outgoing.right) === null || _a === void 0 ? void 0 : _a.getEnd()) || null;\n    }\n    getChild(c) {\n        var _a;\n        return ((_a = this.$outgoing[c]) === null || _a === void 0 ? void 0 : _a.getEnd()) || null;\n    }\n    getSibling() {\n        const parent = this.getParent();\n        if (!parent)\n            return null;\n        return this === parent.getLeft() ? parent.getRight() : parent.getLeft();\n    }\n    getParentEdge() {\n        return this.$incoming.parent;\n    }\n    getLeftEdge() {\n        return this.$outgoing.left;\n    }\n    getRightEdge() {\n        return this.$outgoing.right;\n    }\n    getChildEdge(c) {\n        return this.$outgoing[c];\n    }\n    isLeaf() {\n        return !(this.getLeft() || this.getRight());\n    }\n    isLeftChild() {\n        var _a;\n        return this === ((_a = this.getParent()) === null || _a === void 0 ? void 0 : _a.getLeft());\n    }\n    isRightChild() {\n        var _a;\n        return this === ((_a = this.getParent()) === null || _a === void 0 ? void 0 : _a.getRight());\n    }\n    isChild(c) {\n        var _a;\n        return this === ((_a = this.getParent()) === null || _a === void 0 ? void 0 : _a.getChild(c));\n    }\n    setLeft(child, strokeWidth) {\n        return this.setChild(\"left\", child, strokeWidth);\n    }\n    setRight(child, strokeWidth) {\n        return this.setChild(\"right\", child, strokeWidth);\n    }\n    setChild(c, child, strokeWidth) {\n        return this.setSuccessor(c, \"parent\", child, strokeWidth);\n    }\n    setParentLeft(parent, strokeWidth) {\n        return this.setParent(\"left\", parent, strokeWidth);\n    }\n    setParentRight(parent, strokeWidth) {\n        return this.setParent(\"right\", parent, strokeWidth);\n    }\n    setParent(c, parent, strokeWidth) {\n        parent.setChild(c, this, strokeWidth);\n        return this;\n    }\n    setParentHighlight(high) {\n        return this.setIncomingHighlight(\"parent\", high);\n    }\n    setRightHighlight(high) {\n        return this.setChildHighlight(\"right\", high);\n    }\n    setLeftHighlight(high) {\n        return this.setChildHighlight(\"left\", high);\n    }\n    setChildHighlight(c, high) {\n        return this.setOutgoingHighlight(c, high);\n    }\n    deepString() {\n        var _a, _b;\n        let s = \"\";\n        if (this.getLeft())\n            s += `(${(_a = this.getLeft()) === null || _a === void 0 ? void 0 : _a.deepString()}) `;\n        s += this.getText();\n        if (this.getRight())\n            s += ` (${(_b = this.getRight()) === null || _b === void 0 ? void 0 : _b.deepString()})`;\n        return s;\n    }\n    resize(startX, startY, svgMargin, nodeSpacing, animationDuration = 0) {\n        this._resizeWidths(nodeSpacing);\n        const svgWidth = this.root().viewbox().width;\n        if (startX + this.$rightWidth > svgWidth - svgMargin)\n            startX = svgWidth - this.$rightWidth - svgMargin;\n        if (startX - this.$leftWidth < svgMargin)\n            startX = this.$leftWidth + svgMargin;\n        this._setNewPositions(startX, startY, nodeSpacing, animationDuration);\n        return this;\n    }\n    _resizeWidths(nodeSpacing) {\n        let width = nodeSpacing;\n        const left = this.getLeft();\n        if (left)\n            width += left._resizeWidths(nodeSpacing);\n        const right = this.getRight();\n        if (right)\n            width += right._resizeWidths(nodeSpacing);\n        width = Math.max(this.getSize(), width);\n        const leftWidth = (left === null || left === void 0 ? void 0 : left.$leftWidth) || 0;\n        const rightWidth = (right === null || right === void 0 ? void 0 : right.$rightWidth) || 0;\n        const mid = width - leftWidth - rightWidth;\n        this.$leftWidth = mid / 2 + leftWidth;\n        this.$rightWidth = mid / 2 + rightWidth;\n        this.$width = width;\n        return width;\n    }\n    _setNewPositions(x, y, nodeSpacing, animationDuration = 0) {\n        this.setCenter(x, y, animationDuration);\n        const ySpacing = nodeSpacing;\n        const nextY = y + this.getSize() + ySpacing;\n        const left = this.getLeft();\n        if (left)\n            left._setNewPositions(x - this.$leftWidth + left.$leftWidth, nextY, nodeSpacing, animationDuration);\n        const right = this.getRight();\n        if (right)\n            right._setNewPositions(x + this.$rightWidth - right.$rightWidth, nextY, nodeSpacing, animationDuration);\n    }\n    validate() {\n        var _a, _b, _c, _d;\n        const parent = (_a = this.$incoming.parent) === null || _a === void 0 ? void 0 : _a.getStart();\n        if (parent) {\n            parent.$incoming;\n            const c = this.isLeftChild() ? \"left\" : \"right\";\n            if (((_b = parent.$outgoing[c]) === null || _b === void 0 ? void 0 : _b.getEnd()) !== this)\n                console.error(\"Parent mismatch\");\n            let n = 0;\n            for (const edge of this.getEdges()) {\n                if (edge.getStart() === parent) {\n                    n++;\n                    if (edge.getEnd() !== this)\n                        console.error(\"Parent edge mismatch\");\n                }\n            }\n            if (n !== 1)\n                console.error(`Wrong n:o parent edges, ${n}`);\n        }\n        for (const c of [\"left\", \"right\"]) {\n            const child = (_c = this.$outgoing[c]) === null || _c === void 0 ? void 0 : _c.getEnd();\n            if (((_d = child === null || child === void 0 ? void 0 : child.$incoming.parent) === null || _d === void 0 ? void 0 : _d.getStart()) !== this)\n                console.error(`${c} child mismatch`);\n            let n = 0;\n            for (const edge of this.getEdges()) {\n                if (edge.getEnd() === child) {\n                    n++;\n                    if (edge.getStart() !== this)\n                        console.error(`${c} child edge mismatch`);\n                }\n            }\n            if (n !== 1)\n                console.error(`Wrong n:o ${c} child edges, ${n}`);\n        }\n    }\n}\n\n;// ./src/objects/avl-node.ts\n\nclass AVLNode extends BinaryNode {\n    constructor() {\n        super(...arguments);\n        this.$height = null;\n    }\n    init(text, x, y, size, strokeWidth) {\n        const d = size;\n        this.$height = this.text(\"1\")\n            .center(-0.6 * d, -0.5 * d)\n            .addClass(\"avlheight\");\n        return super.init(text, x, y, size, strokeWidth);\n    }\n    getHeight() {\n        if (this.$height)\n            return parseInt(this.$height.text());\n        return 1;\n    }\n    setHeight(height) {\n        var _a;\n        (_a = this.$height) === null || _a === void 0 ? void 0 : _a.text(String(height));\n        return this;\n    }\n    updateHeightPosition() {\n        if (!this.$height)\n            return this;\n        const hx = this.$height.cx();\n        const cx = this.cx();\n        if (this.isRightChild() && hx - cx < 0)\n            this.$height.cx(2 * cx - hx);\n        if (this.isLeftChild() && hx - cx > 0)\n            this.$height.cx(2 * cx - hx);\n        return this;\n    }\n    getHeightHighlight() {\n        var _a;\n        return ((_a = this.$height) === null || _a === void 0 ? void 0 : _a.getHighlight()) || false;\n    }\n    setHeightHighlight(high) {\n        var _a;\n        (_a = this.$height) === null || _a === void 0 ? void 0 : _a.setHighlight(high);\n        return this;\n    }\n}\n\n;// ./src/objects/connection.ts\n\nclass Connection extends Path {\n    constructor() {\n        super(...arguments);\n        this.$coords = {\n            r2: 0,\n            x1: 0,\n            x2: 0,\n            y1: 0,\n            y2: 0,\n        };\n        this.$start = null;\n        this.$end = null;\n        this.$bend = 0;\n    }\n    init(start, end, strokeWidth, bend = 0, directed = false) {\n        this.$start = start;\n        this.$end = end;\n        Object.assign(this.$coords, {\n            x1: start.cx(),\n            y1: start.cy(),\n            x2: end.cx(),\n            y2: end.cy(),\n            r2: end.getSize() / 2,\n        });\n        this.stroke({ width: strokeWidth });\n        this.back();\n        this.setBend(bend);\n        if (directed)\n            this._createArrow();\n        this.update(this.$coords);\n        return this;\n    }\n    getBend() {\n        return this.$bend;\n    }\n    setBend(bend) {\n        this.$bend = bend;\n        return this;\n    }\n    isDirected() {\n        return Boolean(this.reference(\"marker-end\"));\n    }\n    update(newCoords, animationDuration = 0) {\n        Object.assign(this.$coords, newCoords);\n        this.engine().animate(this, animationDuration > 0).plot(this._getPath());\n        if (this.isDirected())\n            this._redrawArrow(animationDuration);\n        return this;\n    }\n    _createArrow() {\n        this.marker(\"end\", 5, 4, function (add) {\n            add.polygon([0, 0, 5, 2, 0, 4]).addClass(\"filled\");\n        });\n    }\n    _redrawArrow(animationDuration = 0) {\n        const marker = this.reference(\"marker-end\");\n        const radius = this.$coords.r2;\n        const stroke = this.attr(\"stroke-width\");\n        this.engine()\n            .animate(marker, animationDuration > 0)\n            .attr({ refX: radius / stroke + 5 });\n    }\n    toString() {\n        return `${this.getStart()} --\x3e ${this.getEnd()}`;\n    }\n    getStart() {\n        return this.$start;\n    }\n    getEnd() {\n        return this.$end;\n    }\n    setStart(start, animationDuration = 0) {\n        if (start === this.$start)\n            return this;\n        this.$start = start;\n        if (start)\n            this.update({ x1: start.cx(), y1: start.cy() }, animationDuration);\n        return this;\n    }\n    setEnd(end, animationDuration = 0) {\n        if (end === this.$end)\n            return this;\n        this.$end = end;\n        if (end)\n            this.update({ x2: end.cx(), y2: end.cy() }, animationDuration);\n        return this;\n    }\n    setHighlight(high) {\n        super.setHighlight(high);\n        const marker = this.reference(\"marker-end\");\n        if (marker)\n            marker.setHighlight(high);\n        return this;\n    }\n    _getPath() {\n        const C = this.$coords;\n        const xControl = (C.x1 + C.x2) / 2 + (C.y1 - C.y2) * this.getBend();\n        const yControl = (C.y1 + C.y2) / 2 + (C.x2 - C.x1) * this.getBend();\n        return `M ${C.x1} ${C.y1} Q ${xControl} ${yControl} ${C.x2} ${C.y2}`;\n    }\n}\n\n;// ./src/objects/btree-connection.ts\n\nclass BTreeConnection extends Connection {\n    constructor() {\n        super(...arguments);\n        this.$maxBend = 0.1;\n        this.$coords = {\n            x1: 0,\n            x2: 0,\n            y1: 0,\n            y2: 0,\n            r2: 0,\n            n: 0,\n            i: 0,\n        };\n    }\n    init(start, end, child, numChildren, strokeWidth) {\n        Object.assign(this.$coords, { i: child, n: numChildren });\n        return super.init(start, end, strokeWidth);\n    }\n    getBend() {\n        if (this.$coords.n <= 1)\n            return 0;\n        return this.$maxBend * (1 - (2 * this.$coords.i) / (this.$coords.n - 1));\n    }\n    _getPath() {\n        const C = this.$coords;\n        let x1 = C.x1 + (2 * C.i - C.n + 1) * C.r2;\n        const y1 = C.y1 + C.r2;\n        if (C.i === 0)\n            x1 += C.r2 / 4;\n        if (C.i === C.n - 1)\n            x1 -= C.r2 / 4;\n        const xControl = (x1 + C.x2) / 2 + (y1 - C.y2) * this.getBend();\n        const yControl = (y1 + C.y2) / 2 + (C.x2 - x1) * this.getBend();\n        return `M ${x1} ${y1} Q ${xControl} ${yControl} ${C.x2} ${C.y2}`;\n    }\n}\n\n;// ./src/objects/btree-node.ts\n\n\nclass BTreeNode extends G {\n    constructor() {\n        super(...arguments);\n        this.$parent = null;\n        this.$children = null;\n        this.$rect = null;\n        this.$values = [];\n        this.$lines = [];\n        this.$rightWidth = 0;\n        this.$leftWidth = 0;\n        this.$childWidths = 0;\n        this.$width = 0;\n    }\n    init(leaf, nvalues, x, y, objectSize, strokeWidth) {\n        if (nvalues < 1)\n            throw new Error(\"BTreeNode: must have at least one value\");\n        this.$children = leaf ? null : Array(nvalues + 1);\n        this.setNumValues(nvalues, objectSize, strokeWidth);\n        if (x && y)\n            this.center(x, y);\n        return this;\n    }\n    toString() {\n        return `[${this.getTexts().join(\" | \")}]`;\n    }\n    numValues() {\n        return this.$values.length;\n    }\n    numChildren() {\n        var _a;\n        return ((_a = this.$children) === null || _a === void 0 ? void 0 : _a.length) || 0;\n    }\n    isLeaf() {\n        return this.$children === null;\n    }\n    setLeaf(leaf, strokeWidth) {\n        if (leaf && this.$children) {\n            for (let i = 0; i < this.$children.length; i++) {\n                this.setChild(i, null, strokeWidth);\n            }\n            this.$children = null;\n        }\n        else {\n            this.$children = Array(this.numValues() + 1);\n        }\n        return this;\n    }\n    insertValue(i, text, objectSize, strokeWidth, leftChildInsert = false) {\n        var _a;\n        if (i < this.numValues()) {\n            const dx = (i / Math.max(1, this.numValues()) - 1) * objectSize;\n            this.dmoveCenter(dx, 0);\n        }\n        this.$values.splice(i, 0);\n        this.$lines.splice(i, 0);\n        if (!this.isLeaf()) {\n            const j = leftChildInsert ? i : i + 1;\n            (_a = this.$children) === null || _a === void 0 ? void 0 : _a.splice(j, 0);\n        }\n        this.setNumValues(this.numValues(), objectSize, strokeWidth);\n        this.setText(i, text);\n        return this;\n    }\n    deleteValue(i, objectSize, strokeWidth, leftChildDelete = true) {\n        var _a;\n        this.$values[i].remove();\n        this.$values.splice(i, 1);\n        const l = Math.max(i, 1);\n        this.$lines[l].remove();\n        this.$lines.splice(l, 1);\n        if (!this.isLeaf()) {\n            const j = leftChildDelete ? i : i + 1;\n            this.setChild(j, null, strokeWidth);\n            (_a = this.$children) === null || _a === void 0 ? void 0 : _a.splice(j, 1);\n        }\n        this.setNumValues(this.numValues(), objectSize, strokeWidth);\n        return this;\n    }\n    setNumValues(nvalues, objectSize, strokeWidth) {\n        var _a, _b, _c, _d, _e;\n        while (nvalues < this.numValues()) {\n            if (!this.isLeaf()) {\n                this.setChild(((_a = this.$children) === null || _a === void 0 ? void 0 : _a.length) || 0 - 1, null, strokeWidth);\n                (_b = this.$children) === null || _b === void 0 ? void 0 : _b.pop();\n            }\n            (_c = this.$values.pop()) === null || _c === void 0 ? void 0 : _c.remove();\n            (_d = this.$lines.pop()) === null || _d === void 0 ? void 0 : _d.remove();\n        }\n        const w0 = objectSize, h = objectSize, stroke = strokeWidth;\n        if (!this.$rect)\n            this.$rect = this.rect(w0 * nvalues, h)\n                .stroke({ width: stroke })\n                .center(0, 0);\n        this.$rect.width(w0 * Math.max(0.5, nvalues)).radius(h / 4);\n        const cx = this.$rect.cx(), cy = this.$rect.cy();\n        for (let i = 0; i < nvalues; i++) {\n            if (!this.$values[i])\n                this.$values[i] = this.text(NBSP);\n            this.$values[i].center(cx + w0 * (i - nvalues / 2 + 0.5), cy);\n            if (i > 0) {\n                const dx = w0 * (i - nvalues / 2), dy = h / 2;\n                if (!this.$lines[i])\n                    this.$lines[i] = this.line(0, cy - dy, 0, cy + dy).stroke({\n                        width: stroke,\n                    });\n                this.$lines[i].cx(cx + dx);\n            }\n        }\n        if (!this.isLeaf() && this.$children) {\n            const n = (this.$children.length = nvalues + 1);\n            for (let i = 0; i < n; i++) {\n                (_e = this.$children[i]) === null || _e === void 0 ? void 0 : _e.update({ i: i, n: n });\n            }\n        }\n        return this;\n    }\n    getCX(i, objectSize) {\n        return this.cx() + objectSize * (i - this.numValues() / 2 + 0.5);\n    }\n    getWidth() {\n        var _a;\n        return Number((_a = this.$rect) === null || _a === void 0 ? void 0 : _a.width()) || 0;\n    }\n    getHeight() {\n        var _a;\n        return Number((_a = this.$rect) === null || _a === void 0 ? void 0 : _a.height()) || 0;\n    }\n    getSize() {\n        return this.getHeight();\n    }\n    getTexts() {\n        return this.$values.map((t) => t.text());\n    }\n    setTexts(texts) {\n        if (texts.length !== this.numValues())\n            throw new Error(`Wrong number of texts: ${texts.length} != ${this.numValues()}`);\n        for (let i = 0; i < texts.length; i++) {\n            this.setText(i, texts[i]);\n        }\n        return this;\n    }\n    getText(c) {\n        return this.$values[c].text();\n    }\n    setText(i, text) {\n        if (text == null)\n            text = \"\";\n        text = `${text}`;\n        if (text === \"\")\n            text = NBSP;\n        this.$values[i].text(text);\n        return this;\n    }\n    getParent() {\n        var _a;\n        return ((_a = this.$parent) === null || _a === void 0 ? void 0 : _a.getStart()) || null;\n    }\n    getChildren() {\n        var _a;\n        return (((_a = this.$children) === null || _a === void 0 ? void 0 : _a.map((e) => e === null || e === void 0 ? void 0 : e.getEnd()).filter((e) => e !== null && e !== undefined)) || []);\n    }\n    getChild(i) {\n        var _a, _b;\n        return ((_b = (_a = this.$children) === null || _a === void 0 ? void 0 : _a[i]) === null || _b === void 0 ? void 0 : _b.getEnd()) || null;\n    }\n    getLeft() {\n        return this.getChild(0);\n    }\n    getRight() {\n        return this.getChild(this.numChildren() - 1);\n    }\n    isChild(c) {\n        var _a;\n        return this === ((_a = this.getParent()) === null || _a === void 0 ? void 0 : _a.getChild(c));\n    }\n    getParentIndex() {\n        const parent = this.getParent();\n        if (!parent)\n            return null;\n        for (let i = 0; i < parent.numChildren(); i++) {\n            if (this === parent.getChild(i))\n                return i;\n        }\n        return null;\n    }\n    getParentEdge() {\n        return this.$parent;\n    }\n    getChildEdge(i) {\n        var _a;\n        return ((_a = this.$children) === null || _a === void 0 ? void 0 : _a[i]) || null;\n    }\n    setChild(i, child, strokeWidth) {\n        var _a, _b, _c, _d;\n        if ((_a = this.$children) === null || _a === void 0 ? void 0 : _a[i]) {\n            const oldChild = this.$children[i].getEnd();\n            oldChild.$parent = null;\n            this.$children[i].remove();\n        }\n        if (!child) {\n            if ((_b = this.$children) === null || _b === void 0 ? void 0 : _b[i])\n                this.$children[i] = null;\n        }\n        else {\n            if (child.$parent) {\n                const oldParent = child.$parent.getStart();\n                (_c = oldParent === null || oldParent === void 0 ? void 0 : oldParent.$children) === null || _c === void 0 ? void 0 : _c.forEach((oldParentChild) => {\n                    if (child.$parent === oldParentChild) {\n                        oldParentChild = null;\n                    }\n                });\n                child.$parent.remove();\n            }\n            const edge = this.root().bTreeConnection(this, child, i, this.numChildren(), strokeWidth);\n            if ((_d = this.$children) === null || _d === void 0 ? void 0 : _d[i])\n                this.$children[i] = edge;\n            child.$parent = edge;\n        }\n        return this;\n    }\n    setParent(c, parent, strokeWidth) {\n        parent.setChild(c, this, strokeWidth);\n        return this;\n    }\n    setParentHighlight(high) {\n        var _a;\n        this.setHighlight(high);\n        (_a = this.getParent()) === null || _a === void 0 ? void 0 : _a.setHighlight(high);\n        return this;\n    }\n    setChildHighlight(i, high) {\n        var _a;\n        this.setHighlight(high);\n        (_a = this.getChild(i)) === null || _a === void 0 ? void 0 : _a.setHighlight(high);\n        return this;\n    }\n    remove() {\n        var _a, _b, _c;\n        if (!this.isLeaf()) {\n            (_a = this.$children) === null || _a === void 0 ? void 0 : _a.forEach((child) => {\n                if (!child)\n                    return;\n                child.remove();\n                child = null;\n            });\n        }\n        if (this.$parent) {\n            const i = this.getParentIndex();\n            if (i && ((_c = (_b = this.$parent.getStart()) === null || _b === void 0 ? void 0 : _b.$children) === null || _c === void 0 ? void 0 : _c[i]))\n                this.$parent.getStart().$children[i] = null;\n            this.$parent.remove();\n            this.$parent = null;\n        }\n        super.remove();\n        return this;\n    }\n    setCenter(x, y, animationDuration = 0) {\n        var _a, _b;\n        super.setCenter(x, y, animationDuration);\n        (_a = this.$children) === null || _a === void 0 ? void 0 : _a.forEach((child) => {\n            child === null || child === void 0 ? void 0 : child.update({ x1: x, y1: y }, animationDuration);\n        });\n        (_b = this.$parent) === null || _b === void 0 ? void 0 : _b.update({ x2: x, y2: y }, animationDuration);\n        return this;\n    }\n    resize(startX, startY, svgMargin, nodeSpacing, animationDuration = 0) {\n        this._resizeWidths(nodeSpacing);\n        const svgWidth = this.root().viewbox().width;\n        if (startX + this.$rightWidth > svgWidth - svgMargin)\n            startX = svgWidth - this.$rightWidth - svgMargin;\n        if (startX - this.$leftWidth < svgMargin)\n            startX = this.$leftWidth + svgMargin;\n        this._setNewPositions(startX, startY, animationDuration);\n        return this;\n    }\n    _resizeWidths(nodeSpacing) {\n        var _a, _b;\n        let left = 0, right = 0;\n        this.$childWidths = 0;\n        this.$width = this.getWidth();\n        if (!this.isLeaf()) {\n            for (const child of this.getChildren()) {\n                this.$childWidths += (child === null || child === void 0 ? void 0 : child._resizeWidths(nodeSpacing)) || 0;\n            }\n            const xSpacing = nodeSpacing;\n            this.$width = Math.max(this.$width, this.$childWidths + this.numValues() * xSpacing);\n            left = ((_a = this.getLeft()) === null || _a === void 0 ? void 0 : _a.$leftWidth) || 0;\n            right = ((_b = this.getRight()) === null || _b === void 0 ? void 0 : _b.$rightWidth) || 0;\n        }\n        const mid = this.$width - left - right;\n        this.$leftWidth = mid / 2 + left;\n        this.$rightWidth = mid / 2 + right;\n        return this.$width;\n    }\n    _setNewPositions(x, y, nodeSpacing, animationDuration = 0) {\n        this.setCenter(x, y, animationDuration);\n        if (this.isLeaf())\n            return;\n        x -= this.$leftWidth;\n        const xSpacing = (this.$width - this.$childWidths) / this.numValues();\n        const ySpacing = nodeSpacing;\n        const nextY = y + this.getHeight() + ySpacing;\n        for (const child of this.getChildren()) {\n            child === null || child === void 0 ? void 0 : child._setNewPositions(x + child.$leftWidth, nextY, animationDuration);\n            x += ((child === null || child === void 0 ? void 0 : child.$width) || 0) + xSpacing;\n        }\n    }\n}\n\n;// ./src/objects/highlight-circle.ts\n\nclass HighlightCircle extends Circle {\n    init(x, y, radius, strokeWidth) {\n        return this.radius(radius)\n            .stroke({ width: strokeWidth })\n            .center(x, y)\n            .addClass(\"highlight-circle\");\n    }\n    getSize() {\n        const r = this.attr(\"r\");\n        if (typeof r === \"number\")\n            return r * 2;\n        if (typeof r === \"string\" && !isNaN(Number(r)))\n            return Number(r) * 2;\n        return 0;\n    }\n    setSize(diameter, animationDuration) {\n        this.engine()\n            .animate(this, animationDuration > 0)\n            .attr(\"r\", String(diameter / 2));\n        return this;\n    }\n}\n\n;// ./src/objects/index.ts\n\n\n\n\n\n\n\n\n\nextend(Element, {\n    getHighlight() {\n        return this.hasClass(\"highlight\");\n    },\n    setHighlight(high) {\n        if (high == null)\n            this.toggleClass(\"highlight\");\n        else if (high)\n            this.addClass(\"highlight\");\n        else\n            this.removeClass(\"highlight\");\n        return this;\n    },\n    getCenter() {\n        return [this.cx(), this.cy()];\n    },\n    setCenter(x, y, animationDuration = 0) {\n        return this\n            .engine()\n            .animate(this, animationDuration > 0)\n            .center(x, y);\n    },\n    dmoveCenter(dx, dy, animationDuration = 0) {\n        this.setCenter(this.cx() + dx, this.cy() + dy, animationDuration);\n        return this;\n    },\n    engine() {\n        return this.root().$engine;\n    },\n});\nextend(Container, {\n    highlightCircle(x, y, radius, strokeWidth) {\n        return this\n            .put(new HighlightCircle())\n            .init(x, y, radius, strokeWidth);\n    },\n    textCircle(text, x, y, size, strokeWidth) {\n        return this\n            .put(new TextCircle())\n            .init(text, x, y, size, strokeWidth);\n    },\n    graphNode(text, x, y, size, strokeWidth) {\n        return this\n            .put(new GraphNode())\n            .init(text, x, y, size, strokeWidth);\n    },\n    binaryNode(text, x, y, size, strokeWidth) {\n        return this\n            .put(new BinaryNode())\n            .init(text, x, y, size, strokeWidth);\n    },\n    avlNode(text, x, y, size, strokeWidth) {\n        return this\n            .put(new AVLNode())\n            .init(text, x, y, size, strokeWidth);\n    },\n    connection(start, end, strokeWidth, bend, directed) {\n        return this\n            .put(new Connection())\n            .init(start, end, strokeWidth, bend, directed);\n    },\n    bTreeNode(leaf, nvalues, x, y, objectSize, strokeWidth) {\n        return this\n            .put(new BTreeNode())\n            .init(leaf, nvalues, x, y, objectSize, strokeWidth);\n    },\n    bTreeConnection(start, end, child, numChildren, strokeWidth) {\n        return this\n            .put(new BTreeConnection())\n            .init(start, end, child, numChildren, strokeWidth);\n    },\n});\n\n\n;// ./src/engine.ts\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\nclass Engine {\n    getAnimationSpeed() {\n        var _a;\n        if (this.toolbar.animationSpeed)\n            return parseInt((_a = this.toolbar.animationSpeed) === null || _a === void 0 ? void 0 : _a.value);\n        return this.$Svg.animationSpeed;\n    }\n    getObjectSize() {\n        var _a;\n        if (this.toolbar.objectSize)\n            return parseInt((_a = this.toolbar.objectSize) === null || _a === void 0 ? void 0 : _a.value);\n        return this.$Svg.objectSize;\n    }\n    getNodeSpacing() {\n        return this.getObjectSize();\n    }\n    getStrokeWidth() {\n        return this.getObjectSize() / 12;\n    }\n    getNodeStart() {\n        return [this.$Svg.margin + this.getObjectSize() / 2, this.$Svg.margin * 4];\n    }\n    getTreeRoot() {\n        return [\n            this.Svg.viewbox().width / 2,\n            2 * this.$Svg.margin + this.getObjectSize() / 2,\n        ];\n    }\n    constructor(containerSelector, defaults = {}) {\n        this.$Svg = {\n            width: 1000,\n            height: 600,\n            margin: 30,\n            objectSize: 40,\n            animationSpeed: 1000,\n        };\n        this.$CookieExpireDays = 30;\n        this.$Cookies = {\n            animationSpeed: {\n                getCookie: (value) => {\n                    if (this.toolbar.animationSpeed)\n                        this.toolbar.animationSpeed.value = value;\n                },\n                setCookie: () => this.getAnimationSpeed(),\n            },\n            objectSize: {\n                getCookie: (value) => {\n                    if (this.toolbar.objectSize)\n                        this.toolbar.objectSize.value = value;\n                },\n                setCookie: () => this.getObjectSize(),\n            },\n        };\n        this.actions = [];\n        this.CurrentAction = 0;\n        this.CurrentStep = 0;\n        this.DEBUG = true;\n        this.State = {\n            resetting: false,\n            animating: false,\n        };\n        this.Info = {\n            title: undefined,\n            body: undefined,\n            printer: undefined,\n            status: undefined,\n        };\n        this.EventListeners = {\n            stepForward: {},\n            stepBackward: {},\n            fastForward: {},\n            fastBackward: {},\n            toggleRunner: {},\n        };\n        this.$IdleListeners = {\n            stepBackward: {\n                type: \"click\",\n                condition: () => this.actions.length > 0,\n                handler: () => {\n                    this.setRunning(false);\n                    const action = this.actions.pop();\n                    this.execute(action.oper, action.args, action.nsteps - 1);\n                },\n            },\n            fastBackward: {\n                type: \"click\",\n                condition: () => this.actions.length > 0,\n                handler: () => {\n                    this.actions.pop();\n                    if (this.actions.length > 0) {\n                        const action = this.actions.pop();\n                        this.execute(action.oper, action.args, action.nsteps);\n                    }\n                    else {\n                        this.reset();\n                    }\n                },\n            },\n            objectSize: {\n                type: \"change\",\n                condition: () => true,\n                handler: () => {\n                    if (this.actions.length > 0) {\n                        const action = this.actions.pop();\n                        this.execute(action.oper, action.args, action.nsteps);\n                    }\n                    else {\n                        this.reset();\n                    }\n                },\n            },\n        };\n        this.$AsyncListeners = {\n            stepForward: {\n                type: \"click\",\n                handler: (resolve, reject) => {\n                    this.setRunning(false);\n                    this.stepForward(resolve, reject);\n                },\n            },\n            fastForward: {\n                type: \"click\",\n                handler: (resolve, reject) => {\n                    this.actions[this.CurrentAction].nsteps = Number.MAX_SAFE_INTEGER;\n                    this.fastForward(resolve, reject);\n                },\n            },\n            toggleRunner: {\n                type: \"click\",\n                handler: (resolve, reject) => {\n                    this.toggleRunner();\n                    if (this.isRunning()) {\n                        this.stepForward(resolve, reject);\n                    }\n                    else {\n                        this.CurrentStep++;\n                        resolve(undefined);\n                    }\n                },\n            },\n            stepBackward: {\n                type: \"click\",\n                handler: (resolve, reject) => reject({ until: this.CurrentStep - 1, running: false }),\n            },\n            fastBackward: {\n                type: \"click\",\n                handler: (resolve, reject) => reject({ until: 0 }),\n            },\n            objectSize: {\n                type: \"change\",\n                handler: (resolve, reject) => reject({ until: this.CurrentStep }),\n            },\n        };\n        for (const key in defaults) {\n            if (!key.startsWith(\"$\"))\n                throw new TypeError(`Invalid default key: ${key}`);\n        }\n        updateDefault(this, defaults, true);\n        const container = document.querySelector(containerSelector);\n        if (!container)\n            throw new Error(\"No container found\");\n        this.container = container;\n        this.toolbar = this.getToolbar();\n        const svgContainer = this.container.querySelector(\"svg\");\n        if (!svgContainer)\n            throw new Error(\"No svg element found\");\n        this.Svg = new Svg(svgContainer);\n        this.Svg.viewbox(0, 0, this.$Svg.width, this.$Svg.height);\n        this.Svg.$engine = this;\n        const debugParam = new URLSearchParams(window.location.href).get(\"debug\");\n        this.DEBUG = Boolean(debugParam || false);\n        if (this.DEBUG)\n            this.Svg.addClass(\"debug\");\n    }\n    getToolbar() {\n        const generalControls = this.container.querySelector(\"fieldset.generalControls\");\n        const algorithmControls = this.container.querySelector(\"fieldset.algorithmControls\");\n        const stepForward = this.container.querySelector(\"button.stepForward\");\n        const stepBackward = this.container.querySelector(\"button.stepBackward\");\n        const toggleRunner = this.container.querySelector(\"button.toggleRunner\");\n        const fastForward = this.container.querySelector(\"button.fastForward\");\n        const fastBackward = this.container.querySelector(\"button.fastBackward\");\n        const objectSize = this.container.querySelector(\"select.objectSize\");\n        const animationSpeed = this.container.querySelector(\"select.animationSpeed\");\n        if (!generalControls)\n            throw new Error(\"Missing general controls fieldset\");\n        if (!algorithmControls)\n            throw new Error(\"Missing algorithm controls fieldset\");\n        if (!stepForward)\n            throw new Error(\"Missing step forward button\");\n        if (!stepBackward)\n            throw new Error(\"Missing step backward button\");\n        if (!toggleRunner)\n            throw new Error(\"Missing toggle runner button\");\n        if (!fastForward)\n            throw new Error(\"Missing fast forward button\");\n        if (!fastBackward)\n            throw new Error(\"Missing fast backward button\");\n        if (!objectSize)\n            throw new Error(\"Missing object size select\");\n        if (!animationSpeed)\n            throw new Error(\"Missing animation speed select\");\n        return {\n            generalControls,\n            algorithmControls,\n            stepForward,\n            stepBackward,\n            toggleRunner,\n            fastForward,\n            fastBackward,\n            objectSize,\n            animationSpeed,\n        };\n    }\n    initialise() {\n        this.initToolbar();\n        this.resetAll();\n        this.setRunning(true);\n    }\n    initToolbar() {\n        this.toolbar.animationSpeed.addEventListener(\"change\", () => this.saveCookies());\n    }\n    resetAll() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.actions = [];\n            this.loadCookies();\n            yield this.reset();\n        });\n    }\n    confirmResetAll() {\n        if (confirm(\"This clears the canvas and your history!\")) {\n            this.resetAll();\n            return true;\n        }\n        return false;\n    }\n    reset() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.clearCanvas();\n            yield this.resetAlgorithm();\n            this.resetListeners(false);\n        });\n    }\n    resetAlgorithm() {\n        return __awaiter(this, void 0, void 0, function* () { });\n    }\n    clearCanvas() {\n        this.Svg.clear();\n        const w = this.Svg.viewbox().width;\n        const h = this.Svg.viewbox().height;\n        if (this.DEBUG) {\n            for (let x = 1; x < w / 100; x++)\n                this.Svg.line(x * 100, 0, x * 100, h).addClass(\"gridline\");\n            for (let y = 1; y < h / 100; y++)\n                this.Svg.line(0, y * 100, w, y * 100).addClass(\"gridline\");\n        }\n        const margin = this.$Svg.margin;\n        this.Info.title = this.Svg.text(NBSP).addClass(\"title\").x(margin).y(margin);\n        this.Info.body = this.Svg.text(NBSP)\n            .addClass(\"message\")\n            .x(margin)\n            .y(2 * margin);\n        this.Info.printer = this.Svg.text(NBSP)\n            .addClass(\"printer\")\n            .x(margin)\n            .cy(h - 2 * margin);\n        this.Info.status = this.Svg.text(NBSP)\n            .addClass(\"status-report\")\n            .x(margin)\n            .cy(h - margin);\n        this.updateCSSVariables();\n    }\n    updateCSSVariables() {\n        const relativeSize = Math.round((100 * this.getObjectSize()) / this.$Svg.objectSize);\n        document.documentElement.style.setProperty(\"--node-font-size\", `${relativeSize}%`);\n    }\n    setStatus(status, timeout = 10) {\n        const currentStatus = this.Info.status;\n        if (currentStatus === undefined)\n            return;\n        setTimeout(() => {\n            if (status === \"running\") {\n                currentStatus\n                    .text(\"Animating\")\n                    .removeClass(\"paused\")\n                    .addClass(\"running\");\n            }\n            else if (status === \"paused\") {\n                currentStatus.text(\"Paused\").addClass(\"paused\").removeClass(\"running\");\n            }\n            else {\n                currentStatus.text(\"Idle\").removeClass(\"paused\").removeClass(\"running\");\n            }\n        }, timeout);\n    }\n    setIdleTitle() {\n        if (this.Info.title !== undefined)\n            this.Info.title.text(\"Select an action from the menu above\");\n        if (this.Info.body !== undefined)\n            this.Info.body.text(NBSP);\n    }\n    disableWhenRunning(disabled) {\n        for (const elem of this.container.querySelectorAll(\".disableWhenRunning\"))\n            elem.disabled = disabled;\n    }\n    resetListeners(isRunning) {\n        this.saveCookies();\n        this.removeAllListeners();\n        if (this.constructor === Engine) {\n            this.disableWhenRunning(true);\n            return;\n        }\n        this.addListener(\"toggleRunner\", \"click\", () => this.toggleRunner());\n        if (isRunning) {\n            this.disableWhenRunning(true);\n            this.setStatus(\"paused\");\n            return;\n        }\n        this.disableWhenRunning(false);\n        this.setIdleTitle();\n        this.setStatus(\"inactive\");\n        for (const id in this.$IdleListeners) {\n            const listener = this.$IdleListeners[id];\n            if (listener.condition()) {\n                if (this.DEBUG)\n                    this.addListener(id, listener.type, () => {\n                        console.log(`${id} ${listener.type}: ${JSON.stringify(this.actions)}`);\n                        listener.handler();\n                    });\n                else\n                    this.addListener(id, listener.type, listener.handler);\n            }\n        }\n    }\n    addListener(id, type, handler) {\n        const listeners = this.EventListeners;\n        if (!listeners[id])\n            listeners[id] = {};\n        const elem = this.toolbar[id];\n        if (!elem)\n            throw new Error(\"Could not find element to add listener to\");\n        const oldHandler = listeners[id][type];\n        if (oldHandler)\n            elem.removeEventListener(type, oldHandler);\n        listeners[id][type] = handler;\n        elem.addEventListener(type, handler);\n        elem.disabled = false;\n    }\n    removeAllListeners() {\n        const listeners = this.EventListeners;\n        for (const id in listeners) {\n            const elem = this.toolbar[id];\n            if (!elem)\n                throw new Error(\"Could not find element to remove listener from\");\n            elem.disabled = true;\n            for (const type in listeners[id])\n                elem.removeEventListener(type, listeners[id][type]);\n            listeners[id] = {};\n        }\n    }\n    submit(method, field) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const rawValue = field.value;\n                field.value = \"\";\n                const values = parseValues(rawValue);\n                if (values)\n                    yield this.execute(method, values);\n                return true;\n            }\n            catch (error) {\n                console.error(error);\n            }\n            return false;\n        });\n    }\n    execute(operation_1) {\n        return __awaiter(this, arguments, void 0, function* (operation, args = [], until = 0) {\n            yield this.reset();\n            this.actions.push({ oper: operation, args: args, nsteps: until });\n            if (this.DEBUG)\n                console.log(`EXEC ${until}: ${operation} ${args.join(\", \")}, ${JSON.stringify(this.actions)}`);\n            try {\n                yield this.runActionsLoop();\n                this.actions[this.actions.length - 1].nsteps = this.CurrentStep || 0;\n                if (this.DEBUG)\n                    console.log(`DONE / ${this.CurrentStep}: ${JSON.stringify(this.actions)}`);\n                this.resetListeners(false);\n            }\n            catch (reason) {\n                if (typeof reason !== \"object\" ||\n                    reason === null ||\n                    \"until\" in reason === false ||\n                    typeof reason.until !== \"number\") {\n                    console.error(reason);\n                    this.resetListeners(false);\n                    return;\n                }\n                this.actions.pop();\n                if (\"running\" in reason && typeof reason.running === \"boolean\")\n                    this.setRunning(reason.running);\n                until = reason.until;\n                if (this.DEBUG)\n                    console.log(`RERUN ${until} / ${this.CurrentStep}: ${JSON.stringify(this.actions)}`);\n                if (until <= 0 && this.actions.length > 0) {\n                    const action = this.actions.pop();\n                    (operation = action.oper),\n                        (args = action.args),\n                        (until = action.nsteps);\n                }\n                if (until > 0) {\n                    this.execute(operation, args, until);\n                }\n                else {\n                    this.reset();\n                }\n            }\n        });\n    }\n    runActionsLoop() {\n        return __awaiter(this, void 0, void 0, function* () {\n            var _a;\n            for (let nAction = 0; nAction < this.actions.length; nAction++) {\n                this.resetListeners(true);\n                const action = this.actions[nAction];\n                this.CurrentAction = nAction;\n                this.CurrentStep = 0;\n                const messageArr = action.oper.match(/[A-Za-z][a-z]*/g) || [];\n                let message = messageArr.join(\" \");\n                message = `${message.charAt(0).toUpperCase() + message.substring(1)} ${action.args.join(\", \")}`;\n                if (this.DEBUG)\n                    console.log(`CALL ${nAction}: ${message}, ${JSON.stringify(this.actions)}`);\n                (_a = this.Info.title) === null || _a === void 0 ? void 0 : _a.text(message);\n                yield this.pause(\"\");\n                if (!(action.oper in this &&\n                    typeof this[action.oper] === \"function\"))\n                    throw new Error(\"Cannot call action that does not exist\");\n                yield this[action.oper](...action.args);\n            }\n        });\n    }\n    pause(message, ...args) {\n        const title = this.getMessage(message, ...args);\n        if (this.DEBUG)\n            console.log(`${this.CurrentStep}. Doing: ${title} (running: ${this.isRunning()}), ${JSON.stringify(this.actions)}`);\n        if (this.State.resetting)\n            return null;\n        if (title !== null && this.Info.body !== undefined) {\n            this.Info.body.text(title);\n        }\n        return new Promise((resolve, reject) => {\n            const action = this.actions[this.CurrentAction];\n            if (action.nsteps != null && this.CurrentStep < action.nsteps) {\n                this.fastForward(resolve, reject);\n            }\n            else {\n                let runnerTimer = undefined;\n                for (const id in this.$AsyncListeners) {\n                    const listener = this.$AsyncListeners[id];\n                    this.addListener(id, listener.type, () => {\n                        clearTimeout(runnerTimer);\n                        listener.handler(resolve, reject);\n                    });\n                }\n                if (this.isRunning()) {\n                    this.setStatus(\"running\");\n                    runnerTimer = setTimeout(() => this.stepForward(resolve, reject), this.getAnimationSpeed() * 1.1);\n                }\n            }\n        });\n    }\n    getMessage(message, ...args) {\n        if (Array.isArray(message))\n            [message, ...args] = [...message, ...args];\n        if (typeof message !== \"string\") {\n            if (args.length > 0)\n                console.error(\"Unknown message:\", message, ...args);\n            return message;\n        }\n        if (!message)\n            return args.join(\"\\n\");\n        let title = this.messages || this.constructor.messages || {};\n        const keys = message.split(\".\");\n        if (!(keys[0] in title))\n            return [message, ...args].join(\"\\n\");\n        for (const key of keys) {\n            if (!(typeof title === \"object\" && key in title)) {\n                console.error(\"Unknown message:\", message, ...args);\n                return [message, ...args].join(\"\\n\");\n            }\n            title = title[key];\n        }\n        if (typeof title === \"function\")\n            title = title(...args);\n        if (Array.isArray(title))\n            title = title.join(\"\\n\");\n        if (typeof title === \"object\") {\n            console.error(\"Unknown message:\", message, ...args);\n            return [message, ...args].join(\"\\n\");\n        }\n        if (title === \"\")\n            title = NBSP;\n        return title;\n    }\n    stepForward(resolve, reject) {\n        this.CurrentStep++;\n        this.State.animating = true;\n        resolve(undefined);\n    }\n    fastForward(resolve, reject) {\n        const action = this.actions[this.CurrentAction];\n        if (this.CurrentStep >= action.nsteps) {\n            action.nsteps = this.CurrentStep;\n        }\n        this.CurrentStep++;\n        this.State.animating = false;\n        if (this.DEBUG)\n            setTimeout(resolve, 10);\n        else\n            resolve(undefined);\n    }\n    isRunning() {\n        var _a;\n        return ((_a = this.toolbar.toggleRunner) === null || _a === void 0 ? void 0 : _a.classList.contains(\"selected\")) || false;\n    }\n    setRunning(running) {\n        var _a;\n        const classes = (_a = this.toolbar.toggleRunner) === null || _a === void 0 ? void 0 : _a.classList;\n        if (classes === undefined)\n            throw new Error(\"Can not access toggleRunner\");\n        if (running)\n            classes.add(\"selected\");\n        else\n            classes.remove(\"selected\");\n        return this;\n    }\n    toggleRunner() {\n        return this.setRunning(!this.isRunning());\n    }\n    loadCookies() {\n        if (this.DEBUG)\n            console.log(\"Loading cookies\", document.cookie);\n        const allCookies = document.cookie.split(\";\");\n        for (const cookieName in this.$Cookies) {\n            for (const cookie of allCookies) {\n                const [cookieName0, value0] = cookie.split(\"=\", 2);\n                if (cookieName0.trim() === cookieName) {\n                    const value = decodeURIComponent(value0);\n                    this.$Cookies[cookieName].getCookie(value);\n                    break;\n                }\n            }\n        }\n    }\n    saveCookies() {\n        let expires = \"\";\n        if (this.$CookieExpireDays > 0) {\n            const exdate = new Date();\n            exdate.setDate(exdate.getDate() + this.$CookieExpireDays);\n            expires = `;expires=${exdate.toUTCString()}`;\n        }\n        for (const cookieName in this.$Cookies) {\n            const value = encodeURIComponent(this.$Cookies[cookieName].setCookie());\n            document.cookie = `${cookieName}=${value}${expires}`;\n        }\n        if (this.DEBUG)\n            console.log(\"Setting cookies\", document.cookie);\n    }\n    animate(elem, animate = true) {\n        if (this.State.animating && animate) {\n            this.setStatus(\"running\");\n            this.setStatus(\"paused\", this.getAnimationSpeed());\n            return elem.animate(this.getAnimationSpeed(), 0, \"now\");\n        }\n        else {\n            return elem;\n        }\n    }\n}\nfunction normalizeNumber(input) {\n    input = input.trim();\n    return input === \"\" || isNaN(Number(input)) ? input : Number(input);\n}\nfunction parseValues(values) {\n    if (!values)\n        return [];\n    if (typeof values === \"string\") {\n        values = values.trim().split(/\\s+/);\n    }\n    return values.map((v) => normalizeNumber(v));\n}\nfunction addReturnSubmit(field, allowed, action) {\n    allowed =\n        allowed === \"int\"\n            ? \"0-9\"\n            : allowed === \"int+\"\n                ? \"0-9 \"\n                : allowed === \"float\"\n                    ? \"-.0-9\"\n                    : allowed === \"float+\"\n                        ? \"-.0-9 \"\n                        : allowed === \"ALPHA\"\n                            ? \"A-Z\"\n                            : allowed === \"ALPHA+\"\n                                ? \"A-Z \"\n                                : allowed === \"alpha\"\n                                    ? \"a-zA-Z\"\n                                    : allowed === \"alpha+\"\n                                        ? \"a-zA-Z \"\n                                        : allowed === \"ALPHANUM\"\n                                            ? \"A-Z0-9\"\n                                            : allowed === \"ALPHANUM+\"\n                                                ? \"A-Z0-9 \"\n                                                : allowed === \"alphanum\"\n                                                    ? \"a-zA-Z0-9\"\n                                                    : allowed === \"alphanum+\"\n                                                        ? \"a-zA-Z0-9 \"\n                                                        : allowed;\n    const regex = new RegExp(`[^${allowed}]`, \"g\");\n    const transform = allowed === allowed.toUpperCase()\n        ? (s) => s.toUpperCase()\n        : allowed === allowed.toLowerCase()\n            ? (s) => s.toLowerCase()\n            : (s) => s;\n    field.oninput = (event) => {\n        let pos = field.selectionStart || 0;\n        let value = transform(field.value);\n        if (regex.test(value)) {\n            value = value.replace(regex, \"\");\n            pos--;\n        }\n        field.value = value;\n        field.setSelectionRange(pos, pos);\n    };\n    if (action) {\n        field.onkeydown = (event) => {\n            if (event.key === \"Enter\") {\n                event.preventDefault();\n                action();\n            }\n        };\n    }\n}\nfunction updateDefault(obj, defaultObj, override = false) {\n    for (const key in defaultObj) {\n        if (!(key in obj)) {\n            obj[key] = defaultObj[key];\n        }\n        else if (typeof obj[key] === \"object\" &&\n            obj[key] !== null &&\n            typeof defaultObj[key] === \"object\" &&\n            defaultObj[key] !== null) {\n            updateDefault(obj[key], defaultObj[key], override);\n        }\n        else if (override) {\n            obj[key] = defaultObj[key];\n        }\n    }\n}\nfunction modulo(n, d) {\n    const rem = n % d;\n    return rem < 0 ? rem + d : rem;\n}\nconst NBSP = \"\\u00A0\";\nfunction compare(a, b) {\n    if (a === NBSP)\n        a = \"\";\n    if (b === NBSP)\n        b = \"\";\n    if (isNaN(Number(a)) === isNaN(Number(b))) {\n        if (!isNaN(Number(a))) {\n            a = Number(a);\n            b = Number(b);\n        }\n        return a === b ? 0 : a < b ? -1 : 1;\n    }\n    else {\n        return isNaN(Number(a)) ? 1 : -1;\n    }\n}\n\n;// ./src/trees/BST.ts\nvar BST_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\nclass BST extends Engine {\n    constructor(containerSelector) {\n        super(containerSelector);\n        this.messages = BSTMessages;\n        this.initialValues = [];\n        this.treeRoot = null;\n        this.toolbar = this.getToolbar();\n    }\n    getToolbar() {\n        const toolbar = super.getToolbar();\n        console.log(\"Inserting new 2\");\n        toolbar.generalControls.insertAdjacentHTML(\"beforeend\", `<span class=\"formgroup\"><label>\r\n        <input class=\"showNullNodes\" type=\"checkbox\"/> Show null nodes\r\n       </label></span>`);\n        const showNullNodes = this.container.querySelector(\"input.showNullNodes\");\n        if (!showNullNodes)\n            throw new Error(\"Could not find show null nodes input\");\n        return Object.assign(Object.assign({}, toolbar), { showNullNodes });\n    }\n    initialise(initialValues = null) {\n        this.initialValues = parseValues(initialValues);\n        super.initialise();\n        return this;\n    }\n    resetAlgorithm() {\n        const _super = Object.create(null, {\n            resetAlgorithm: { get: () => super.resetAlgorithm }\n        });\n        return BST_awaiter(this, void 0, void 0, function* () {\n            yield _super.resetAlgorithm.call(this);\n            this.treeRoot = null;\n            if (this.initialValues) {\n                this.State.resetting = true;\n                yield this.insert(...this.initialValues);\n                this.State.resetting = false;\n            }\n        });\n    }\n    initToolbar() {\n        super.initToolbar();\n        this.toolbar.showNullNodes.addEventListener(\"change\", () => this.toggleNullNodes(null));\n        this.toggleNullNodes(true);\n    }\n    toggleNullNodes(show) {\n        if (show == null)\n            show = this.toolbar.showNullNodes.checked;\n        this.toolbar.showNullNodes.checked = show;\n        if (show)\n            this.Svg.addClass(\"shownullnodes\");\n        else\n            this.Svg.removeClass(\"shownullnodes\");\n        return this;\n    }\n    newNode(text) {\n        return this.Svg.binaryNode(text, ...this.getNodeStart(), this.getObjectSize(), this.getStrokeWidth());\n    }\n    resizeTree() {\n        var _a;\n        const animate = !this.State.resetting;\n        (_a = this.treeRoot) === null || _a === void 0 ? void 0 : _a.resize(...this.getTreeRoot(), this.$Svg.margin, this.getNodeSpacing(), animate ? this.$Svg.animationSpeed : 0);\n        return this;\n    }\n    insert(...values) {\n        return BST_awaiter(this, void 0, void 0, function* () {\n            for (const val of values)\n                yield this.insertOne(val);\n        });\n    }\n    find(value) {\n        return BST_awaiter(this, void 0, void 0, function* () {\n            var _a, _b;\n            if (!this.treeRoot) {\n                yield this.pause(\"general.empty\");\n                return { success: false, node: null };\n            }\n            yield this.pause(\"find.start\", value);\n            const found = yield this.findHelper(value);\n            (_a = found.node) === null || _a === void 0 ? void 0 : _a.setHighlight(true);\n            const path = found.success ? \"find.found\" : \"find.notfound\";\n            yield this.pause(path, value);\n            (_b = found.node) === null || _b === void 0 ? void 0 : _b.setHighlight(false);\n            return found;\n        });\n    }\n    findHelper(value) {\n        return BST_awaiter(this, void 0, void 0, function* () {\n            let parent = null;\n            let node = this.treeRoot;\n            const pointer = this.Svg.highlightCircle((node === null || node === void 0 ? void 0 : node.cx()) || 0, (node === null || node === void 0 ? void 0 : node.cy()) || 0, this.getObjectSize(), this.getStrokeWidth());\n            while (node) {\n                node.setHighlight(true);\n                const cmp = compare(value, node.getText());\n                if (cmp === 0) {\n                    pointer.remove();\n                    node.setHighlight(false);\n                    return { success: true, node: node };\n                }\n                const direction = cmp < 0 ? \"left\" : \"right\";\n                node.setChildHighlight(direction, true);\n                parent = node;\n                node = parent.getChild(direction);\n                if (node)\n                    pointer.setCenter(node.cx(), node.cy(), this.getAnimationSpeed());\n                yield this.pause(\"find.look\", direction);\n                parent.setChildHighlight(direction, false);\n            }\n            pointer.remove();\n            return { success: false, node: parent };\n        });\n    }\n    insertOne(value) {\n        return BST_awaiter(this, void 0, void 0, function* () {\n            var _a, _b, _c, _d, _e, _f;\n            if (!this.treeRoot) {\n                this.treeRoot = this.newNode(value);\n                yield this.pause(\"insert.newroot\", value);\n                this.resizeTree();\n                yield this.pause(undefined);\n                return { success: true, node: this.treeRoot };\n            }\n            yield this.pause(\"insert.search\", value);\n            const found = yield this.findHelper(value);\n            if (found.success) {\n                (_a = found.node) === null || _a === void 0 ? void 0 : _a.setHighlight(true);\n                yield this.pause(\"insert.exists\", found.node);\n                (_b = found.node) === null || _b === void 0 ? void 0 : _b.setHighlight(false);\n                return { success: false, node: found.node };\n            }\n            const child = this.newNode(value);\n            const cmp = compare(value, ((_c = found.node) === null || _c === void 0 ? void 0 : _c.getText()) || \"\");\n            const direction = cmp < 0 ? \"left\" : \"right\";\n            (_d = found.node) === null || _d === void 0 ? void 0 : _d.setChild(direction, child, this.getStrokeWidth());\n            child.setHighlight(true);\n            (_e = found.node) === null || _e === void 0 ? void 0 : _e.setChildHighlight(direction, true);\n            yield this.pause(\"insert.child\", value, direction);\n            (_f = found.node) === null || _f === void 0 ? void 0 : _f.setChildHighlight(direction, false);\n            child.setHighlight(false);\n            this.resizeTree();\n            yield this.pause(undefined);\n            return { success: true, node: child };\n        });\n    }\n    delete(value) {\n        return BST_awaiter(this, void 0, void 0, function* () {\n            var _a, _b, _c, _d;\n            if (!this.treeRoot) {\n                yield this.pause(\"general.empty\");\n                return null;\n            }\n            yield this.pause(\"delete.search\", value);\n            const found = yield this.findHelper(value);\n            if (!found.success) {\n                (_a = found.node) === null || _a === void 0 ? void 0 : _a.setHighlight(true);\n                yield this.pause(\"delete.notexists\", value);\n                (_b = found.node) === null || _b === void 0 ? void 0 : _b.setHighlight(false);\n                const direction = compare(value, ((_c = found.node) === null || _c === void 0 ? void 0 : _c.getText()) || \"\") < 0 ? \"left\" : \"right\";\n                return { success: false, direction: direction, parent: found.node };\n            }\n            (_d = found.node) === null || _d === void 0 ? void 0 : _d.setHighlight(true);\n            yield this.pause(\"delete.found\", value);\n            return yield this.deleteHelper(found.node);\n        });\n    }\n    deleteHelper(node) {\n        return BST_awaiter(this, void 0, void 0, function* () {\n            if (!((node === null || node === void 0 ? void 0 : node.getLeft()) && (node === null || node === void 0 ? void 0 : node.getRight()))) {\n                return yield this.deleteNode(node);\n            }\n            const pointer = this.Svg.highlightCircle(node.cx(), node.cy(), this.getObjectSize(), this.getStrokeWidth());\n            node.setHighlight(false);\n            node.addClass(\"marked\");\n            yield this.pause(\"delete.predecessor.search\", node);\n            let predecessor = node.getLeft();\n            while (true) {\n                predecessor === null || predecessor === void 0 ? void 0 : predecessor.setParentHighlight(true);\n                pointer.setCenter((predecessor === null || predecessor === void 0 ? void 0 : predecessor.cx()) || 0, (predecessor === null || predecessor === void 0 ? void 0 : predecessor.cy()) || 0, this.getAnimationSpeed());\n                yield this.pause(undefined);\n                predecessor === null || predecessor === void 0 ? void 0 : predecessor.setParentHighlight(false);\n                if (!(predecessor === null || predecessor === void 0 ? void 0 : predecessor.getRight()))\n                    break;\n                predecessor = predecessor.getRight();\n            }\n            predecessor === null || predecessor === void 0 ? void 0 : predecessor.setHighlight(true);\n            pointer.remove();\n            const newText = predecessor === null || predecessor === void 0 ? void 0 : predecessor.getText();\n            const moving = this.Svg.textCircle(newText || \"\", (predecessor === null || predecessor === void 0 ? void 0 : predecessor.cx()) || 0, (predecessor === null || predecessor === void 0 ? void 0 : predecessor.cy()) || 0, this.getObjectSize(), this.getStrokeWidth());\n            moving.addClass(\"unfilled\");\n            moving.setHighlight(true);\n            yield this.pause(\"delete.predecessor.replace\", node, predecessor);\n            moving.setCenter(node.cx(), node.cy(), this.getAnimationSpeed());\n            node.setText(\"\");\n            yield this.pause(undefined);\n            node.setText(newText || \"\");\n            moving.remove();\n            node.removeClass(\"marked\");\n            yield this.pause(\"delete.predecessor.delete\", predecessor);\n            return yield this.deleteNode(predecessor);\n        });\n    }\n    deleteNode(node) {\n        return BST_awaiter(this, void 0, void 0, function* () {\n            var _a, _b;\n            const child = (node === null || node === void 0 ? void 0 : node.getLeft()) || (node === null || node === void 0 ? void 0 : node.getRight());\n            const parent = node === null || node === void 0 ? void 0 : node.getParent();\n            if (!parent) {\n                if (!child) {\n                    this.treeRoot = null;\n                    yield this.pause(\"delete.root.singleton\", node);\n                }\n                else {\n                    this.treeRoot = child;\n                    yield this.pause(\"delete.root.onechild\", child, node);\n                }\n                node === null || node === void 0 ? void 0 : node.remove();\n                this.resizeTree();\n                yield this.pause(undefined);\n                return { success: true, direction: null, parent: null };\n            }\n            const direction = parent.getLeft() === node ? \"left\" : \"right\";\n            if (child) {\n                node === null || node === void 0 ? void 0 : node.setHighlight(false);\n                if (child === ((_a = parent.getLeft()) === null || _a === void 0 ? void 0 : _a.getLeft()))\n                    node === null || node === void 0 ? void 0 : node.dmoveCenter(-node.getSize(), -node.getSize() / 2, this.getAnimationSpeed());\n                if (child === ((_b = parent.getRight()) === null || _b === void 0 ? void 0 : _b.getRight()))\n                    node === null || node === void 0 ? void 0 : node.dmoveCenter(node.getSize(), -node.getSize() / 2, this.getAnimationSpeed());\n                parent.setChild(direction, child, this.getStrokeWidth());\n                child.setHighlight(true);\n                parent.setChildHighlight(direction, true);\n                yield this.pause(\"delete.redirect\", parent, child);\n                parent.setChildHighlight(direction, false);\n                child.setHighlight(false);\n                node === null || node === void 0 ? void 0 : node.setHighlight(true);\n                yield this.pause(\"delete.node\", node);\n            }\n            else {\n                yield this.pause(\"delete.leaf\", node);\n            }\n            node === null || node === void 0 ? void 0 : node.remove();\n            this.resizeTree();\n            yield this.pause(undefined);\n            return { success: true, direction: direction, parent: parent };\n        });\n    }\n    print() {\n        return BST_awaiter(this, void 0, void 0, function* () {\n            var _a;\n            if (!this.treeRoot) {\n                yield this.pause(\"general.empty\");\n                return;\n            }\n            const { x, y } = ((_a = this.Info.printer) === null || _a === void 0 ? void 0 : _a.bbox()) || { x: 0, y: 0 };\n            const printed = [\n                this.Svg.text(\"Printed nodes: \").addClass(\"printer\").x(x).y(y),\n            ];\n            const pointer = this.Svg.highlightCircle(...this.getNodeStart(), this.getObjectSize(), this.getStrokeWidth());\n            yield this.printHelper(this.treeRoot, pointer, printed);\n            pointer.remove();\n            yield this.pause(undefined);\n            for (const lbl of printed)\n                lbl.remove();\n        });\n    }\n    printHelper(node, pointer, printed) {\n        return BST_awaiter(this, void 0, void 0, function* () {\n            pointer.setCenter(node.cx(), node.cy(), this.getAnimationSpeed());\n            yield this.pause(undefined);\n            if (node.getLeft()) {\n                yield this.printHelper(node.getLeft(), pointer, printed);\n                pointer.setCenter(node.cx(), node.cy(), this.getAnimationSpeed());\n                yield this.pause(undefined);\n            }\n            const lbl = this.Svg.text(node.getText()).center(node.cx(), node.cy());\n            yield this.pause(undefined);\n            const last = printed[printed.length - 1];\n            const spacing = this.getNodeSpacing() / 2;\n            this.animate(lbl)\n                .cy(last.cy())\n                .x(last.bbox().x2 + spacing);\n            printed.push(lbl);\n            yield this.pause(undefined);\n            if (node.getRight()) {\n                yield this.printHelper(node.getRight(), pointer, printed);\n                this.animate(pointer);\n                pointer.setCenter(node.cx(), node.cy(), this.getAnimationSpeed());\n                yield this.pause(undefined);\n            }\n        });\n    }\n    resetHeight(node) {\n        return BST_awaiter(this, void 0, void 0, function* () {\n        });\n    }\n    doubleRotate(firstDir, node) {\n        return BST_awaiter(this, void 0, void 0, function* () {\n            const secondDir = firstDir === \"left\" ? \"right\" : \"left\";\n            const child = node.getChild(secondDir);\n            if (child === undefined || child === null)\n                throw new Error(\"Invalid B node in singleRotate\");\n            yield this.pause(\"rotate.zigzag\", child, secondDir, node, firstDir);\n            yield this.singleRotate(secondDir, child);\n            return yield this.singleRotate(firstDir, node);\n        });\n    }\n    singleRotate(firstDir, node) {\n        return BST_awaiter(this, void 0, void 0, function* () {\n            const secondDir = firstDir === \"left\" ? \"right\" : \"left\";\n            const A = node;\n            const B = A.getChild(secondDir);\n            if (B === undefined || B === null)\n                throw new Error(\"Invalid B node in singleRotate\");\n            const C = B.getChild(firstDir);\n            A.setChildHighlight(secondDir, true);\n            B === null || B === void 0 ? void 0 : B.setHighlight(true);\n            yield this.pause(\"rotate.single\", A, firstDir);\n            const parent = A.getParent();\n            if (parent) {\n                const direction = parent.getLeft() === A ? \"left\" : \"right\";\n                B === null || B === void 0 ? void 0 : B.setParent(direction, parent, this.getStrokeWidth());\n            }\n            else {\n                this.treeRoot = B;\n            }\n            A.setChild(secondDir, C, this.getStrokeWidth());\n            B.setChild(firstDir, A, this.getStrokeWidth());\n            B.setChildHighlight(firstDir, true);\n            A.setHighlight(true);\n            yield this.pause(undefined);\n            this.resizeTree();\n            yield this.pause(undefined);\n            B.setChildHighlight(firstDir, false);\n            A.setHighlight(false);\n            yield this.resetHeight(A);\n            yield this.resetHeight(B);\n            return B;\n        });\n    }\n}\nconst BSTMessages = {\n    general: {\n        empty: \"Tree is empty\",\n    },\n    find: {\n        start: (value) => `Searching for ${value}`,\n        found: (value) => `Found ${value}`,\n        notfound: (value) => `Did not find ${value}`,\n        look: (direction) => `Look into ${direction} child`,\n    },\n    insert: {\n        newroot: (value) => `Create a new tree root ${value}`,\n        search: (value) => `Searching for node to insert ${value}`,\n        exists: (node) => `There is already a node ${node}`,\n        child: (value, direction) => `Insert ${value} as ${direction} child`,\n    },\n    delete: {\n        search: (value) => `Searching for node to delete ${value}`,\n        notexists: (value) => `There is no node ${value}`,\n        found: (value) => `Found node ${value} to delete`,\n        predecessor: {\n            search: (node) => `Finding the predecessor node of ${node}`,\n            replace: (node, predecessor) => `Replace the value of ${node} with ${predecessor}`,\n            delete: (predecessor) => `Now delete the predecessor ${predecessor}`,\n        },\n        redirect: (parent, child) => `Redirect parent ${parent} to child ${child}`,\n        root: {\n            singleton: (root) => `Remove the root node ${root}`,\n            onechild: (child, root) => [\n                `Make the child ${child} the new root,`,\n                `and remove node ${root}`,\n            ],\n        },\n        node: (node) => `Remove node ${node}`,\n        leaf: (node) => `Remove leaf node ${node}`,\n    },\n    rotate: {\n        single: (node, dir) => `Rotate ${node} ${dir}`,\n        zigzag: (child, dir1, node, dir2) => `Zig-zag: Rotate ${child} ${dir1}, then rotate ${node} ${dir2}`,\n    },\n};\n\n;// ./src/trees/AVL.ts\nvar AVL_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n\nclass AVL extends BST {\n    constructor() {\n        super(...arguments);\n        this.messages = updateDefault(AVLmessages, BSTMessages);\n        this.treeRoot = null;\n        this.pointer = null;\n    }\n    newNode(text) {\n        return this.Svg.avlNode(text, ...this.getNodeStart(), this.getObjectSize(), this.getStrokeWidth());\n    }\n    getHeight(node) {\n        return node ? node.getHeight() : 0;\n    }\n    insertOne(value) {\n        const _super = Object.create(null, {\n            insertOne: { get: () => super.insertOne }\n        });\n        return AVL_awaiter(this, void 0, void 0, function* () {\n            const result = yield _super.insertOne.call(this, value);\n            if (result.success && result.node) {\n                result.node.updateHeightPosition();\n                yield this.updateHeights(result.node, undefined);\n                yield this.updateHeightPositions();\n            }\n            return result;\n        });\n    }\n    delete(value) {\n        const _super = Object.create(null, {\n            delete: { get: () => super.delete }\n        });\n        return AVL_awaiter(this, void 0, void 0, function* () {\n            const result = yield _super.delete.call(this, value);\n            if (result === null || result === void 0 ? void 0 : result.success) {\n                if (result.parent) {\n                    yield this.updateHeights(result.parent, result.direction);\n                }\n                yield this.updateHeightPositions();\n            }\n            return result;\n        });\n    }\n    updateHeightPositions() {\n        return AVL_awaiter(this, void 0, void 0, function* () {\n            this.Svg.find(\"g\").forEach((node) => {\n                if (node instanceof AVLNode)\n                    node.updateHeightPosition();\n            });\n        });\n    }\n    updateHeights(node, fromchild) {\n        return AVL_awaiter(this, void 0, void 0, function* () {\n            const child = (fromchild && node.getChild(fromchild)) || node;\n            this.pointer = this.Svg.highlightCircle(child.cx(), child.cy(), this.getObjectSize(), this.getStrokeWidth());\n            while (node) {\n                this.pointer.setCenter(node.cx(), node.cy(), this.getAnimationSpeed());\n                yield this.pause(\"node.updateHeight\");\n                const leftHeight = this.getHeight(node.getLeft()), rightHeight = this.getHeight(node.getRight());\n                const height = 1 + Math.max(leftHeight, rightHeight);\n                if (height !== this.getHeight(node)) {\n                    node.setHeightHighlight(true);\n                    node.setHeight(height);\n                    yield this.pause(undefined);\n                    node.setHeightHighlight(false);\n                }\n                node = yield this.rebalance(node);\n                node = node.getParent();\n            }\n            this.pointer.remove();\n        });\n    }\n    rebalance(node) {\n        return AVL_awaiter(this, void 0, void 0, function* () {\n            var _a;\n            const leftHeight = this.getHeight(node.getLeft()), rightHeight = this.getHeight(node.getRight());\n            if (Math.abs(leftHeight - rightHeight) <= 1)\n                return node;\n            yield this.pause(\"node.unbalanced\");\n            const left = leftHeight < rightHeight ? \"left\" : \"right\";\n            const right = left === \"left\" ? \"right\" : \"left\";\n            const child = node.getChild(right);\n            const childLeft = this.getHeight(child === null || child === void 0 ? void 0 : child.getChild(left)), childRight = this.getHeight(child === null || child === void 0 ? void 0 : child.getChild(right));\n            (_a = this.pointer) === null || _a === void 0 ? void 0 : _a.hide();\n            if (childLeft <= childRight) {\n                node = (yield this.singleRotate(left, node));\n            }\n            else {\n                node = (yield this.doubleRotate(left, node));\n            }\n            this.pointer = this.Svg.highlightCircle(node.cx(), node.cy(), this.getObjectSize(), this.getStrokeWidth());\n            yield this.pause(\"node.balanced\");\n            return node;\n        });\n    }\n    resetHeight(node) {\n        return AVL_awaiter(this, void 0, void 0, function* () {\n            const height = 1 +\n                Math.max(this.getHeight(node.getLeft()), this.getHeight(node.getRight()));\n            if (height !== this.getHeight(node)) {\n                node.setHeight(height);\n            }\n        });\n    }\n}\nconst AVLmessages = {\n    node: {\n        updateHeight: \"Update node heights\",\n        unbalanced: \"Node is unbalanced!\",\n        balanced: \"Node is now balanced\",\n    },\n};\n\n;// ./src/trees/BTree.ts\nvar BTree_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\nclass BTree extends Engine {\n    constructor(containerSelector) {\n        super(containerSelector);\n        this.initialValues = [];\n        this.treeRoot = null;\n        this.messages = Object.assign(Object.assign(Object.assign({}, BSTMessages), BTreeMessages), { find: Object.assign(Object.assign({}, BSTMessages.find), BTreeMessages.find), insert: Object.assign(Object.assign({}, BSTMessages.insert), BTreeMessages.insert), delete: Object.assign(Object.assign({}, BSTMessages.delete), BTreeMessages.delete) });\n        this.toolbar = this.getToolbar();\n    }\n    getToolbar() {\n        const toolbar = super.getToolbar();\n        toolbar.algorithmControls.insertAdjacentHTML(\"beforeend\", `<span class=\"formgroup\"><label>\r\n        Max degree:\r\n        <select class=\"maxDegree disableWhenRunning\">\r\n          <option value=\"3\">2/3-tree</option>\r\n          <option value=\"4\">2/3/4-tree</option>\r\n          <option value=\"5\">Max degree 5</option>\r\n          <option value=\"6\">Max degree 6</option>\r\n        </select>\r\n      </label></span>`);\n        const maxDegree = this.container.querySelector(\"select.maxDegree\");\n        if (!maxDegree)\n            throw new Error(\"Could not find max degree select element\");\n        return Object.assign(Object.assign({}, toolbar), { maxDegree });\n    }\n    initialise(initialValues = null) {\n        this.initialValues = parseValues(initialValues);\n        super.initialise();\n    }\n    resetAlgorithm() {\n        const _super = Object.create(null, {\n            resetAlgorithm: { get: () => super.resetAlgorithm }\n        });\n        return BTree_awaiter(this, void 0, void 0, function* () {\n            yield _super.resetAlgorithm.call(this);\n            this.treeRoot = null;\n            if (this.initialValues) {\n                this.State.resetting = true;\n                yield this.insert(...this.initialValues);\n                this.State.resetting = false;\n            }\n        });\n    }\n    initToolbar() {\n        var _a;\n        super.initToolbar();\n        (_a = this.toolbar.maxDegree) === null || _a === void 0 ? void 0 : _a.addEventListener(\"change\", () => this.confirmResetAll());\n    }\n    getMaxDegree() {\n        var _a;\n        return parseInt(((_a = this.toolbar.maxDegree) === null || _a === void 0 ? void 0 : _a.value) || \"0\");\n    }\n    getMaxKeys() {\n        return this.getMaxDegree() - 1;\n    }\n    getMinKeys() {\n        return Math.floor((this.getMaxDegree() + 1) / 2) - 1;\n    }\n    getSplitIndex() {\n        return Math.floor((this.getMaxDegree() - 1) / 2);\n    }\n    resizeTree(svgMargin, nodeSpacing) {\n        var _a;\n        const animate = !this.State.resetting;\n        (_a = this.treeRoot) === null || _a === void 0 ? void 0 : _a.resize(...this.getTreeRoot(), svgMargin, nodeSpacing, animate ? this.getAnimationSpeed() : 0);\n    }\n    insert(...values) {\n        return BTree_awaiter(this, void 0, void 0, function* () {\n            for (const val of values)\n                yield this.insertOne(val);\n        });\n    }\n    find(value) {\n        return BTree_awaiter(this, void 0, void 0, function* () {\n            var _a, _b;\n            if (!this.treeRoot) {\n                yield this.pause(\"general.empty\");\n                return;\n            }\n            yield this.pause(\"find.start\", value);\n            const found = yield this.findHelper(value);\n            (_a = found.node) === null || _a === void 0 ? void 0 : _a.setHighlight(true);\n            const path = found.success ? \"find.found\" : \"find.notfound\";\n            yield this.pause(path, value);\n            (_b = found.node) === null || _b === void 0 ? void 0 : _b.setHighlight(false);\n        });\n    }\n    findHelper(value_1) {\n        return BTree_awaiter(this, arguments, void 0, function* (value, findLeaf = false) {\n            let parent = null;\n            let node = this.treeRoot;\n            const pointer = this.Svg.highlightCircle(...this.getNodeStart(), this.getObjectSize(), this.getStrokeWidth());\n            while (node) {\n                pointer.setCenter(node.getCX(0, this.getObjectSize()), node.cy(), this.getAnimationSpeed());\n                node.setHighlight(true);\n                yield this.pause(undefined);\n                let i = 0;\n                let cmpStr = String(value);\n                while (i < node.numValues()) {\n                    const txt = node.getText(i);\n                    const cmp = compare(value, txt);\n                    if (cmp === 0) {\n                        cmpStr = `${txt} = ${value}`;\n                        break;\n                    }\n                    else if (cmp < 0) {\n                        cmpStr = `${cmpStr} < ${txt}`;\n                        break;\n                    }\n                    cmpStr = `${txt} < ${value}`;\n                    i++;\n                }\n                const found = i < node.numValues() && compare(value, node.getText(i)) === 0;\n                pointer.setCenter(node.getCX(i - (found ? 0 : 0.5), this.getObjectSize()), node.cy(), this.getAnimationSpeed());\n                if (node.isLeaf() || (found && !findLeaf)) {\n                    yield this.pause(cmpStr);\n                    pointer.remove();\n                    node.setHighlight(false);\n                    return { success: found, node: node, i: i };\n                }\n                if (found)\n                    i++;\n                yield this.pause(`${cmpStr}: ${this.getMessage(\"node.lookNthChild\", this.getOrdinal(i, node.numChildren()))}`);\n                node.setHighlight(false);\n                parent = node;\n                node = parent.getChild(i);\n            }\n            pointer.remove();\n            return { success: false, node: parent, i: null };\n        });\n    }\n    insertOne(value) {\n        return BTree_awaiter(this, void 0, void 0, function* () {\n            if (this.treeRoot) {\n                yield this.insertBottomup(value);\n            }\n            else {\n                this.treeRoot = this.Svg.bTreeNode(true, 1, ...this.getNodeStart(), this.getObjectSize(), this.getStrokeWidth());\n                this.treeRoot.setText(0, String(value));\n                yield this.pause(\"insert.newroot\", value);\n                this.resizeTree(this.$Svg.margin, this.getNodeSpacing());\n                yield this.pause(undefined);\n            }\n        });\n    }\n    insertBottomup(value) {\n        return BTree_awaiter(this, void 0, void 0, function* () {\n            yield this.pause(\"insert.search\", value);\n            const found = yield this.findHelper(value);\n            const node = found.node;\n            if (!node)\n                return;\n            node.setHighlight(true);\n            if (found.success) {\n                yield this.pause(\"insert.exists\", found.node);\n                node.setHighlight(false);\n            }\n            else {\n                node.insertValue(found.i || 0, String(value), this.getObjectSize(), this.getStrokeWidth());\n                this.resizeTree(this.$Svg.margin, this.getNodeSpacing());\n                yield this.pause(\"insert.nth\", value, this.getOrdinal(found.i || 0, node === null || node === void 0 ? void 0 : node.numValues()));\n                node === null || node === void 0 ? void 0 : node.setHighlight(false);\n                yield this.insertRepair(node);\n                yield this.pause(undefined);\n            }\n        });\n    }\n    insertRepair(node) {\n        return BTree_awaiter(this, void 0, void 0, function* () {\n            if (node.numValues() > this.getMaxKeys()) {\n                if (!node.getParent()) {\n                    this.treeRoot = yield this.split(node);\n                }\n                else {\n                    const newNode = yield this.split(node);\n                    yield this.insertRepair(newNode);\n                }\n            }\n        });\n    }\n    split(node) {\n        return BTree_awaiter(this, void 0, void 0, function* () {\n            node.setHighlight(true);\n            yield this.pause(\"node.split\", node);\n            const parent = node.getParent();\n            const parentIndex = node.getParentIndex();\n            const risingValue = node.getText(this.getSplitIndex());\n            const rightSplit = this.getSplitIndex() + 1;\n            const risingX = node.getCX(rightSplit - 1, this.getObjectSize());\n            const risingNode = this.Svg.bTreeNode(false, 1, risingX, node.cy(), this.getObjectSize(), this.getStrokeWidth());\n            risingNode.setHighlight(true);\n            risingNode.setText(0, risingValue);\n            const rightValues = node.numValues() - rightSplit;\n            const rightX = node.getCX(rightSplit + rightValues / 2 - 0.5, this.getObjectSize());\n            const rightNode = this.Svg.bTreeNode(node.isLeaf(), rightValues, rightX, node.cy(), this.getObjectSize(), this.getStrokeWidth());\n            rightNode.setHighlight(true);\n            for (let i = rightSplit; i < node.numValues(); i++) {\n                const j = i - rightSplit;\n                rightNode.setText(j, node.getText(i));\n            }\n            if (!node.isLeaf()) {\n                for (let i = rightSplit; i < node.numChildren(); i++) {\n                    const j = i - rightSplit;\n                    rightNode.setChild(j, node.getChild(i), this.getStrokeWidth());\n                }\n            }\n            node.setNumValues(this.getSplitIndex(), this.getObjectSize(), this.getStrokeWidth());\n            risingNode.setChild(0, node, this.getStrokeWidth());\n            risingNode.setChild(1, rightNode, this.getStrokeWidth());\n            if (parent && parentIndex !== null) {\n                parent.setChild(parentIndex, risingNode, this.getStrokeWidth());\n                yield this.pause(undefined);\n                risingNode.setCenter(parent.getCX(parentIndex - 0.5, this.getObjectSize()), parent.cy(), this.getAnimationSpeed());\n                node.setHighlight(false);\n                rightNode.setHighlight(false);\n                yield this.pause(undefined);\n                parent.insertValue(parentIndex, risingValue, this.getObjectSize(), this.getStrokeWidth());\n                parent.setChild(parentIndex, node, this.getStrokeWidth());\n                parent.setChild(parentIndex + 1, rightNode, this.getStrokeWidth());\n                risingNode.remove();\n                this.resizeTree(this.$Svg.margin, this.getNodeSpacing());\n                return parent;\n            }\n            this.treeRoot = risingNode;\n            this.resizeTree(this.$Svg.margin, this.getNodeSpacing());\n            this.treeRoot.setHighlight(false);\n            node.setHighlight(false);\n            rightNode.setHighlight(false);\n            return this.treeRoot;\n        });\n    }\n    getOrdinal(i, n) {\n        if (n === 1) {\n            return \"only\";\n        }\n        else if (n <= 3) {\n            return i === 0 ? \"left\" : i === n - 1 ? \"right\" : \"middle\";\n        }\n        else {\n            return i === 0\n                ? \"first\"\n                : i === 1\n                    ? \"second\"\n                    : i === n - 1\n                        ? \"last\"\n                        : `${i}rd`;\n        }\n    }\n    print() {\n        return BTree_awaiter(this, void 0, void 0, function* () {\n            if (!this.treeRoot) {\n                yield this.pause(\"general.empty\");\n                return;\n            }\n            if (!this.Info.printer)\n                throw new Error(\"No info printer\");\n            const { x, y } = this.Info.printer.bbox();\n            const printed = [\n                this.Svg.text(\"Printed nodes: \").addClass(\"printer\").x(x).y(y),\n            ];\n            const pointer = this.Svg.highlightCircle(...this.getNodeStart(), this.getObjectSize(), this.getStrokeWidth());\n            yield this.printHelper(this.treeRoot, pointer, printed);\n            pointer.remove();\n            yield this.pause(undefined);\n            for (const lbl of printed)\n                lbl.remove();\n        });\n    }\n    printHelper(node, pointer, printed) {\n        return BTree_awaiter(this, void 0, void 0, function* () {\n            if (node.isLeaf()) {\n                for (let i = 0; i < node.numValues(); i++) {\n                    pointer.setCenter(node.getCX(i, this.getObjectSize()), node.cy(), this.getAnimationSpeed());\n                    yield this.printOneLabel(node, i, printed);\n                }\n            }\n            else {\n                for (let i = 0; i < node.numChildren(); i++) {\n                    pointer.setCenter(node.getCX(i - 0.5, this.getObjectSize()), Number(node.y()) + Number(node.height()), this.getAnimationSpeed());\n                    yield this.pause(undefined);\n                    yield this.printHelper(node.getChild(i), pointer, printed);\n                    if (i < node.numValues()) {\n                        pointer.setCenter(node.getCX(i, this.getObjectSize()), node.cy(), this.getAnimationSpeed());\n                        yield this.printOneLabel(node, i, printed);\n                    }\n                    else {\n                        pointer.setCenter(node.getCX(i - 0.5, this.getObjectSize()), node.cy(), this.getAnimationSpeed());\n                        yield this.pause(undefined);\n                    }\n                }\n            }\n        });\n    }\n    printOneLabel(node, i, printed) {\n        return BTree_awaiter(this, void 0, void 0, function* () {\n            const lbl = this.Svg.text(node.getText(i)).center(node.getCX(i, this.getObjectSize()), node.cy());\n            yield this.pause(undefined);\n            const last = printed[printed.length - 1];\n            const spacing = this.getNodeSpacing() / 2;\n            this.animate(lbl)\n                .cy(last.cy())\n                .x(last.bbox().x2 + spacing);\n            printed.push(lbl);\n            yield this.pause(undefined);\n        });\n    }\n    delete(value) {\n        return BTree_awaiter(this, void 0, void 0, function* () {\n            var _a, _b, _c, _d, _e;\n            if (!this.treeRoot) {\n                yield this.pause(\"general.empty\");\n                return;\n            }\n            yield this.pause(\"delete.search\", value);\n            const found = yield this.findHelper(value);\n            if (!found.success) {\n                (_a = found.node) === null || _a === void 0 ? void 0 : _a.setHighlight(true);\n                yield this.pause(\"delete.notexists\", value);\n                (_b = found.node) === null || _b === void 0 ? void 0 : _b.setHighlight(false);\n                return;\n            }\n            (_c = found.node) === null || _c === void 0 ? void 0 : _c.setHighlight(true);\n            yield this.pause(\"delete.found\", value);\n            (_d = found.node) === null || _d === void 0 ? void 0 : _d.setHighlight(false);\n            if ((_e = found.node) === null || _e === void 0 ? void 0 : _e.isLeaf()) {\n                yield this.deleteLeaf(found.node, found.i || 0);\n            }\n            else {\n                yield this.deleteNonleaf(found.node, found.i || 0);\n            }\n            if (this.treeRoot.numValues() === 0) {\n                this.treeRoot.setHighlight(true);\n                yield this.pause(\"delete.root.empty\");\n                const newRoot = this.treeRoot.isLeaf() ? null : this.treeRoot.getLeft();\n                this.treeRoot.remove();\n                this.treeRoot = newRoot;\n                this.resizeTree(this.$Svg.margin, this.getNodeSpacing());\n            }\n        });\n    }\n    deleteLeaf(node, i) {\n        return BTree_awaiter(this, void 0, void 0, function* () {\n            node.setHighlight(true);\n            yield this.pause(\"delete.leaf.nth\", node, this.getOrdinal(i, node.numValues()));\n            node.deleteValue(i, this.getObjectSize(), this.getStrokeWidth());\n            this.resizeTree(this.$Svg.margin, this.getNodeSpacing());\n            node.setHighlight(false);\n            yield this.repairAfterDelete(node);\n        });\n    }\n    deleteNonleaf(node, i) {\n        return BTree_awaiter(this, void 0, void 0, function* () {\n            node.addClass(\"marked\");\n            const pointer = this.Svg.highlightCircle(node.getCX(i, this.getObjectSize()), node.cy(), this.getObjectSize(), this.getStrokeWidth());\n            yield this.pause(\"find.predecessor\", node.getText(i));\n            let maxNode = node.getChild(i);\n            let j;\n            while (true) {\n                j = ((maxNode === null || maxNode === void 0 ? void 0 : maxNode.numValues()) || 0) - 1;\n                pointer.setCenter((maxNode === null || maxNode === void 0 ? void 0 : maxNode.getCX(j, this.getObjectSize())) || 0, (maxNode === null || maxNode === void 0 ? void 0 : maxNode.cy()) || 0, this.getAnimationSpeed());\n                yield this.pause(undefined);\n                if (maxNode === null || maxNode === void 0 ? void 0 : maxNode.isLeaf())\n                    break;\n                maxNode = (maxNode === null || maxNode === void 0 ? void 0 : maxNode.getRight()) || null;\n            }\n            const maxValue = maxNode.getText(j);\n            const risingNode = this.Svg.bTreeNode(false, 1, maxNode.getCX(j, this.getObjectSize()), maxNode.cy(), this.getObjectSize(), this.getStrokeWidth());\n            risingNode.setHighlight(true);\n            risingNode.setText(0, maxValue);\n            yield this.pause(\"delete.replace\", node.getText(i), maxValue);\n            pointer.remove();\n            risingNode.setCenter(node.getCX(i, this.getObjectSize()), node.cy(), this.getAnimationSpeed());\n            node.setText(i, \"\");\n            yield this.pause(undefined);\n            node.setText(i, maxValue);\n            risingNode.remove();\n            node.removeClass(\"marked\");\n            maxNode.setHighlight(true);\n            yield this.pause(\"delete.leaf.value\", maxValue, maxNode);\n            yield this.deleteLeaf(maxNode, j);\n        });\n    }\n    repairAfterDelete(node) {\n        return BTree_awaiter(this, void 0, void 0, function* () {\n            if (node.numValues() >= this.getMinKeys())\n                return;\n            const parent = node.getParent();\n            if (!parent)\n                return;\n            node.setHighlight(true);\n            yield this.pause(\"node.tooFew\", node);\n            const i = node.getParentIndex() || 0;\n            if (i > 0 &&\n                parent.getChild(i - 1) !== null &&\n                parent.getChild(i - 1).numValues() > this.getMinKeys()) {\n                yield this.stealFromLeft(node, i);\n            }\n            else if (i < parent.numValues() &&\n                parent.getChild(i + 1) !== null &&\n                parent.getChild(i + 1).numValues() > this.getMinKeys()) {\n                yield this.stealFromRight(node, i);\n            }\n            else if (i < parent.numChildren() - 1) {\n                const nextNode = yield this.mergeRight(node);\n                yield this.repairAfterDelete(nextNode.getParent());\n            }\n            else {\n                const nextNode = yield this.mergeRight(parent.getChild(i - 1));\n                yield this.repairAfterDelete(nextNode.getParent());\n            }\n        });\n    }\n    mergeRight(node) {\n        return BTree_awaiter(this, void 0, void 0, function* () {\n            const parent = node.getParent();\n            const parentIndex = node.getParentIndex();\n            if (!parent || parentIndex === null)\n                throw new Error(\"Invalid parent\");\n            const parentValue = parent === null || parent === void 0 ? void 0 : parent.getText(parentIndex);\n            const rightSib = parent.getChild(parentIndex + 1);\n            node.setHighlight(true);\n            parent.setHighlight(true);\n            rightSib === null || rightSib === void 0 ? void 0 : rightSib.setHighlight(true);\n            yield this.pause(\"node.mergeRight\", node, parentValue, rightSib);\n            const sinkingNode = this.Svg.bTreeNode(false, 1, parent.getCX(parentIndex, this.getObjectSize()), parent.cy(), this.getObjectSize(), this.getStrokeWidth());\n            sinkingNode.setHighlight(true);\n            sinkingNode.setText(0, parentValue);\n            parent.setText(parentIndex, \"\");\n            const sinkingX = (Number(node.x()) + Number(node.width()) + Number(rightSib === null || rightSib === void 0 ? void 0 : rightSib.x())) / 2;\n            sinkingNode.setCenter(sinkingX, node.cy(), this.getAnimationSpeed());\n            node.setCenter(sinkingX - (this.getObjectSize() + Number(node.width())) / 2, node.cy(), this.getAnimationSpeed());\n            rightSib === null || rightSib === void 0 ? void 0 : rightSib.setCenter(sinkingX + (this.getObjectSize() + Number(rightSib.width())) / 2, node.cy(), this.getAnimationSpeed());\n            yield this.pause(undefined);\n            const nodeSize = node.numValues();\n            const textsToInsert = [parentValue].concat((rightSib === null || rightSib === void 0 ? void 0 : rightSib.getTexts()) || []);\n            node.setNumValues(nodeSize + textsToInsert.length, this.getObjectSize(), this.getStrokeWidth());\n            for (let i = 0; i < textsToInsert.length; i++) {\n                node.setText(nodeSize + i, textsToInsert[i]);\n                if (!node.isLeaf()) {\n                    node.setChild(nodeSize + i + 1, rightSib === null || rightSib === void 0 ? void 0 : rightSib.getChild(i), this.getStrokeWidth());\n                }\n            }\n            parent.deleteValue(parentIndex, this.getObjectSize(), this.getStrokeWidth(), false);\n            sinkingNode.remove();\n            rightSib === null || rightSib === void 0 ? void 0 : rightSib.remove();\n            this.resizeTree(this.$Svg.margin, this.getNodeSpacing());\n            yield this.pause(undefined);\n            node.setHighlight(false);\n            parent.setHighlight(false);\n            return node;\n        });\n    }\n    stealFromRight(node, parentIndex) {\n        return BTree_awaiter(this, void 0, void 0, function* () {\n            const parent = node.getParent();\n            const rightSib = parent === null || parent === void 0 ? void 0 : parent.getChild(parentIndex + 1);\n            if (!parent || !rightSib)\n                throw new Error(\"Can not steal from right, missing parent or right sibling\");\n            node.setHighlight(true);\n            parent.setHighlight(true);\n            rightSib.setHighlight(true);\n            const leftValue = parent.getText(parentIndex);\n            const rightValue = rightSib.getText(0);\n            yield this.pause(\"node.steal.right\", node, leftValue, rightValue);\n            const leftNode = this.Svg.bTreeNode(false, 1, parent === null || parent === void 0 ? void 0 : parent.getCX(parentIndex, this.getObjectSize()), parent === null || parent === void 0 ? void 0 : parent.cy(), this.getObjectSize(), this.getStrokeWidth());\n            leftNode.setText(0, leftValue || \"\");\n            leftNode.setHighlight(true);\n            const rightNode = this.Svg.bTreeNode(false, 1, rightSib === null || rightSib === void 0 ? void 0 : rightSib.getCX(0, this.getObjectSize()), rightSib === null || rightSib === void 0 ? void 0 : rightSib.cy(), this.getObjectSize(), this.getStrokeWidth());\n            rightNode.setText(0, rightValue || \"\");\n            rightNode.setHighlight(true);\n            node.insertValue(node.numValues(), \"\", this.getObjectSize(), this.getStrokeWidth());\n            parent.setText(parentIndex, \"\");\n            rightSib.setText(0, \"\");\n            leftNode.setCenter(node.getCX(node.numValues() - 1, this.getObjectSize()), node.cy(), this.getAnimationSpeed());\n            rightNode.setCenter(parent.getCX(parentIndex, this.getObjectSize()), parent.cy(), this.getAnimationSpeed());\n            if (!node.isLeaf())\n                node.setChild(node.numChildren() - 1, rightSib.getChild(0), this.getStrokeWidth());\n            yield this.pause(undefined);\n            leftNode.remove();\n            rightNode.remove();\n            rightSib.deleteValue(0, this.getObjectSize(), this.getStrokeWidth());\n            parent.setText(parentIndex, rightValue);\n            node.setText(node.numValues() - 1, leftValue);\n            this.resizeTree(this.$Svg.margin, this.getNodeSpacing());\n            yield this.pause(undefined);\n            node.setHighlight(false);\n            parent.setHighlight(false);\n            rightSib.setHighlight(false);\n            return node;\n        });\n    }\n    stealFromLeft(node, parentIndex) {\n        return BTree_awaiter(this, void 0, void 0, function* () {\n            parentIndex--;\n            const parent = node.getParent();\n            const leftSib = parent === null || parent === void 0 ? void 0 : parent.getChild(parentIndex);\n            if (!parent || !leftSib)\n                throw new Error(\"Can not steal from left, missing parent or left sibling\");\n            node.setHighlight(true);\n            parent.setHighlight(true);\n            leftSib.setHighlight(true);\n            const rightValue = parent.getText(parentIndex);\n            const leftValue = leftSib.getText(leftSib.numValues() - 1);\n            yield this.pause(\"node.steal.left\", node, leftValue, rightValue);\n            const rightNode = this.Svg.bTreeNode(false, 1, parent.getCX(parentIndex, this.getObjectSize()), parent.cy(), this.getObjectSize(), this.getStrokeWidth());\n            rightNode.setText(0, rightValue);\n            rightNode.setHighlight(true);\n            const leftNode = this.Svg.bTreeNode(false, 1, leftSib.getCX(leftSib.numValues() - 1, this.getObjectSize()), leftSib.cy(), this.getObjectSize(), this.getStrokeWidth());\n            leftNode.setText(0, leftValue);\n            leftNode.setHighlight(true);\n            node.insertValue(0, \"\", this.getObjectSize(), this.getStrokeWidth(), true);\n            parent.setText(parentIndex, \"\");\n            leftSib.setText(leftSib.numValues() - 1, \"\");\n            rightNode.setCenter(node.getCX(0, this.getObjectSize()), node.cy(), this.getAnimationSpeed());\n            leftNode.setCenter(parent.getCX(parentIndex, this.getObjectSize()), parent.cy(), this.getAnimationSpeed());\n            if (!node.isLeaf())\n                node.setChild(0, leftSib.getChild(leftSib.numChildren() - 1), this.getStrokeWidth());\n            yield this.pause(undefined);\n            rightNode.remove();\n            leftNode.remove();\n            leftSib.deleteValue(leftSib.numValues() - 1, this.getObjectSize(), this.getStrokeWidth(), false);\n            parent.setText(parentIndex, leftValue);\n            node.setText(0, rightValue);\n            this.resizeTree(this.$Svg.margin, this.getNodeSpacing());\n            yield this.pause(undefined);\n            node.setHighlight(false);\n            parent.setHighlight(false);\n            leftSib.setHighlight(false);\n            return node;\n        });\n    }\n}\nconst BTreeMessages = {\n    find: {\n        predecessor: (val) => `Find the predecessor value of ${val}`,\n    },\n    insert: {\n        nth: (val, nth) => `Insert ${val} as ${nth} value in the node`,\n    },\n    delete: {\n        root: {\n            empty: \"Remove empty tree root\",\n        },\n        leaf: {\n            nth: (leaf, nth) => `Delete the ${nth} value in leaf ${leaf}`,\n            value: (val, leaf) => `Now delete ${val} in the leaf node ${leaf}`,\n        },\n        replace: (val, newVal) => `Replace the value ${val} with ${newVal}`,\n    },\n    node: {\n        lookNthChild: (nth) => `Look into ${nth} child`,\n        split: (node) => `Splitting node ${node}`,\n        tooFew: (node) => `Node ${node} has too few values`,\n        mergeRight: (node, parent, rightSib) => [\n            \"Merging nodes:\",\n            `${node} + [${parent}] + ${rightSib}`,\n        ],\n        steal: {\n            right: (node, left, right) => [\n                \"Stealing from right sibling:\",\n                `${node} ← [${left}] ← [${right}]`,\n            ],\n            left: (node, left, right) => [\n                \"Stealing from left sibling:\",\n                `[${left}] → [${right}] → ${node}`,\n            ],\n        },\n    },\n};\n\n;// ./src/trees/RedBlack.ts\nvar RedBlack_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\nclass RedBlack extends BST {\n    constructor() {\n        super(...arguments);\n        this.messages = Object.assign(Object.assign(Object.assign({}, BSTMessages), RedBlackMessages), { rotate: Object.assign(Object.assign({}, BSTMessages.rotate), RedBlackMessages.rotate) });\n    }\n    newNode(text) {\n        return super.newNode(text).addClass(\"red\");\n    }\n    insertOne(value) {\n        const _super = Object.create(null, {\n            insertOne: { get: () => super.insertOne }\n        });\n        return RedBlack_awaiter(this, void 0, void 0, function* () {\n            const result = yield _super.insertOne.call(this, value);\n            if ((result === null || result === void 0 ? void 0 : result.success) && result.node) {\n                yield this.fixDoubleRed(result.node);\n                if (this.treeRoot && this.isRed(this.treeRoot)) {\n                    yield this.pause(\"color.redRootBlack\");\n                    this.colorBlack(this.treeRoot);\n                }\n            }\n            return result;\n        });\n    }\n    fixDoubleRed(node) {\n        return RedBlack_awaiter(this, void 0, void 0, function* () {\n            let parent = node.getParent();\n            if (!parent)\n                return;\n            if (!this.isRed(parent))\n                return;\n            let grandparent = parent.getParent();\n            if (!grandparent)\n                return;\n            const pibling = parent.getSibling();\n            if (pibling && this.isRed(pibling)) {\n                node.setHighlight(true);\n                parent.setHighlight(true);\n                pibling.setHighlight(true);\n                yield this.pause(\"color.pushDownBlack\", node, parent, pibling);\n                node.setHighlight(false);\n                parent.setHighlight(false);\n                pibling.setHighlight(false);\n                this.colorBlack(pibling);\n                this.colorBlack(parent);\n                this.colorRed(grandparent);\n                yield this.pause(undefined);\n                yield this.fixDoubleRed(grandparent);\n                return;\n            }\n            let side = node.isLeftChild() ? \"left\" : \"right\";\n            let rotate = parent.isLeftChild() ? \"left\" : \"right\";\n            if (side !== rotate) {\n                node.setHighlight(true);\n                parent.setHighlight(true);\n                grandparent.setHighlight(true);\n                yield this.pause(\"rotate.parent\", node, side, rotate, parent),\n                    node.setHighlight(false);\n                parent.setHighlight(false);\n                grandparent.setHighlight(false);\n                node = (yield this.singleRotate(rotate, parent)).getChild(rotate);\n            }\n            side = node.isLeftChild() ? \"left\" : \"right\";\n            rotate = side === \"left\" ? \"right\" : \"left\";\n            parent = node.getParent();\n            grandparent = (parent === null || parent === void 0 ? void 0 : parent.getParent()) || null;\n            if (!parent || !grandparent)\n                throw new Error(\"Missing parent or grandparent\");\n            node.setHighlight(true);\n            parent.setHighlight(true);\n            grandparent === null || grandparent === void 0 ? void 0 : grandparent.setHighlight(true);\n            yield this.pause(\"rotate.grandparent\", node, side, grandparent, rotate);\n            node.setHighlight(false);\n            parent.setHighlight(false);\n            grandparent === null || grandparent === void 0 ? void 0 : grandparent.setHighlight(false);\n            this.colorBlack(parent);\n            this.colorRed(grandparent);\n            yield this.singleRotate(rotate, grandparent);\n        });\n    }\n    delete(value) {\n        const _super = Object.create(null, {\n            delete: { get: () => super.delete }\n        });\n        return RedBlack_awaiter(this, void 0, void 0, function* () {\n            const result = yield _super.delete.call(this, value);\n            if (result === null || result === void 0 ? void 0 : result.success) {\n                if (result.parent && result.direction) {\n                    yield this.fixDeleteImbalance(result.parent, result.direction);\n                }\n                if (this.treeRoot && this.isRed(this.treeRoot)) {\n                    this.colorBlack(this.treeRoot);\n                    yield this.pause(\"color.rootBlack\");\n                }\n            }\n            return result;\n        });\n    }\n    fixDeleteImbalance(parent, dir) {\n        return RedBlack_awaiter(this, void 0, void 0, function* () {\n            const child = parent.getChild(dir);\n            if (child && this.isRed(child)) {\n                this.colorBlack(child);\n                child.setHighlight(true);\n                yield this.pause(\"color.nodeBlack\", child);\n                child.setHighlight(false);\n            }\n            else if (!parent.isLeaf()) {\n                yield this.fixDoubleBlack(parent, dir);\n            }\n        });\n    }\n    fixDoubleBlack(parent, left) {\n        return RedBlack_awaiter(this, void 0, void 0, function* () {\n            const right = left === \"left\" ? \"right\" : \"left\";\n            const rightChild = parent.getChild(right);\n            const rightGrandchild = rightChild === null || rightChild === void 0 ? void 0 : rightChild.getChild(right);\n            const leftGrandchild = rightChild === null || rightChild === void 0 ? void 0 : rightChild.getChild(left);\n            parent.setHighlight(true);\n            yield this.pause(\"balancing.parentImbalanced\", parent);\n            if (rightChild && this.isRed(rightChild)) {\n                parent.setChildHighlight(right, true);\n                rightChild.setHighlight(true);\n                yield this.pause(\"rotate.redSibling\", parent, right, rightChild, left);\n                parent.setChildHighlight(right, false);\n                rightChild.setHighlight(false);\n                this.colorBlack(rightChild);\n                this.colorRed(parent);\n                yield this.singleRotate(left, parent);\n                yield this.fixDoubleBlack(parent, left);\n                return;\n            }\n            if (rightGrandchild && this.isRed(rightGrandchild)) {\n                parent.setChildHighlight(right, true);\n                rightChild === null || rightChild === void 0 ? void 0 : rightChild.setChildHighlight(right, true);\n                rightGrandchild.setHighlight(true);\n                yield this.pause(\"rotate.redDistantChild\", right, rightChild, left);\n                parent.setChildHighlight(right, false);\n                rightChild === null || rightChild === void 0 ? void 0 : rightChild.setChildHighlight(right, false);\n                rightGrandchild.setHighlight(false);\n                if (this.isBlack(parent))\n                    this.colorBlack(rightChild);\n                else\n                    this.colorRed(rightChild);\n                this.colorBlack(parent);\n                this.colorBlack(rightGrandchild);\n                yield this.singleRotate(left, parent);\n                return;\n            }\n            if (rightChild && leftGrandchild && this.isRed(leftGrandchild)) {\n                parent.setChildHighlight(right, true);\n                rightChild.setChildHighlight(left, true);\n                leftGrandchild.setHighlight(true);\n                yield this.pause(\"rotate.redCloseChild\", right, rightChild, left);\n                parent.setChildHighlight(right, false);\n                rightChild.setChildHighlight(left, false);\n                leftGrandchild.setHighlight(false);\n                this.colorRed(rightChild);\n                this.colorBlack(leftGrandchild);\n                yield this.singleRotate(right, rightChild);\n                yield this.fixDoubleBlack(parent, left);\n                return;\n            }\n            if (this.isRed(parent)) {\n                parent.setChildHighlight(right, true);\n                rightChild === null || rightChild === void 0 ? void 0 : rightChild.setHighlight(true);\n                yield this.pause(\"color.switch\", parent, right, rightChild);\n                parent.setChildHighlight(right, false);\n                rightChild === null || rightChild === void 0 ? void 0 : rightChild.setHighlight(false);\n                this.colorBlack(parent);\n                this.colorRed(rightChild);\n                return;\n            }\n            parent.setChildHighlight(right, true);\n            rightChild === null || rightChild === void 0 ? void 0 : rightChild.setHighlight(true);\n            yield this.pause(\"color.childRed\", parent, right, rightChild);\n            parent.setChildHighlight(right, false);\n            rightChild === null || rightChild === void 0 ? void 0 : rightChild.setHighlight(false);\n            this.colorRed(rightChild);\n            const grandparent = parent.getParent();\n            if (grandparent) {\n                const direction = parent === grandparent.getLeft() ? \"left\" : \"right\";\n                yield this.fixDoubleBlack(grandparent, direction);\n            }\n        });\n    }\n    isBlack(node) {\n        return !node || node.hasClass(\"black\");\n    }\n    isRed(node) {\n        return !this.isBlack(node);\n    }\n    colorBlack(node) {\n        node.addClass(\"black\");\n    }\n    colorRed(node) {\n        node.removeClass(\"black\");\n    }\n}\nconst RedBlackMessages = {\n    color: {\n        redRootBlack: \"Tree root is red: Color it black\",\n        rootBlack: \"Color the root black\",\n        nodeBlack: (n) => `Color node ${n} black`,\n        pushDownBlack: (node, parent, pibling) => [\n            `Node ${node}, parent ${parent} and parent's sibling ${pibling} are all red`,\n            \"Push blackness down from grandparent\",\n        ],\n        switch: (parent, dir, dirChild) => [\n            `Parent ${parent} is red,`,\n            `${dir} child ${dirChild} and its children are black:`,\n            \"Switch colors\",\n        ],\n        childRed: (parent, dir, dirChild) => [\n            `Parent ${parent}, ${dir} child ${dirChild} and its children are black:`,\n            `Color ${dir} child red`,\n        ],\n    },\n    balancing: {\n        parentImbalanced: (parent) => `Parent ${parent} is imbalanced`,\n    },\n    rotate: {\n        parent: (node, side, rotate, parent) => [\n            `Node ${node} is a red ${side} child of a red ${rotate} child`,\n            `Rotate parent ${parent} ${rotate}`,\n        ],\n        grandparent: (node, side, grandparent, rotate) => [\n            `Node ${node} is a red ${side} child of a red ${side} child`,\n            `Switch colors and rotate grandparent ${grandparent} ${rotate}`,\n        ],\n        redSibling: (parent, right, rightChild, left) => [\n            `Parent ${parent} is black, and its ${right} child ${rightChild} is red:`,\n            `Switch colors and rotate ${left}`,\n        ],\n        redDistantChild: (right, rightChild, left) => [\n            `${right} child ${rightChild} is black, its ${right} child is red:`,\n            `Switch colors and rotate ${left}`,\n        ],\n        redCloseChild: (right, rightChild, left) => [\n            `${right} child ${rightChild} is black, its ${left} child is red:`,\n            `Switch colors and rotate child ${right}`,\n        ],\n    },\n};\n\n;// ./src/trees/SplayTree.ts\nvar SplayTree_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\nclass SplayTree extends BST {\n    constructor() {\n        super(...arguments);\n        this.messages = Object.assign(Object.assign(Object.assign({}, BSTMessages), SplayTreeMessages), { rotate: Object.assign(Object.assign({}, BSTMessages.rotate), SplayTreeMessages.rotate), delete: Object.assign(Object.assign({}, BSTMessages.delete), SplayTreeMessages.delete) });\n    }\n    find(value) {\n        const _super = Object.create(null, {\n            find: { get: () => super.find }\n        });\n        return SplayTree_awaiter(this, void 0, void 0, function* () {\n            const found = yield _super.find.call(this, value);\n            if (found === null || found === void 0 ? void 0 : found.node) {\n                yield this.splayUp(found.node);\n            }\n            return found;\n        });\n    }\n    insertOne(value) {\n        const _super = Object.create(null, {\n            insertOne: { get: () => super.insertOne }\n        });\n        return SplayTree_awaiter(this, void 0, void 0, function* () {\n            const result = yield _super.insertOne.call(this, value);\n            if (result === null || result === void 0 ? void 0 : result.node) {\n                if (!result.success)\n                    yield this.pause(\"insert.exists\", result.node);\n                yield this.splayUp(result.node);\n            }\n            return result;\n        });\n    }\n    delete(value) {\n        return SplayTree_awaiter(this, void 0, void 0, function* () {\n            var _a;\n            if (!this.treeRoot)\n                return { success: false, direction: null, parent: null };\n            yield this.find(value);\n            if (compare(value, (_a = this.treeRoot) === null || _a === void 0 ? void 0 : _a.getText()) !== 0) {\n                yield this.pause(\"delete.notexists\", value);\n                return { success: false, parent: null, direction: null };\n            }\n            this.treeRoot.setHighlight(true);\n            yield this.pause(\"delete.root\");\n            if (!(this.treeRoot.getLeft() && this.treeRoot.getRight())) {\n                const left = this.treeRoot.getLeft() ? \"left\" : \"right\";\n                const right = left === \"left\" ? \"right\" : \"left\";\n                const child = this.treeRoot.getLeft() || this.treeRoot.getRight();\n                const newRoot = child.setHighlight(true);\n                yield this.pause(\"delete.singleChild\", right, left);\n                this.treeRoot.remove();\n                this.treeRoot = newRoot;\n                this.resizeTree();\n                yield this.pause(undefined);\n                return { success: true, parent: this.treeRoot, direction: left };\n            }\n            const right = this.treeRoot.getRight();\n            const left = this.treeRoot.getLeft();\n            this.treeRoot.remove();\n            yield this.pause(\"delete.splayLargest\");\n            let largestLeft = left;\n            largestLeft.setHighlight(true);\n            yield this.pause(undefined);\n            if (largestLeft.getRight()) {\n                while (largestLeft.getRight()) {\n                    largestLeft.setHighlight(false);\n                    largestLeft = largestLeft.getRight();\n                    largestLeft.setHighlight(true);\n                    yield this.pause(undefined);\n                }\n            }\n            largestLeft.setHighlight(false);\n            yield this.splayUp(largestLeft);\n            yield this.pause(\"delete.connectLeftRight\");\n            largestLeft.setHighlight(true);\n            yield this.pause(undefined);\n            largestLeft.setHighlight(false);\n            largestLeft.setRight(right, this.getStrokeWidth());\n            this.treeRoot = largestLeft;\n            this.resizeTree();\n            yield this.pause(undefined);\n            return { success: true, parent: this.treeRoot, direction: null };\n        });\n    }\n    splayUp(node) {\n        return SplayTree_awaiter(this, void 0, void 0, function* () {\n            if (node === this.treeRoot)\n                return;\n            node.setHighlight(true);\n            yield this.pause(\"rotate.splayUp\", node);\n            node.setHighlight(false);\n            while (node.getParent()) {\n                const parent = node.getParent();\n                const left = node.isLeftChild() ? \"left\" : \"right\";\n                const right = left === \"left\" ? \"right\" : \"left\";\n                if (!parent.getParent()) {\n                    node = yield this.singleRotate(right, parent);\n                }\n                else if (parent.isChild(right)) {\n                    node = yield this.doubleRotate(left, parent.getParent());\n                }\n                else {\n                    node = yield this.zigZig(right, parent.getParent());\n                }\n            }\n        });\n    }\n    splayHelper(node) {\n        return SplayTree_awaiter(this, void 0, void 0, function* () {\n            const parent = node.getParent();\n            if (!parent)\n                return;\n            const left = node.isLeftChild() ? \"left\" : \"right\";\n            const right = left === \"left\" ? \"right\" : \"left\";\n            if (!(parent === null || parent === void 0 ? void 0 : parent.getParent())) {\n                this.singleRotate(left, parent);\n            }\n            else if (parent.isChild(right)) {\n                this.doubleRotate(left, parent.getParent());\n                this.splayHelper(node);\n            }\n            else {\n                this.zigZig(right, parent.getParent());\n                this.splayHelper(node);\n            }\n        });\n    }\n    zigZig(left, node) {\n        return SplayTree_awaiter(this, void 0, void 0, function* () {\n            const right = left === \"left\" ? \"right\" : \"left\";\n            const child = node.getChild(right);\n            if (!child)\n                return node;\n            yield this.pause(\"rotate.zigzig\", node, left, child);\n            yield this.singleRotate(left, node);\n            return yield this.singleRotate(left, child);\n        });\n    }\n}\nconst SplayTreeMessages = {\n    delete: {\n        root: \"Remove root, leaving left and right trees\",\n        singleChild: (right, left) => `No ${right} tree, make ${left} tree the root`,\n        splayLargest: \"Splay largest element in left tree to root\",\n        connectLeftRight: \"Left tree now has no right subtree, connect left and right trees\",\n    },\n    rotate: {\n        splayUp: (node) => `Now splaying ${node} up to the root`,\n        zigzig: (node, left, child) => `Zig-zig: Rotate ${node} ${left}, then rotate ${child} ${left}`,\n    },\n};\n\n;// ./src/collections.ts\n\n\n\n\n\n\nconst COLLECTIONS = {\n    BST: BST,\n    AVL: AVL,\n    RedBlack: RedBlack,\n    SplayTree: SplayTree,\n    BTree: BTree,\n};\ninitialiseCollections(\"#collectionsContainer\");\nfunction initialiseCollections(containerID) {\n    const algoSelector = document.querySelector(`${containerID} select.algorithmSelector`);\n    if (!algoSelector)\n        throw new Error(\"Could not find algo selector\");\n    algoSelector.addEventListener(\"change\", () => {\n        const searchParams = new URLSearchParams();\n        if (algoSelector.value in COLLECTIONS)\n            searchParams.set(\"algorithm\", algoSelector.value);\n        else\n            searchParams.delete(\"algorithm\");\n        if (CollectionEngine.DEBUG)\n            searchParams.set(\"debug\", \"true\");\n        else\n            searchParams.delete(\"debug\");\n        const url = `${window.location.pathname}?${searchParams}`;\n        window.history.replaceState(\"\", \"\", url);\n        window.location.reload();\n    });\n    let algo = new URL(window.location.href).searchParams.get(\"algorithm\");\n    if (!(algo && /^[\\w.]+$/.test(algo) && algo in COLLECTIONS)) {\n        algo = \"\";\n    }\n    const algoClass = algo;\n    algoSelector.value = algo;\n    const Collection = algoClass ? COLLECTIONS[algoClass] : Engine;\n    const CollectionEngine = new Collection(containerID);\n    CollectionEngine.initialise();\n    const toolbar = getCollectionsToolbar(CollectionEngine.container);\n    toolbar.insertSelect.addEventListener(\"change\", () => {\n        toolbar.insertField.value = toolbar.insertSelect.value;\n        toolbar.insertSelect.value = \"\";\n    });\n    addReturnSubmit(toolbar.insertField, \"ALPHANUM+\", () => CollectionEngine.submit(\"insert\", toolbar.insertField));\n    toolbar.insertSubmit.addEventListener(\"click\", () => {\n        CollectionEngine.submit(\"insert\", toolbar.insertField);\n    });\n    addReturnSubmit(toolbar.findField, \"ALPHANUM\", () => CollectionEngine.submit(\"find\", toolbar.findField));\n    toolbar.findSubmit.addEventListener(\"click\", () => CollectionEngine.submit(\"find\", toolbar.findField));\n    addReturnSubmit(toolbar.deleteField, \"ALPHANUM\", () => CollectionEngine.submit(\"delete\", toolbar.deleteField));\n    toolbar.deleteSubmit.addEventListener(\"click\", () => CollectionEngine.submit(\"delete\", toolbar.deleteField));\n    toolbar.printSubmit.addEventListener(\"click\", () => CollectionEngine.submit(\"print\", toolbar.printSubmit));\n    toolbar.clearSubmit.addEventListener(\"click\", () => CollectionEngine.confirmResetAll());\n}\nfunction getCollectionsToolbar(container) {\n    const insertSelect = container.querySelector(\"select.insertSelect\");\n    const insertField = container.querySelector(\"input.insertField\");\n    const insertSubmit = container.querySelector(\"input.insertSubmit\");\n    const findField = container.querySelector(\"input.findField\");\n    const findSubmit = container.querySelector(\"input.findSubmit\");\n    const deleteField = container.querySelector(\"input.deleteField\");\n    const deleteSubmit = container.querySelector(\"input.deleteSubmit\");\n    const printSubmit = container.querySelector(\"input.printSubmit\");\n    const clearSubmit = container.querySelector(\"input.clearSubmit\");\n    if (!insertSelect)\n        throw new Error(\"Missing insert select\");\n    if (!insertField)\n        throw new Error(\"Missing insert field\");\n    if (!insertSubmit)\n        throw new Error(\"Missing insert submit\");\n    if (!findField)\n        throw new Error(\"Missing find field\");\n    if (!findSubmit)\n        throw new Error(\"Missing find submit\");\n    if (!deleteField)\n        throw new Error(\"Missing delete field\");\n    if (!deleteSubmit)\n        throw new Error(\"Missing delete submit\");\n    if (!printSubmit)\n        throw new Error(\"Missing print submit\");\n    if (!clearSubmit)\n        throw new Error(\"Missing clear submit\");\n    return {\n        insertSelect,\n        insertField,\n        insertSubmit,\n        findField,\n        findSubmit,\n        deleteField,\n        deleteSubmit,\n        printSubmit,\n        clearSubmit,\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///166\n")}},__webpack_require__={d:(Q,B)=>{for(var n in B)__webpack_require__.o(B,n)&&!__webpack_require__.o(Q,n)&&Object.defineProperty(Q,n,{enumerable:!0,get:B[n]})},o:(Q,B)=>Object.prototype.hasOwnProperty.call(Q,B),r:Q=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})}},__webpack_exports__={};__webpack_modules__[166](0,__webpack_exports__,__webpack_require__)})();